; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_pwr.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_pwr.crf lib\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;84     *******************************************************************************/
;;;85     void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;86     {
;;;87       /* Check the parameters */
;;;88       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;89     
;;;90       *(vu32 *) CR_DBP_BB = (u32)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;91     }
000004  4770              BX       lr
;;;92     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;282    *******************************************************************************/
;;;283    void PWR_ClearFlag(u32 PWR_FLAG)
000000  4903              LDR      r1,|L2.16|
;;;284    {
;;;285      /* Check the parameters */
;;;286      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;287             
;;;288      PWR->CR |=  PWR_FLAG << 2;
000002  6809              LDR      r1,[r1,#0]
000004  ea410180          ORR      r1,r1,r0,LSL #2
000008  4a01              LDR      r2,|L2.16|
00000a  6011              STR      r1,[r2,#0]
;;;289    }
00000c  4770              BX       lr
;;;290    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;69     *******************************************************************************/
;;;70     void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72       RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;73       RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;74     }
000014  bd10              POP      {r4,pc}
;;;75     
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;224    *******************************************************************************/
;;;225    void PWR_EnterSTANDBYMode(void)
000000  b510              PUSH     {r4,lr}
;;;226    {
;;;227      /* Clear Wake-up flag */
;;;228      PWR->CR |= CR_CWUF_Set;
000002  480a              LDR      r0,|L4.44|
000004  6800              LDR      r0,[r0,#0]
000006  f0400004          ORR      r0,r0,#4
00000a  4908              LDR      r1,|L4.44|
00000c  6008              STR      r0,[r1,#0]
;;;229    
;;;230      /* Select STANDBY mode */
;;;231      PWR->CR |= CR_PDDS_Set;
00000e  4608              MOV      r0,r1
000010  6800              LDR      r0,[r0,#0]
000012  f0400002          ORR      r0,r0,#2
000016  6008              STR      r0,[r1,#0]
;;;232    
;;;233      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;234      *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
000018  4805              LDR      r0,|L4.48|
00001a  6800              LDR      r0,[r0,#0]
00001c  f0400004          ORR      r0,r0,#4
000020  4903              LDR      r1,|L4.48|
000022  6008              STR      r0,[r1,#0]
;;;235    
;;;236      /* Request Wait For Interrupt */
;;;237      __WFI();
000024  f7fffffe          BL       __WFI
;;;238    }
000028  bd10              POP      {r4,pc}
;;;239    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40007000
                  |L4.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;180    *******************************************************************************/
;;;181    void PWR_EnterSTOPMode(u32 PWR_Regulator, u8 PWR_STOPEntry)
000000  b570              PUSH     {r4-r6,lr}
;;;182    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;183      u32 tmpreg = 0;
000006  2400              MOVS     r4,#0
;;;184    
;;;185      /* Check the parameters */
;;;186      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;187      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;188      
;;;189      /* Select the regulator state in STOP mode ---------------------------------*/
;;;190      tmpreg = PWR->CR;
000008  4809              LDR      r0,|L5.48|
00000a  6804              LDR      r4,[r0,#0]
;;;191    
;;;192      /* Clear PDDS and LPDS bits */
;;;193      tmpreg &= CR_DS_Mask;
00000c  f0240403          BIC      r4,r4,#3
;;;194    
;;;195      /* Set LPDS bit according to PWR_Regulator value */
;;;196      tmpreg |= PWR_Regulator;
000010  432c              ORRS     r4,r4,r5
;;;197    
;;;198      /* Store the new value */
;;;199      PWR->CR = tmpreg;
000012  6004              STR      r4,[r0,#0]
;;;200    
;;;201      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;202      *(vu32 *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
000014  4807              LDR      r0,|L5.52|
000016  6800              LDR      r0,[r0,#0]
000018  f0400004          ORR      r0,r0,#4
00001c  4905              LDR      r1,|L5.52|
00001e  6008              STR      r0,[r1,#0]
;;;203      
;;;204      /* Select STOP mode entry --------------------------------------------------*/
;;;205      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000020  2e01              CMP      r6,#1
000022  d102              BNE      |L5.42|
;;;206      {   
;;;207        /* Request Wait For Interrupt */
;;;208        __WFI();
000024  f7fffffe          BL       __WFI
000028  e001              B        |L5.46|
                  |L5.42|
;;;209      }
;;;210      else
;;;211      {
;;;212        /* Request Wait For Event */
;;;213        __WFE();
00002a  f7fffffe          BL       __WFE
                  |L5.46|
;;;214      }
;;;215    }
00002e  bd70              POP      {r4-r6,pc}
;;;216    
                          ENDP

                  |L5.48|
                          DCD      0x40007000
                  |L5.52|
                          DCD      0xe000ed10

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;251    *******************************************************************************/
;;;252    FlagStatus PWR_GetFlagStatus(u32 PWR_FLAG)
000000  4601              MOV      r1,r0
;;;253    {
;;;254      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;255    
;;;256      /* Check the parameters */
;;;257      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;258      
;;;259      if ((PWR->CSR & PWR_FLAG) != (u32)RESET)
000004  4a03              LDR      r2,|L6.20|
000006  6852              LDR      r2,[r2,#4]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L6.16|
;;;260      {
;;;261        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L6.18|
                  |L6.16|
;;;262      }
;;;263      else
;;;264      {
;;;265        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;266      }
;;;267    
;;;268      /* Return the flag status */
;;;269      return bitstatus;
;;;270    }
000012  4770              BX       lr
;;;271    
                          ENDP

                  |L6.20|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;101    *******************************************************************************/
;;;102    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;103    {
;;;104      /* Check the parameters */
;;;105      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;106    
;;;107      *(vu32 *) CR_PVDE_BB = (u32)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;108    }
000004  4770              BX       lr
;;;109    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;127    *******************************************************************************/
;;;128    void PWR_PVDLevelConfig(u32 PWR_PVDLevel)
000000  4601              MOV      r1,r0
;;;129    {
;;;130      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;131    
;;;132      /* Check the parameters */
;;;133      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;134    
;;;135      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L8.20|
000006  6810              LDR      r0,[r2,#0]
;;;136    
;;;137      /* Clear PLS[7:5] bits */
;;;138      tmpreg &= CR_PLS_Mask;
000008  f02000e0          BIC      r0,r0,#0xe0
;;;139    
;;;140      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;141      tmpreg |= PWR_PVDLevel;
00000c  4308              ORRS     r0,r0,r1
;;;142    
;;;143      /* Store the new value */
;;;144      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;145    }
000010  4770              BX       lr
;;;146    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;155    *******************************************************************************/
;;;156    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;157    {
;;;158      /* Check the parameters */
;;;159      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;160    
;;;161      *(vu32 *) CSR_EWUP_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;162    }
000004  4770              BX       lr
;;;163    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e00a0
