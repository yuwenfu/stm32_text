; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_dma.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_dma.crf lib\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||i.DMA_ClearFlag||, CODE, READONLY, ALIGN=2

                  DMA_ClearFlag PROC
;;;501    *******************************************************************************/
;;;502    void DMA_ClearFlag(u32 DMA_FLAG)
000000  f0005180          AND      r1,r0,#0x10000000
;;;503    {
;;;504      /* Check the parameters */
;;;505      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;506    
;;;507      /* Calculate the used DMA */
;;;508      if ((DMA_FLAG & FLAG_Mask) != (u32)RESET)
000004  b111              CBZ      r1,|L1.12|
;;;509      {
;;;510        /* Clear the selected DMA flags */
;;;511        DMA2->IFCR = DMA_FLAG;
000006  4903              LDR      r1,|L1.20|
000008  6008              STR      r0,[r1,#0]
00000a  e001              B        |L1.16|
                  |L1.12|
;;;512      }
;;;513      else
;;;514      {
;;;515        /* Clear the selected DMA flags */
;;;516        DMA1->IFCR = DMA_FLAG;
00000c  4902              LDR      r1,|L1.24|
00000e  6048              STR      r0,[r1,#4]
                  |L1.16|
;;;517      }
;;;518    }
000010  4770              BX       lr
;;;519    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40020404
                  |L1.24|
                          DCD      0x40020000

                          AREA ||i.DMA_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DMA_ClearITPendingBit PROC
;;;670    *******************************************************************************/
;;;671    void DMA_ClearITPendingBit(u32 DMA_IT)
000000  f0005180          AND      r1,r0,#0x10000000
;;;672    {
;;;673      /* Check the parameters */
;;;674      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;675    
;;;676      /* Calculate the used DMA */
;;;677      if ((DMA_IT & FLAG_Mask) != (u32)RESET)
000004  b111              CBZ      r1,|L2.12|
;;;678      {
;;;679        /* Clear the selected DMA interrupt pending bits */
;;;680        DMA2->IFCR = DMA_IT;
000006  4903              LDR      r1,|L2.20|
000008  6008              STR      r0,[r1,#0]
00000a  e001              B        |L2.16|
                  |L2.12|
;;;681      }
;;;682      else
;;;683      {
;;;684        /* Clear the selected DMA interrupt pending bits */
;;;685        DMA1->IFCR = DMA_IT;
00000c  4902              LDR      r1,|L2.24|
00000e  6048              STR      r0,[r1,#4]
                  |L2.16|
;;;686      }
;;;687    }
000010  4770              BX       lr
;;;688    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0x40020404
                  |L2.24|
                          DCD      0x40020000

                          AREA ||i.DMA_Cmd||, CODE, READONLY, ALIGN=1

                  DMA_Cmd PROC
;;;274    *******************************************************************************/
;;;275    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000000  b121              CBZ      r1,|L3.12|
;;;276    {
;;;277      /* Check the parameters */
;;;278      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;279      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;280    
;;;281      if (NewState != DISABLE)
;;;282      {
;;;283        /* Enable the selected DMAy Channelx */
;;;284        DMAy_Channelx->CCR |= CCR_ENABLE_Set;
000002  6802              LDR      r2,[r0,#0]
000004  f0420201          ORR      r2,r2,#1
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L3.20|
                  |L3.12|
;;;285      }
;;;286      else
;;;287      {
;;;288        /* Disable the selected DMAy Channelx */
;;;289        DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
00000c  6802              LDR      r2,[r0,#0]
00000e  f0220201          BIC      r2,r2,#1
000012  6002              STR      r2,[r0,#0]
                  |L3.20|
;;;290      }
;;;291    }
000014  4770              BX       lr
;;;292    
                          ENDP


                          AREA ||i.DMA_DeInit||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;65     *******************************************************************************/
;;;66     void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;67     {
;;;68       /* Check the parameters */
;;;69       assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;70     
;;;71       /* Disable the selected DMAy Channelx */
;;;72       DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;73     
;;;74       /* Reset DMAy Channelx control register */
;;;75       DMAy_Channelx->CCR  = 0;
000008  2100              MOVS     r1,#0
00000a  6001              STR      r1,[r0,#0]
;;;76       
;;;77       /* Reset DMAy Channelx remaining bytes register */
;;;78       DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;79       
;;;80       /* Reset DMAy Channelx peripheral address register */
;;;81       DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;82       
;;;83       /* Reset DMAy Channelx memory address register */
;;;84       DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;85     
;;;86       switch (*(u32*)&DMAy_Channelx)
000012  4a48              LDR      r2,|L4.308|
000014  1a81              SUBS     r1,r0,r2
000016  4290              CMP      r0,r2
000018  d05b              BEQ      |L4.210|
00001a  dc12              BGT      |L4.66|
00001c  4a46              LDR      r2,|L4.312|
00001e  eba00102          SUB      r1,r0,r2
000022  4290              CMP      r0,r2
000024  d03a              BEQ      |L4.156|
000026  dc07              BGT      |L4.56|
000028  4944              LDR      r1,|L4.316|
00002a  4401              ADD      r1,r1,r0
00002c  b1d9              CBZ      r1,|L4.102|
00002e  2914              CMP      r1,#0x14
000030  d022              BEQ      |L4.120|
000032  2928              CMP      r1,#0x28
000034  d17a              BNE      |L4.300|
000036  e028              B        |L4.138|
                  |L4.56|
000038  2914              CMP      r1,#0x14
00003a  d038              BEQ      |L4.174|
00003c  2928              CMP      r1,#0x28
00003e  d175              BNE      |L4.300|
000040  e03e              B        |L4.192|
                  |L4.66|
000042  f5b17f6c          CMP      r1,#0x3b0
000046  d05b              BEQ      |L4.256|
000048  dc06              BGT      |L4.88|
00004a  f5b17f62          CMP      r1,#0x388
00004e  d049              BEQ      |L4.228|
000050  f5b17f67          CMP      r1,#0x39c
000054  d16a              BNE      |L4.300|
000056  e04c              B        |L4.242|
                  |L4.88|
000058  f5b17f71          CMP      r1,#0x3c4
00005c  d057              BEQ      |L4.270|
00005e  f5b17f76          CMP      r1,#0x3d8
000062  d163              BNE      |L4.300|
000064  e05b              B        |L4.286|
                  |L4.102|
;;;87       {
;;;88         case DMA1_Channel1_BASE:
;;;89           /* Reset interrupt pending bits for DMA1 Channel1 */
;;;90           DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000066  4934              LDR      r1,|L4.312|
000068  3944              SUBS     r1,r1,#0x44
00006a  6849              LDR      r1,[r1,#4]
00006c  f041010f          ORR      r1,r1,#0xf
000070  4a31              LDR      r2,|L4.312|
000072  3a44              SUBS     r2,r2,#0x44
000074  6051              STR      r1,[r2,#4]
;;;91           break;
000076  e05a              B        |L4.302|
                  |L4.120|
;;;92     
;;;93         case DMA1_Channel2_BASE:
;;;94           /* Reset interrupt pending bits for DMA1 Channel2 */
;;;95           DMA1->IFCR |= DMA1_Channel2_IT_Mask;
000078  492f              LDR      r1,|L4.312|
00007a  3944              SUBS     r1,r1,#0x44
00007c  6849              LDR      r1,[r1,#4]
00007e  f04101f0          ORR      r1,r1,#0xf0
000082  4a2d              LDR      r2,|L4.312|
000084  3a44              SUBS     r2,r2,#0x44
000086  6051              STR      r1,[r2,#4]
;;;96           break;
000088  e051              B        |L4.302|
                  |L4.138|
;;;97     
;;;98         case DMA1_Channel3_BASE:
;;;99           /* Reset interrupt pending bits for DMA1 Channel3 */
;;;100          DMA1->IFCR |= DMA1_Channel3_IT_Mask;
00008a  492b              LDR      r1,|L4.312|
00008c  3944              SUBS     r1,r1,#0x44
00008e  6849              LDR      r1,[r1,#4]
000090  f4416170          ORR      r1,r1,#0xf00
000094  4a28              LDR      r2,|L4.312|
000096  3a44              SUBS     r2,r2,#0x44
000098  6051              STR      r1,[r2,#4]
;;;101          break;
00009a  e048              B        |L4.302|
                  |L4.156|
;;;102    
;;;103        case DMA1_Channel4_BASE:
;;;104          /* Reset interrupt pending bits for DMA1 Channel4 */
;;;105          DMA1->IFCR |= DMA1_Channel4_IT_Mask;
00009c  4926              LDR      r1,|L4.312|
00009e  3944              SUBS     r1,r1,#0x44
0000a0  6849              LDR      r1,[r1,#4]
0000a2  f4414170          ORR      r1,r1,#0xf000
0000a6  4a24              LDR      r2,|L4.312|
0000a8  3a44              SUBS     r2,r2,#0x44
0000aa  6051              STR      r1,[r2,#4]
;;;106          break;
0000ac  e03f              B        |L4.302|
                  |L4.174|
;;;107    
;;;108        case DMA1_Channel5_BASE:
;;;109          /* Reset interrupt pending bits for DMA1 Channel5 */
;;;110          DMA1->IFCR |= DMA1_Channel5_IT_Mask;
0000ae  4922              LDR      r1,|L4.312|
0000b0  3944              SUBS     r1,r1,#0x44
0000b2  6849              LDR      r1,[r1,#4]
0000b4  f4412170          ORR      r1,r1,#0xf0000
0000b8  4a1f              LDR      r2,|L4.312|
0000ba  3a44              SUBS     r2,r2,#0x44
0000bc  6051              STR      r1,[r2,#4]
;;;111          break;
0000be  e036              B        |L4.302|
                  |L4.192|
;;;112    
;;;113        case DMA1_Channel6_BASE:
;;;114          /* Reset interrupt pending bits for DMA1 Channel6 */
;;;115          DMA1->IFCR |= DMA1_Channel6_IT_Mask;
0000c0  491d              LDR      r1,|L4.312|
0000c2  3944              SUBS     r1,r1,#0x44
0000c4  6849              LDR      r1,[r1,#4]
0000c6  f4410170          ORR      r1,r1,#0xf00000
0000ca  4a1b              LDR      r2,|L4.312|
0000cc  3a44              SUBS     r2,r2,#0x44
0000ce  6051              STR      r1,[r2,#4]
;;;116          break;
0000d0  e02d              B        |L4.302|
                  |L4.210|
;;;117    
;;;118        case DMA1_Channel7_BASE:
;;;119          /* Reset interrupt pending bits for DMA1 Channel7 */
;;;120          DMA1->IFCR |= DMA1_Channel7_IT_Mask;
0000d2  4919              LDR      r1,|L4.312|
0000d4  3944              SUBS     r1,r1,#0x44
0000d6  6849              LDR      r1,[r1,#4]
0000d8  f0416170          ORR      r1,r1,#0xf000000
0000dc  4a16              LDR      r2,|L4.312|
0000de  3a44              SUBS     r2,r2,#0x44
0000e0  6051              STR      r1,[r2,#4]
;;;121          break;
0000e2  e024              B        |L4.302|
                  |L4.228|
;;;122    
;;;123        case DMA2_Channel1_BASE:
;;;124          /* Reset interrupt pending bits for DMA2 Channel1 */
;;;125          DMA2->IFCR |= DMA2_Channel1_IT_Mask;
0000e4  4916              LDR      r1,|L4.320|
0000e6  6809              LDR      r1,[r1,#0]
0000e8  f041010f          ORR      r1,r1,#0xf
0000ec  4a14              LDR      r2,|L4.320|
0000ee  6011              STR      r1,[r2,#0]
;;;126          break;
0000f0  e01d              B        |L4.302|
                  |L4.242|
;;;127    
;;;128        case DMA2_Channel2_BASE:
;;;129          /* Reset interrupt pending bits for DMA2 Channel2 */
;;;130          DMA2->IFCR |= DMA2_Channel2_IT_Mask;
0000f2  4913              LDR      r1,|L4.320|
0000f4  6809              LDR      r1,[r1,#0]
0000f6  f04101f0          ORR      r1,r1,#0xf0
0000fa  4a11              LDR      r2,|L4.320|
0000fc  6011              STR      r1,[r2,#0]
;;;131          break;
0000fe  e016              B        |L4.302|
                  |L4.256|
;;;132    
;;;133        case DMA2_Channel3_BASE:
;;;134          /* Reset interrupt pending bits for DMA2 Channel3 */
;;;135          DMA2->IFCR |= DMA2_Channel3_IT_Mask;
000100  490f              LDR      r1,|L4.320|
000102  6809              LDR      r1,[r1,#0]
000104  f4416170          ORR      r1,r1,#0xf00
000108  4a0d              LDR      r2,|L4.320|
00010a  6011              STR      r1,[r2,#0]
;;;136          break;
00010c  e00f              B        |L4.302|
                  |L4.270|
;;;137    
;;;138        case DMA2_Channel4_BASE:
;;;139          /* Reset interrupt pending bits for DMA2 Channel4 */
;;;140          DMA2->IFCR |= DMA2_Channel4_IT_Mask;
00010e  490c              LDR      r1,|L4.320|
000110  6809              LDR      r1,[r1,#0]
000112  f4414170          ORR      r1,r1,#0xf000
000116  4a0a              LDR      r2,|L4.320|
000118  6011              STR      r1,[r2,#0]
;;;141          break;
00011a  e008              B        |L4.302|
00011c  e006              B        |L4.300|
                  |L4.286|
;;;142    
;;;143        case DMA2_Channel5_BASE:
;;;144          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;145          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00011e  4908              LDR      r1,|L4.320|
000120  6809              LDR      r1,[r1,#0]
000122  f4412170          ORR      r1,r1,#0xf0000
000126  4a06              LDR      r2,|L4.320|
000128  6011              STR      r1,[r2,#0]
;;;146          break;
00012a  e000              B        |L4.302|
                  |L4.300|
;;;147          
;;;148        default:
;;;149          break;
00012c  bf00              NOP      
                  |L4.302|
00012e  bf00              NOP                            ;91
;;;150      }
;;;151    }
000130  4770              BX       lr
;;;152    
                          ENDP

000132  0000              DCW      0x0000
                  |L4.308|
                          DCD      0x40020080
                  |L4.312|
                          DCD      0x40020044
                  |L4.316|
                          DCD      0xbffdfff8
                  |L4.320|
                          DCD      0x40020404

                          AREA ||i.DMA_GetCurrDataCounter||, CODE, READONLY, ALIGN=1

                  DMA_GetCurrDataCounter PROC
;;;341    *******************************************************************************/
;;;342    u16 DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
000000  4601              MOV      r1,r0
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;346    
;;;347      /* Return the number of remaining data units for DMAy Channelx */
;;;348      return ((u16)(DMAy_Channelx->CNDTR));
000002  6848              LDR      r0,[r1,#4]
000004  b280              UXTH     r0,r0
;;;349    }
000006  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.DMA_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetFlagStatus PROC
;;;407    *******************************************************************************/
;;;408    FlagStatus DMA_GetFlagStatus(u32 DMA_FLAG)
000000  4601              MOV      r1,r0
;;;409    {
;;;410      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;411      u32 tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;412    
;;;413      /* Check the parameters */
;;;414      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;415    
;;;416      /* Calculate the used DMA */
;;;417      if ((DMA_FLAG & FLAG_Mask) != (u32)RESET)
000006  f0015380          AND      r3,r1,#0x10000000
00000a  b113              CBZ      r3,|L6.18|
;;;418      {
;;;419        /* Get DMA2 ISR register value */
;;;420        tmpreg = DMA2->ISR ;
00000c  4b05              LDR      r3,|L6.36|
00000e  681a              LDR      r2,[r3,#0]
000010  e001              B        |L6.22|
                  |L6.18|
;;;421      }
;;;422      else
;;;423      {
;;;424        /* Get DMA1 ISR register value */
;;;425        tmpreg = DMA1->ISR ;
000012  4b05              LDR      r3,|L6.40|
000014  681a              LDR      r2,[r3,#0]
                  |L6.22|
;;;426      }
;;;427    
;;;428      /* Check the status of the specified DMA flag */
;;;429      if ((tmpreg & DMA_FLAG) != (u32)RESET)
000016  ea020301          AND      r3,r2,r1
00001a  b10b              CBZ      r3,|L6.32|
;;;430      {
;;;431        /* DMA_FLAG is set */
;;;432        bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L6.34|
                  |L6.32|
;;;433      }
;;;434      else
;;;435      {
;;;436        /* DMA_FLAG is reset */
;;;437        bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L6.34|
;;;438      }
;;;439      
;;;440      /* Return the DMA_FLAG status */
;;;441      return  bitstatus;
;;;442    }
000022  4770              BX       lr
;;;443    
                          ENDP

                  |L6.36|
                          DCD      0x40020400
                  |L6.40|
                          DCD      0x40020000

                          AREA ||i.DMA_GetITStatus||, CODE, READONLY, ALIGN=2

                  DMA_GetITStatus PROC
;;;577    *******************************************************************************/
;;;578    ITStatus DMA_GetITStatus(u32 DMA_IT)
000000  4601              MOV      r1,r0
;;;579    {
;;;580      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;581      u32 tmpreg = 0;
000004  2200              MOVS     r2,#0
;;;582    
;;;583      /* Check the parameters */
;;;584      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;585    
;;;586      /* Calculate the used DMA */
;;;587      if ((DMA_IT & FLAG_Mask) != (u32)RESET)
000006  f0015380          AND      r3,r1,#0x10000000
00000a  b113              CBZ      r3,|L7.18|
;;;588      {
;;;589        /* Get DMA2 ISR register value */
;;;590        tmpreg = DMA2->ISR ;
00000c  4b05              LDR      r3,|L7.36|
00000e  681a              LDR      r2,[r3,#0]
000010  e001              B        |L7.22|
                  |L7.18|
;;;591      }
;;;592      else
;;;593      {
;;;594        /* Get DMA1 ISR register value */
;;;595        tmpreg = DMA1->ISR ;
000012  4b05              LDR      r3,|L7.40|
000014  681a              LDR      r2,[r3,#0]
                  |L7.22|
;;;596      }
;;;597    
;;;598      /* Check the status of the specified DMA interrupt */
;;;599      if ((tmpreg & DMA_IT) != (u32)RESET)
000016  ea020301          AND      r3,r2,r1
00001a  b10b              CBZ      r3,|L7.32|
;;;600      {
;;;601        /* DMA_IT is set */
;;;602        bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L7.34|
                  |L7.32|
;;;603      }
;;;604      else
;;;605      {
;;;606        /* DMA_IT is reset */
;;;607        bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L7.34|
;;;608      }
;;;609      /* Return the DMA_IT status */
;;;610      return  bitstatus;
;;;611    }
000022  4770              BX       lr
;;;612    
                          ENDP

                  |L7.36|
                          DCD      0x40020400
                  |L7.40|
                          DCD      0x40020000

                          AREA ||i.DMA_ITConfig||, CODE, READONLY, ALIGN=1

                  DMA_ITConfig PROC
;;;310    *******************************************************************************/
;;;311    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, u32 DMA_IT, FunctionalState NewState)
000000  b11a              CBZ      r2,|L8.10|
;;;312    {
;;;313      /* Check the parameters */
;;;314      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;315      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;316      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;317    
;;;318      if (NewState != DISABLE)
;;;319      {
;;;320        /* Enable the selected DMA interrupts */
;;;321        DMAy_Channelx->CCR |= DMA_IT;
000002  6803              LDR      r3,[r0,#0]
000004  430b              ORRS     r3,r3,r1
000006  6003              STR      r3,[r0,#0]
000008  e002              B        |L8.16|
                  |L8.10|
;;;322      }
;;;323      else
;;;324      {
;;;325        /* Disable the selected DMA interrupts */
;;;326        DMAy_Channelx->CCR &= ~DMA_IT;
00000a  6803              LDR      r3,[r0,#0]
00000c  438b              BICS     r3,r3,r1
00000e  6003              STR      r3,[r0,#0]
                  |L8.16|
;;;327      }
;;;328    }
000010  4770              BX       lr
;;;329    
                          ENDP


                          AREA ||i.DMA_Init||, CODE, READONLY, ALIGN=1

                  DMA_Init PROC
;;;166    ******************************************************************************/
;;;167    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169      u32 tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;170    
;;;171      /* Check the parameters */
;;;172      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;173      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;174      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;175      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;176      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;177      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;178      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;179      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;180      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;181      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;182    
;;;183    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;184      /* Get the DMAy_Channelx CCR value */
;;;185      tmpreg = DMAy_Channelx->CCR;
000004  6802              LDR      r2,[r0,#0]
;;;186      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;187      tmpreg &= CCR_CLEAR_Mask;
000006  f64773f0          MOV      r3,#0x7ff0
00000a  439a              BICS     r2,r2,r3
;;;188      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;189      /* Set DIR bit according to DMA_DIR value */
;;;190      /* Set CIRC bit according to DMA_Mode value */
;;;191      /* Set PINC bit according to DMA_PeripheralInc value */
;;;192      /* Set MINC bit according to DMA_MemoryInc value */
;;;193      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;194      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;195      /* Set PL bits according to DMA_Priority value */
;;;196      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;197      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00000c  6a0c              LDR      r4,[r1,#0x20]
00000e  688b              LDR      r3,[r1,#8]
000010  4323              ORRS     r3,r3,r4
000012  690c              LDR      r4,[r1,#0x10]
000014  4323              ORRS     r3,r3,r4
000016  694c              LDR      r4,[r1,#0x14]
000018  4323              ORRS     r3,r3,r4
00001a  698c              LDR      r4,[r1,#0x18]
00001c  4323              ORRS     r3,r3,r4
00001e  69cc              LDR      r4,[r1,#0x1c]
000020  4323              ORRS     r3,r3,r4
000022  6a4c              LDR      r4,[r1,#0x24]
000024  4323              ORRS     r3,r3,r4
000026  6a8c              LDR      r4,[r1,#0x28]
000028  4323              ORRS     r3,r3,r4
00002a  431a              ORRS     r2,r2,r3
;;;198                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;199                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;200                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;201      /* Write to DMAy Channelx CCR */
;;;202      DMAy_Channelx->CCR = tmpreg;
00002c  6002              STR      r2,[r0,#0]
;;;203    
;;;204    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;205      /* Write to DMAy Channelx CNDTR */
;;;206      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00002e  68cb              LDR      r3,[r1,#0xc]
000030  6043              STR      r3,[r0,#4]
;;;207    
;;;208    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;209      /* Write to DMAy Channelx CPAR */
;;;210      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000032  680b              LDR      r3,[r1,#0]
000034  6083              STR      r3,[r0,#8]
;;;211    
;;;212    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;213      /* Write to DMAy Channelx CMAR */
;;;214      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000036  684b              LDR      r3,[r1,#4]
000038  60c3              STR      r3,[r0,#0xc]
;;;215    }
00003a  bd10              POP      {r4,pc}
;;;216    
                          ENDP


                          AREA ||i.DMA_StructInit||, CODE, READONLY, ALIGN=1

                  DMA_StructInit PROC
;;;225    *******************************************************************************/
;;;226    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
000000  2100              MOVS     r1,#0
;;;227    {
;;;228    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;229      /* Initialize the DMA_PeripheralBaseAddr member */
;;;230      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000002  6001              STR      r1,[r0,#0]
;;;231    
;;;232      /* Initialize the DMA_MemoryBaseAddr member */
;;;233      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000004  6041              STR      r1,[r0,#4]
;;;234    
;;;235      /* Initialize the DMA_DIR member */
;;;236      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000006  6081              STR      r1,[r0,#8]
;;;237    
;;;238      /* Initialize the DMA_BufferSize member */
;;;239      DMA_InitStruct->DMA_BufferSize = 0;
000008  60c1              STR      r1,[r0,#0xc]
;;;240    
;;;241      /* Initialize the DMA_PeripheralInc member */
;;;242      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;243    
;;;244      /* Initialize the DMA_MemoryInc member */
;;;245      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;246    
;;;247      /* Initialize the DMA_PeripheralDataSize member */
;;;248      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00000e  6181              STR      r1,[r0,#0x18]
;;;249    
;;;250      /* Initialize the DMA_MemoryDataSize member */
;;;251      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000010  61c1              STR      r1,[r0,#0x1c]
;;;252    
;;;253      /* Initialize the DMA_Mode member */
;;;254      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000012  6201              STR      r1,[r0,#0x20]
;;;255    
;;;256      /* Initialize the DMA_Priority member */
;;;257      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000014  6241              STR      r1,[r0,#0x24]
;;;258    
;;;259      /* Initialize the DMA_M2M member */
;;;260      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000016  6281              STR      r1,[r0,#0x28]
;;;261    }
000018  4770              BX       lr
;;;262    
                          ENDP

