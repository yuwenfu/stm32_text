; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_adc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_adc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_adc.crf lib\src\stm32f10x_adc.c]
                          THUMB

                          AREA ||i.ADC_AnalogWatchdogCmd||, CODE, READONLY, ALIGN=2

                  ADC_AnalogWatchdogCmd PROC
;;;1186   *******************************************************************************/
;;;1187   void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, u32 ADC_AnalogWatchdog)
000000  460a              MOV      r2,r1
;;;1188   {
;;;1189     u32 tmpreg = 0;
000002  2100              MOVS     r1,#0
;;;1190   
;;;1191     /* Check the parameters */
;;;1192     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1193     assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
;;;1194   
;;;1195     /* Get the old register value */
;;;1196     tmpreg = ADCx->CR1;
000004  6841              LDR      r1,[r0,#4]
;;;1197     /* Clear AWDEN, AWDENJ and AWDSGL bits */
;;;1198     tmpreg &= CR1_AWDMode_Reset;
000006  4b02              LDR      r3,|L1.16|
000008  4019              ANDS     r1,r1,r3
;;;1199     /* Set the analog watchdog enable mode */
;;;1200     tmpreg |= ADC_AnalogWatchdog;
00000a  4311              ORRS     r1,r1,r2
;;;1201     /* Store the new register value */
;;;1202     ADCx->CR1 = tmpreg;
00000c  6041              STR      r1,[r0,#4]
;;;1203   }
00000e  4770              BX       lr
;;;1204   
                          ENDP

                  |L1.16|
                          DCD      0xff3ffdff

                          AREA ||i.ADC_AnalogWatchdogSingleChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_AnalogWatchdogSingleChannelConfig PROC
;;;1259   *******************************************************************************/
;;;1260   void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel)
000000  460a              MOV      r2,r1
;;;1261   {
;;;1262     u32 tmpreg = 0;
000002  2100              MOVS     r1,#0
;;;1263   
;;;1264     /* Check the parameters */
;;;1265     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1266     assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;1267   
;;;1268     /* Get the old register value */
;;;1269     tmpreg = ADCx->CR1;
000004  6841              LDR      r1,[r0,#4]
;;;1270     /* Clear the Analog watchdog channel select bits */
;;;1271     tmpreg &= CR1_AWDCH_Reset;
000006  f021011f          BIC      r1,r1,#0x1f
;;;1272     /* Set the Analog watchdog channel */
;;;1273     tmpreg |= ADC_Channel;
00000a  4311              ORRS     r1,r1,r2
;;;1274     /* Store the new register value */
;;;1275     ADCx->CR1 = tmpreg;
00000c  6041              STR      r1,[r0,#4]
;;;1276   }
00000e  4770              BX       lr
;;;1277   
                          ENDP


                          AREA ||i.ADC_AnalogWatchdogThresholdsConfig||, CODE, READONLY, ALIGN=1

                  ADC_AnalogWatchdogThresholdsConfig PROC
;;;1216   *******************************************************************************/
;;;1217   void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, u16 HighThreshold,
000000  6241              STR      r1,[r0,#0x24]
;;;1218                                           u16 LowThreshold)
;;;1219   {
;;;1220     /* Check the parameters */
;;;1221     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1222     assert_param(IS_ADC_THRESHOLD(HighThreshold));
;;;1223     assert_param(IS_ADC_THRESHOLD(LowThreshold));
;;;1224   
;;;1225     /* Set the ADCx high threshold */
;;;1226     ADCx->HTR = HighThreshold;
;;;1227     /* Set the ADCx low threshold */
;;;1228     ADCx->LTR = LowThreshold;
000002  6282              STR      r2,[r0,#0x28]
;;;1229   }
000004  4770              BX       lr
;;;1230   
                          ENDP


                          AREA ||i.ADC_AutoInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_AutoInjectedConvCmd PROC
;;;780    *******************************************************************************/
;;;781    void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L4.12|
;;;782    {
;;;783      /* Check the parameters */
;;;784      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;785      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;786    
;;;787      if (NewState != DISABLE)
;;;788      {
;;;789        /* Enable the selected ADC automatic injected group conversion */
;;;790        ADCx->CR1 |= CR1_JAUTO_Set;
000002  6842              LDR      r2,[r0,#4]
000004  f4426280          ORR      r2,r2,#0x400
000008  6042              STR      r2,[r0,#4]
00000a  e003              B        |L4.20|
                  |L4.12|
;;;791      }
;;;792      else
;;;793      {
;;;794        /* Disable the selected ADC automatic injected group conversion */
;;;795        ADCx->CR1 &= CR1_JAUTO_Reset;
00000c  6842              LDR      r2,[r0,#4]
00000e  f4226280          BIC      r2,r2,#0x400
000012  6042              STR      r2,[r0,#4]
                  |L4.20|
;;;796      }
;;;797    }
000014  4770              BX       lr
;;;798    
                          ENDP


                          AREA ||i.ADC_ClearFlag||, CODE, READONLY, ALIGN=1

                  ADC_ClearFlag PROC
;;;1357   *******************************************************************************/
;;;1358   void ADC_ClearFlag(ADC_TypeDef* ADCx, u8 ADC_FLAG)
000000  43ca              MVNS     r2,r1
;;;1359   {
;;;1360     /* Check the parameters */
;;;1361     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1362     assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
;;;1363   
;;;1364     /* Clear the selected ADC flags */
;;;1365     ADCx->SR = ~(u32)ADC_FLAG;
000002  6002              STR      r2,[r0,#0]
;;;1366   }
000004  4770              BX       lr
;;;1367   
                          ENDP


                          AREA ||i.ADC_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  ADC_ClearITPendingBit PROC
;;;1424   *******************************************************************************/
;;;1425   void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, u16 ADC_IT)
000000  2200              MOVS     r2,#0
;;;1426   {
;;;1427     u8 itmask = 0;
;;;1428   
;;;1429     /* Check the parameters */
;;;1430     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1431     assert_param(IS_ADC_IT(ADC_IT));
;;;1432   
;;;1433     /* Get the ADC IT index */
;;;1434     itmask = (u8)(ADC_IT >> 8);
000002  120a              ASRS     r2,r1,#8
;;;1435   
;;;1436     /* Clear the selected ADC interrupt pending bits */
;;;1437     ADCx->SR = ~(u32)itmask;
000004  43d3              MVNS     r3,r2
000006  6003              STR      r3,[r0,#0]
;;;1438   }
000008  4770              BX       lr
;;;1439   
                          ENDP


                          AREA ||i.ADC_Cmd||, CODE, READONLY, ALIGN=1

                  ADC_Cmd PROC
;;;271    *******************************************************************************/
;;;272    void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L7.12|
;;;273    {
;;;274      /* Check the parameters */
;;;275      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;276      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;277    
;;;278      if (NewState != DISABLE)
;;;279      {
;;;280        /* Set the ADON bit to wake up the ADC from power down mode */
;;;281        ADCx->CR2 |= CR2_ADON_Set;
000002  6882              LDR      r2,[r0,#8]
000004  f0420201          ORR      r2,r2,#1
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L7.20|
                  |L7.12|
;;;282      }
;;;283      else
;;;284      {
;;;285        /* Disable the selected ADC peripheral */
;;;286        ADCx->CR2 &= CR2_ADON_Reset;
00000c  6882              LDR      r2,[r0,#8]
00000e  f0220201          BIC      r2,r2,#1
000012  6082              STR      r2,[r0,#8]
                  |L7.20|
;;;287      }
;;;288    }
000014  4770              BX       lr
;;;289    
                          ENDP


                          AREA ||i.ADC_DMACmd||, CODE, READONLY, ALIGN=1

                  ADC_DMACmd PROC
;;;300    *******************************************************************************/
;;;301    void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L8.12|
;;;302    {
;;;303      /* Check the parameters */
;;;304      assert_param(IS_ADC_DMA_PERIPH(ADCx));
;;;305      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;306    
;;;307      if (NewState != DISABLE)
;;;308      {
;;;309        /* Enable the selected ADC DMA request */
;;;310        ADCx->CR2 |= CR2_DMA_Set;
000002  6882              LDR      r2,[r0,#8]
000004  f4427280          ORR      r2,r2,#0x100
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L8.20|
                  |L8.12|
;;;311      }
;;;312      else
;;;313      {
;;;314        /* Disable the selected ADC DMA request */
;;;315        ADCx->CR2 &= CR2_DMA_Reset;
00000c  6882              LDR      r2,[r0,#8]
00000e  f4227280          BIC      r2,r2,#0x100
000012  6082              STR      r2,[r0,#8]
                  |L8.20|
;;;316      }
;;;317    }
000014  4770              BX       lr
;;;318    
                          ENDP


                          AREA ||i.ADC_DeInit||, CODE, READONLY, ALIGN=2

                  ADC_DeInit PROC
;;;132    *******************************************************************************/
;;;133    void ADC_DeInit(ADC_TypeDef* ADCx)
000000  b510              PUSH     {r4,lr}
;;;134    {
000002  4604              MOV      r4,r0
;;;135      /* Check the parameters */
;;;136      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;137    
;;;138      switch (*(u32*)&ADCx)
000004  4815              LDR      r0,|L9.92|
000006  4420              ADD      r0,r0,r4
000008  b130              CBZ      r0,|L9.24|
00000a  f5b06f80          CMP      r0,#0x400
00000e  d00d              BEQ      |L9.44|
000010  f5b05fc0          CMP      r0,#0x1800
000014  d11e              BNE      |L9.84|
000016  e013              B        |L9.64|
                  |L9.24|
;;;139      {
;;;140        case ADC1_BASE:
;;;141          /* Enable ADC1 reset state */
;;;142          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
000018  2101              MOVS     r1,#1
00001a  0248              LSLS     r0,r1,#9
00001c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;143          /* Release ADC1 from reset state */
;;;144          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
000020  2100              MOVS     r1,#0
000022  f44f7000          MOV      r0,#0x200
000026  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;145          break;
00002a  e014              B        |L9.86|
                  |L9.44|
;;;146        
;;;147        case ADC2_BASE:
;;;148          /* Enable ADC2 reset state */
;;;149          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
00002c  2101              MOVS     r1,#1
00002e  0288              LSLS     r0,r1,#10
000030  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;150          /* Release ADC2 from reset state */
;;;151          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
000034  2100              MOVS     r1,#0
000036  f44f6080          MOV      r0,#0x400
00003a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;152          break;
00003e  e00a              B        |L9.86|
                  |L9.64|
;;;153          
;;;154        case ADC3_BASE:
;;;155          /* Enable ADC3 reset state */
;;;156          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
000040  2101              MOVS     r1,#1
000042  03c8              LSLS     r0,r1,#15
000044  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;157          /* Release ADC3 from reset state */
;;;158          RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
000048  2100              MOVS     r1,#0
00004a  f44f4000          MOV      r0,#0x8000
00004e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;159          break; 
000052  e000              B        |L9.86|
                  |L9.84|
;;;160    
;;;161        default:
;;;162          break;
000054  bf00              NOP      
                  |L9.86|
000056  bf00              NOP                            ;145
;;;163      }
;;;164    }
000058  bd10              POP      {r4,pc}
;;;165    
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      0xbffedc00

                          AREA ||i.ADC_DiscModeChannelCountConfig||, CODE, READONLY, ALIGN=1

                  ADC_DiscModeChannelCountConfig PROC
;;;526    *******************************************************************************/
;;;527    void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, u8 Number)
000000  b510              PUSH     {r4,lr}
;;;528    {
000002  460a              MOV      r2,r1
;;;529      u32 tmpreg1 = 0;
000004  2100              MOVS     r1,#0
;;;530      u32 tmpreg2 = 0;
000006  2300              MOVS     r3,#0
;;;531    
;;;532      /* Check the parameters */
;;;533      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;534      assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
;;;535    
;;;536      /* Get the old register value */
;;;537      tmpreg1 = ADCx->CR1;
000008  6841              LDR      r1,[r0,#4]
;;;538      /* Clear the old discontinuous mode channel count */
;;;539      tmpreg1 &= CR1_DISCNUM_Reset;
00000a  f4214160          BIC      r1,r1,#0xe000
;;;540      /* Set the discontinuous mode channel count */
;;;541      tmpreg2 = Number - 1;
00000e  1e53              SUBS     r3,r2,#1
;;;542      tmpreg1 |= tmpreg2 << 13;
000010  ea413143          ORR      r1,r1,r3,LSL #13
;;;543      /* Store the new register value */
;;;544      ADCx->CR1 = tmpreg1;
000014  6041              STR      r1,[r0,#4]
;;;545    }
000016  bd10              POP      {r4,pc}
;;;546    
                          ENDP


                          AREA ||i.ADC_DiscModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_DiscModeCmd PROC
;;;558    *******************************************************************************/
;;;559    void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L11.12|
;;;560    {
;;;561      /* Check the parameters */
;;;562      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;563      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;564    
;;;565      if (NewState != DISABLE)
;;;566      {
;;;567        /* Enable the selected ADC regular discontinuous mode */
;;;568        ADCx->CR1 |= CR1_DISCEN_Set;
000002  6842              LDR      r2,[r0,#4]
000004  f4426200          ORR      r2,r2,#0x800
000008  6042              STR      r2,[r0,#4]
00000a  e003              B        |L11.20|
                  |L11.12|
;;;569      }
;;;570      else
;;;571      {
;;;572        /* Disable the selected ADC regular discontinuous mode */
;;;573        ADCx->CR1 &= CR1_DISCEN_Reset;
00000c  6842              LDR      r2,[r0,#4]
00000e  f4226200          BIC      r2,r2,#0x800
000012  6042              STR      r2,[r0,#4]
                  |L11.20|
;;;574      }
;;;575    }
000014  4770              BX       lr
;;;576    
                          ENDP


                          AREA ||i.ADC_ExternalTrigConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigConvCmd PROC
;;;720    *******************************************************************************/
;;;721    void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L12.12|
;;;722    {
;;;723      /* Check the parameters */
;;;724      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;725      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;726    
;;;727      if (NewState != DISABLE)
;;;728      {
;;;729        /* Enable the selected ADC conversion on external event */
;;;730        ADCx->CR2 |= CR2_EXTTRIG_Set;
000002  6882              LDR      r2,[r0,#8]
000004  f4421280          ORR      r2,r2,#0x100000
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L12.20|
                  |L12.12|
;;;731      }
;;;732      else
;;;733      {
;;;734        /* Disable the selected ADC conversion on external event */
;;;735        ADCx->CR2 &= CR2_EXTTRIG_Reset;
00000c  6882              LDR      r2,[r0,#8]
00000e  f4221280          BIC      r2,r2,#0x100000
000012  6082              STR      r2,[r0,#8]
                  |L12.20|
;;;736      }
;;;737    }
000014  4770              BX       lr
;;;738    
                          ENDP


                          AREA ||i.ADC_ExternalTrigInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigInjectedConvCmd PROC
;;;897    *******************************************************************************/
;;;898    void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L13.12|
;;;899    {
;;;900      /* Check the parameters */
;;;901      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;902      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;903    
;;;904      if (NewState != DISABLE)
;;;905      {
;;;906        /* Enable the selected ADC external event selection for injected group */
;;;907        ADCx->CR2 |= CR2_JEXTTRIG_Set;
000002  6882              LDR      r2,[r0,#8]
000004  f4424200          ORR      r2,r2,#0x8000
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L13.20|
                  |L13.12|
;;;908      }
;;;909      else
;;;910      {
;;;911        /* Disable the selected ADC external event selection for injected group */
;;;912        ADCx->CR2 &= CR2_JEXTTRIG_Reset;
00000c  6882              LDR      r2,[r0,#8]
00000e  f4224200          BIC      r2,r2,#0x8000
000012  6082              STR      r2,[r0,#8]
                  |L13.20|
;;;913      }
;;;914    }
000014  4770              BX       lr
;;;915    
                          ENDP


                          AREA ||i.ADC_ExternalTrigInjectedConvConfig||, CODE, READONLY, ALIGN=1

                  ADC_ExternalTrigInjectedConvConfig PROC
;;;867    *******************************************************************************/
;;;868    void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, u32 ADC_ExternalTrigInjecConv)
000000  460a              MOV      r2,r1
;;;869    {
;;;870      u32 tmpreg = 0;
000002  2100              MOVS     r1,#0
;;;871    
;;;872      /* Check the parameters */
;;;873      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;874      assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
;;;875    
;;;876      /* Get the old register value */
;;;877      tmpreg = ADCx->CR2;
000004  6881              LDR      r1,[r0,#8]
;;;878      /* Clear the old external event selection for injected group */
;;;879      tmpreg &= CR2_JEXTSEL_Reset;
000006  f42141e0          BIC      r1,r1,#0x7000
;;;880      /* Set the external event selection for injected group */
;;;881      tmpreg |= ADC_ExternalTrigInjecConv;
00000a  4311              ORRS     r1,r1,r2
;;;882      /* Store the new register value */
;;;883      ADCx->CR2 = tmpreg;
00000c  6081              STR      r1,[r0,#8]
;;;884    }
00000e  4770              BX       lr
;;;885    
                          ENDP


                          AREA ||i.ADC_GetCalibrationStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetCalibrationStatus PROC
;;;431    *******************************************************************************/
;;;432    FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;433    {
;;;434      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;435    
;;;436      /* Check the parameters */
;;;437      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;438    
;;;439      /* Check the status of CAL bit */
;;;440      if ((ADCx->CR2 & CR2_CAL_Set) != (u32)RESET)
000004  688a              LDR      r2,[r1,#8]
000006  f0020204          AND      r2,r2,#4
00000a  b10a              CBZ      r2,|L15.16|
;;;441      {
;;;442        /* CAL bit is set: calibration on going */
;;;443        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L15.18|
                  |L15.16|
;;;444      }
;;;445      else
;;;446      {
;;;447        /* CAL bit is reset: end of calibration */
;;;448        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;449      }
;;;450    
;;;451      /* Return the CAL bit status */
;;;452      return  bitstatus;
;;;453    }
000012  4770              BX       lr
;;;454    
                          ENDP


                          AREA ||i.ADC_GetConversionValue||, CODE, READONLY, ALIGN=1

                  ADC_GetConversionValue PROC
;;;746    *******************************************************************************/
;;;747    u16 ADC_GetConversionValue(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;748    {
;;;749      /* Check the parameters */
;;;750      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;751    
;;;752      /* Return the selected ADC conversion value */
;;;753      return (u16) ADCx->DR;
000002  6cc8              LDR      r0,[r1,#0x4c]
000004  b280              UXTH     r0,r0
;;;754    }
000006  4770              BX       lr
;;;755    
                          ENDP


                          AREA ||i.ADC_GetDualModeConversionValue||, CODE, READONLY, ALIGN=2

                  ADC_GetDualModeConversionValue PROC
;;;762    *******************************************************************************/
;;;763    u32 ADC_GetDualModeConversionValue(void)
000000  4801              LDR      r0,|L17.8|
;;;764    {
;;;765      /* Return the dual mode conversion value */
;;;766      return (*(vu32 *) DR_ADDRESS);
000002  6800              LDR      r0,[r0,#0]
;;;767    }
000004  4770              BX       lr
;;;768    
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x4001244c

                          AREA ||i.ADC_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetFlagStatus PROC
;;;1318   *******************************************************************************/
;;;1319   FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, u8 ADC_FLAG)
000000  4602              MOV      r2,r0
;;;1320   {
;;;1321     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1322   
;;;1323     /* Check the parameters */
;;;1324     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1325     assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
;;;1326   
;;;1327     /* Check the status of the specified ADC flag */
;;;1328     if ((ADCx->SR & ADC_FLAG) != (u8)RESET)
000004  6813              LDR      r3,[r2,#0]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L18.14|
;;;1329     {
;;;1330       /* ADC_FLAG is set */
;;;1331       bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L18.16|
                  |L18.14|
;;;1332     }
;;;1333     else
;;;1334     {
;;;1335       /* ADC_FLAG is reset */
;;;1336       bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L18.16|
;;;1337     }
;;;1338   
;;;1339     /* Return the ADC_FLAG status */
;;;1340     return  bitstatus;
;;;1341   }
000010  4770              BX       lr
;;;1342   
                          ENDP


                          AREA ||i.ADC_GetITStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetITStatus PROC
;;;1380   *******************************************************************************/
;;;1381   ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, u16 ADC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;1382   {
000002  4602              MOV      r2,r0
;;;1383     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1384     u32 itmask = 0, enablestatus = 0;
000006  2300              MOVS     r3,#0
000008  2400              MOVS     r4,#0
;;;1385   
;;;1386     /* Check the parameters */
;;;1387     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1388     assert_param(IS_ADC_GET_IT(ADC_IT));
;;;1389   
;;;1390     /* Get the ADC IT index */
;;;1391     itmask = ADC_IT >> 8;
00000a  120b              ASRS     r3,r1,#8
;;;1392   
;;;1393     /* Get the ADC_IT enable bit status */
;;;1394     enablestatus = (ADCx->CR1 & (u8)ADC_IT) ;
00000c  6855              LDR      r5,[r2,#4]
00000e  b2ce              UXTB     r6,r1
000010  ea050406          AND      r4,r5,r6
;;;1395   
;;;1396     /* Check the status of the specified ADC interrupt */
;;;1397     if (((ADCx->SR & itmask) != (u32)RESET) && enablestatus)
000014  6815              LDR      r5,[r2,#0]
000016  401d              ANDS     r5,r5,r3
000018  b115              CBZ      r5,|L19.32|
00001a  b10c              CBZ      r4,|L19.32|
;;;1398     {
;;;1399       /* ADC_IT is set */
;;;1400       bitstatus = SET;
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L19.34|
                  |L19.32|
;;;1401     }
;;;1402     else
;;;1403     {
;;;1404       /* ADC_IT is reset */
;;;1405       bitstatus = RESET;
000020  2000              MOVS     r0,#0
                  |L19.34|
;;;1406     }
;;;1407   
;;;1408     /* Return the ADC_IT status */
;;;1409     return  bitstatus;
;;;1410   }
000022  bd70              POP      {r4-r6,pc}
;;;1411   
                          ENDP


                          AREA ||i.ADC_GetInjectedConversionValue||, CODE, READONLY, ALIGN=1

                  ADC_GetInjectedConversionValue PROC
;;;1151   *******************************************************************************/
;;;1152   u16 ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, u8 ADC_InjectedChannel)
000000  4602              MOV      r2,r0
;;;1153   {
;;;1154     /* Check the parameters */
;;;1155     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1156     assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
;;;1157   
;;;1158     /* Returns the selected injected channel conversion data value */
;;;1159     return (u16) (*(vu32*) (((*(u32*)&ADCx) + ADC_InjectedChannel + JDR_Offset)));
000002  1850              ADDS     r0,r2,r1
000004  6a80              LDR      r0,[r0,#0x28]
000006  b280              UXTH     r0,r0
;;;1160   }
000008  4770              BX       lr
;;;1161   
                          ENDP


                          AREA ||i.ADC_GetResetCalibrationStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetResetCalibrationStatus PROC
;;;383    *******************************************************************************/
;;;384    FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;385    {
;;;386      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;387    
;;;388      /* Check the parameters */
;;;389      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;390    
;;;391      /* Check the status of RSTCAL bit */
;;;392      if ((ADCx->CR2 & CR2_RSTCAL_Set) != (u32)RESET)
000004  688a              LDR      r2,[r1,#8]
000006  f0020208          AND      r2,r2,#8
00000a  b10a              CBZ      r2,|L21.16|
;;;393      {
;;;394        /* RSTCAL bit is set */
;;;395        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L21.18|
                  |L21.16|
;;;396      }
;;;397      else
;;;398      {
;;;399        /* RSTCAL bit is reset */
;;;400        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L21.18|
;;;401      }
;;;402    
;;;403      /* Return the RSTCAL bit status */
;;;404      return  bitstatus;
;;;405    }
000012  4770              BX       lr
;;;406    
                          ENDP


                          AREA ||i.ADC_GetSoftwareStartConvStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetSoftwareStartConvStatus PROC
;;;492    *******************************************************************************/
;;;493    FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;494    {
;;;495      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;496    
;;;497      /* Check the parameters */
;;;498      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;499    
;;;500      /* Check the status of SWSTART bit */
;;;501      if ((ADCx->CR2 & CR2_SWSTART_Set) != (u32)RESET)
000004  688a              LDR      r2,[r1,#8]
000006  f4020280          AND      r2,r2,#0x400000
00000a  b10a              CBZ      r2,|L22.16|
;;;502      {
;;;503        /* SWSTART bit is set */
;;;504        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L22.18|
                  |L22.16|
;;;505      }
;;;506      else
;;;507      {
;;;508        /* SWSTART bit is reset */
;;;509        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L22.18|
;;;510      }
;;;511    
;;;512      /* Return the SWSTART bit status */
;;;513      return  bitstatus;
;;;514    }
000012  4770              BX       lr
;;;515    
                          ENDP


                          AREA ||i.ADC_GetSoftwareStartInjectedConvCmdStatus||, CODE, READONLY, ALIGN=1

                  ADC_GetSoftwareStartInjectedConvCmdStatus PROC
;;;955    *******************************************************************************/
;;;956    FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
000000  4601              MOV      r1,r0
;;;957    {
;;;958      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;959    
;;;960      /* Check the parameters */
;;;961      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;962    
;;;963      /* Check the status of JSWSTART bit */
;;;964      if ((ADCx->CR2 & CR2_JSWSTART_Set) != (u32)RESET)
000004  688a              LDR      r2,[r1,#8]
000006  f4021200          AND      r2,r2,#0x200000
00000a  b10a              CBZ      r2,|L23.16|
;;;965      {
;;;966        /* JSWSTART bit is set */
;;;967        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L23.18|
                  |L23.16|
;;;968      }
;;;969      else
;;;970      {
;;;971        /* JSWSTART bit is reset */
;;;972        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L23.18|
;;;973      }
;;;974    
;;;975      /* Return the JSWSTART bit status */
;;;976      return  bitstatus;
;;;977    }
000012  4770              BX       lr
;;;978    
                          ENDP


                          AREA ||i.ADC_ITConfig||, CODE, READONLY, ALIGN=1

                  ADC_ITConfig PROC
;;;334    *******************************************************************************/
;;;335    void ADC_ITConfig(ADC_TypeDef* ADCx, u16 ADC_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;336    {
;;;337      u8 itmask = 0;
000002  2300              MOVS     r3,#0
;;;338    
;;;339      /* Check the parameters */
;;;340      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;341      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;342      assert_param(IS_ADC_IT(ADC_IT));
;;;343    
;;;344      /* Get the ADC IT index */
;;;345      itmask = (u8)ADC_IT;
000004  b2cb              UXTB     r3,r1
;;;346    
;;;347      if (NewState != DISABLE)
000006  b11a              CBZ      r2,|L24.16|
;;;348      {
;;;349        /* Enable the selected ADC interrupts */
;;;350        ADCx->CR1 |= itmask;
000008  6844              LDR      r4,[r0,#4]
00000a  431c              ORRS     r4,r4,r3
00000c  6044              STR      r4,[r0,#4]
00000e  e002              B        |L24.22|
                  |L24.16|
;;;351      }
;;;352      else
;;;353      {
;;;354        /* Disable the selected ADC interrupts */
;;;355        ADCx->CR1 &= (~(u32)itmask);
000010  6844              LDR      r4,[r0,#4]
000012  439c              BICS     r4,r4,r3
000014  6044              STR      r4,[r0,#4]
                  |L24.22|
;;;356      }
;;;357    }
000016  bd10              POP      {r4,pc}
;;;358    
                          ENDP


                          AREA ||i.ADC_Init||, CODE, READONLY, ALIGN=2

                  ADC_Init PROC
;;;177    ******************************************************************************/
;;;178    void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;179    {
000002  4602              MOV      r2,r0
;;;180      u32 tmpreg1 = 0;
000004  2000              MOVS     r0,#0
;;;181      u8 tmpreg2 = 0;
000006  2300              MOVS     r3,#0
;;;182    
;;;183      /* Check the parameters */
;;;184      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;185      assert_param(IS_ADC_MODE(ADC_InitStruct->ADC_Mode));
;;;186      assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
;;;187      assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode));  		    
;;;188      assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));   
;;;189      assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
;;;190      assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));
;;;191    
;;;192      /*---------------------------- ADCx CR1 Configuration -----------------*/
;;;193      /* Get the ADCx CR1 value */
;;;194      tmpreg1 = ADCx->CR1;
000008  6850              LDR      r0,[r2,#4]
;;;195      /* Clear DUALMOD and SCAN bits */
;;;196      tmpreg1 &= CR1_CLEAR_Mask;
00000a  4c0f              LDR      r4,|L25.72|
00000c  4020              ANDS     r0,r0,r4
;;;197      /* Configure ADCx: Dual mode and scan conversion mode */
;;;198      /* Set DUALMOD bits according to ADC_Mode value */
;;;199      /* Set SCAN bit according to ADC_ScanConvMode value */
;;;200      tmpreg1 |= (u32)(ADC_InitStruct->ADC_Mode | ((u32)ADC_InitStruct->ADC_ScanConvMode << 8));
00000e  790d              LDRB     r5,[r1,#4]
000010  680c              LDR      r4,[r1,#0]
000012  ea442405          ORR      r4,r4,r5,LSL #8
000016  4320              ORRS     r0,r0,r4
;;;201      /* Write to ADCx CR1 */
;;;202      ADCx->CR1 = tmpreg1;
000018  6050              STR      r0,[r2,#4]
;;;203    
;;;204      /*---------------------------- ADCx CR2 Configuration -----------------*/
;;;205      /* Get the ADCx CR2 value */
;;;206      tmpreg1 = ADCx->CR2;
00001a  6890              LDR      r0,[r2,#8]
;;;207      /* Clear CONT, ALIGN and EXTSEL bits */
;;;208      tmpreg1 &= CR2_CLEAR_Mask;
00001c  4c0b              LDR      r4,|L25.76|
00001e  4020              ANDS     r0,r0,r4
;;;209      /* Configure ADCx: external trigger event and continuous conversion mode */
;;;210      /* Set ALIGN bit according to ADC_DataAlign value */
;;;211      /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
;;;212      /* Set CONT bit according to ADC_ContinuousConvMode value */
;;;213      tmpreg1 |= (u32)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
000020  e9d15402          LDRD     r5,r4,[r1,#8]
000024  432c              ORRS     r4,r4,r5
000026  794d              LDRB     r5,[r1,#5]
000028  ea440445          ORR      r4,r4,r5,LSL #1
00002c  4320              ORRS     r0,r0,r4
;;;214                ((u32)ADC_InitStruct->ADC_ContinuousConvMode << 1));
;;;215      /* Write to ADCx CR2 */
;;;216      ADCx->CR2 = tmpreg1;
00002e  6090              STR      r0,[r2,#8]
;;;217    
;;;218      /*---------------------------- ADCx SQR1 Configuration -----------------*/
;;;219      /* Get the ADCx SQR1 value */
;;;220      tmpreg1 = ADCx->SQR1;
000030  6ad0              LDR      r0,[r2,#0x2c]
;;;221      /* Clear L bits */
;;;222      tmpreg1 &= SQR1_CLEAR_Mask;
000032  f4200070          BIC      r0,r0,#0xf00000
;;;223      /* Configure ADCx: regular channel sequence length */
;;;224      /* Set L bits according to ADC_NbrOfChannel value */
;;;225      tmpreg2 |= (ADC_InitStruct->ADC_NbrOfChannel - 1);
000036  7c0c              LDRB     r4,[r1,#0x10]
000038  1e64              SUBS     r4,r4,#1
00003a  431c              ORRS     r4,r4,r3
00003c  b2e3              UXTB     r3,r4
;;;226      tmpreg1 |= ((u32)tmpreg2 << 20);
00003e  ea405003          ORR      r0,r0,r3,LSL #20
;;;227      /* Write to ADCx SQR1 */
;;;228      ADCx->SQR1 = tmpreg1;
000042  62d0              STR      r0,[r2,#0x2c]
;;;229    }
000044  bd30              POP      {r4,r5,pc}
;;;230    
                          ENDP

000046  0000              DCW      0x0000
                  |L25.72|
                          DCD      0xfff0feff
                  |L25.76|
                          DCD      0xfff1f7fd

                          AREA ||i.ADC_InjectedChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_InjectedChannelConfig PROC
;;;1020   *******************************************************************************/
;;;1021   void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1022   {
000002  4604              MOV      r4,r0
000004  4615              MOV      r5,r2
;;;1023     u32 tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
000006  2000              MOVS     r0,#0
000008  2200              MOVS     r2,#0
00000a  2600              MOVS     r6,#0
;;;1024   
;;;1025     /* Check the parameters */
;;;1026     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1027     assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;1028     assert_param(IS_ADC_INJECTED_RANK(Rank));
;;;1029     assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
;;;1030   
;;;1031     /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
;;;1032     if (ADC_Channel > ADC_Channel_9)
00000c  2909              CMP      r1,#9
00000e  dd11              BLE      |L26.52|
;;;1033     {
;;;1034       /* Get the old register value */
;;;1035       tmpreg1 = ADCx->SMPR1;
000010  68e0              LDR      r0,[r4,#0xc]
;;;1036       /* Calculate the mask to clear */
;;;1037       tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
000012  f1a1070a          SUB      r7,r1,#0xa
000016  eb070c47          ADD      r12,r7,r7,LSL #1
00001a  2707              MOVS     r7,#7
00001c  fa07f20c          LSL      r2,r7,r12
;;;1038       /* Clear the old discontinuous mode channel count */
;;;1039       tmpreg1 &= ~tmpreg2;
000020  4390              BICS     r0,r0,r2
;;;1040       /* Calculate the mask to set */
;;;1041       tmpreg2 = (u32)ADC_SampleTime << (3*(ADC_Channel - 10));
000022  f1a1070a          SUB      r7,r1,#0xa
000026  eb070747          ADD      r7,r7,r7,LSL #1
00002a  fa03f207          LSL      r2,r3,r7
;;;1042       /* Set the discontinuous mode channel count */
;;;1043       tmpreg1 |= tmpreg2;
00002e  4310              ORRS     r0,r0,r2
;;;1044       /* Store the new register value */
;;;1045       ADCx->SMPR1 = tmpreg1;
000030  60e0              STR      r0,[r4,#0xc]
000032  e00c              B        |L26.78|
                  |L26.52|
;;;1046     }
;;;1047     else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;1048     {
;;;1049       /* Get the old register value */
;;;1050       tmpreg1 = ADCx->SMPR2;
000034  6920              LDR      r0,[r4,#0x10]
;;;1051       /* Calculate the mask to clear */
;;;1052       tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
000036  eb010c41          ADD      r12,r1,r1,LSL #1
00003a  2707              MOVS     r7,#7
00003c  fa07f20c          LSL      r2,r7,r12
;;;1053       /* Clear the old discontinuous mode channel count */
;;;1054       tmpreg1 &= ~tmpreg2;
000040  4390              BICS     r0,r0,r2
;;;1055       /* Calculate the mask to set */
;;;1056       tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
000042  eb010741          ADD      r7,r1,r1,LSL #1
000046  fa03f207          LSL      r2,r3,r7
;;;1057       /* Set the discontinuous mode channel count */
;;;1058       tmpreg1 |= tmpreg2;
00004a  4310              ORRS     r0,r0,r2
;;;1059       /* Store the new register value */
;;;1060       ADCx->SMPR2 = tmpreg1;
00004c  6120              STR      r0,[r4,#0x10]
                  |L26.78|
;;;1061     }
;;;1062   
;;;1063     /* Rank configuration */
;;;1064     /* Get the old register value */
;;;1065     tmpreg1 = ADCx->JSQR;
00004e  6ba0              LDR      r0,[r4,#0x38]
;;;1066     /* Get JL value: Number = JL+1 */
;;;1067     tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
000050  f3c05601          UBFX     r6,r0,#20,#2
;;;1068     /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
;;;1069     tmpreg2 = JSQR_JSQ_Set << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
000054  1cef              ADDS     r7,r5,#3
000056  f1060c01          ADD      r12,r6,#1
00005a  eba7070c          SUB      r7,r7,r12
00005e  eb070c87          ADD      r12,r7,r7,LSL #2
000062  271f              MOVS     r7,#0x1f
000064  fa07f20c          LSL      r2,r7,r12
;;;1070     /* Clear the old JSQx bits for the selected rank */
;;;1071     tmpreg1 &= ~tmpreg2;
000068  4390              BICS     r0,r0,r2
;;;1072     /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
;;;1073     tmpreg2 = (u32)ADC_Channel << (5 * (u8)((Rank + 3) - (tmpreg3 + 1)));
00006a  1cef              ADDS     r7,r5,#3
00006c  f1060c01          ADD      r12,r6,#1
000070  eba7070c          SUB      r7,r7,r12
000074  eb070787          ADD      r7,r7,r7,LSL #2
000078  fa01f207          LSL      r2,r1,r7
;;;1074     /* Set the JSQx bits for the selected rank */
;;;1075     tmpreg1 |= tmpreg2;
00007c  4310              ORRS     r0,r0,r2
;;;1076     /* Store the new register value */
;;;1077     ADCx->JSQR = tmpreg1;
00007e  63a0              STR      r0,[r4,#0x38]
;;;1078   }
000080  bdf0              POP      {r4-r7,pc}
;;;1079   
                          ENDP


                          AREA ||i.ADC_InjectedDiscModeCmd||, CODE, READONLY, ALIGN=1

                  ADC_InjectedDiscModeCmd PROC
;;;810    *******************************************************************************/
;;;811    void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L27.12|
;;;812    {
;;;813      /* Check the parameters */
;;;814      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;815      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;816    
;;;817      if (NewState != DISABLE)
;;;818      {
;;;819        /* Enable the selected ADC injected discontinuous mode */
;;;820        ADCx->CR1 |= CR1_JDISCEN_Set;
000002  6842              LDR      r2,[r0,#4]
000004  f4425280          ORR      r2,r2,#0x1000
000008  6042              STR      r2,[r0,#4]
00000a  e003              B        |L27.20|
                  |L27.12|
;;;821      }
;;;822      else
;;;823      {
;;;824        /* Disable the selected ADC injected discontinuous mode */
;;;825        ADCx->CR1 &= CR1_JDISCEN_Reset;
00000c  6842              LDR      r2,[r0,#4]
00000e  f4225280          BIC      r2,r2,#0x1000
000012  6042              STR      r2,[r0,#4]
                  |L27.20|
;;;826      }
;;;827    }
000014  4770              BX       lr
;;;828    
                          ENDP


                          AREA ||i.ADC_InjectedSequencerLengthConfig||, CODE, READONLY, ALIGN=1

                  ADC_InjectedSequencerLengthConfig PROC
;;;1089   *******************************************************************************/
;;;1090   void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, u8 Length)
000000  b510              PUSH     {r4,lr}
;;;1091   {
000002  460a              MOV      r2,r1
;;;1092     u32 tmpreg1 = 0;
000004  2100              MOVS     r1,#0
;;;1093     u32 tmpreg2 = 0;
000006  2300              MOVS     r3,#0
;;;1094   
;;;1095     /* Check the parameters */
;;;1096     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1097     assert_param(IS_ADC_INJECTED_LENGTH(Length));
;;;1098     
;;;1099     /* Get the old register value */
;;;1100     tmpreg1 = ADCx->JSQR;
000008  6b81              LDR      r1,[r0,#0x38]
;;;1101     /* Clear the old injected sequnence lenght JL bits */
;;;1102     tmpreg1 &= JSQR_JL_Reset;
00000a  f4211140          BIC      r1,r1,#0x300000
;;;1103     /* Set the injected sequnence lenght JL bits */
;;;1104     tmpreg2 = Length - 1; 
00000e  1e53              SUBS     r3,r2,#1
;;;1105     tmpreg1 |= tmpreg2 << 20;
000010  ea415103          ORR      r1,r1,r3,LSL #20
;;;1106     /* Store the new register value */
;;;1107     ADCx->JSQR = tmpreg1;
000014  6381              STR      r1,[r0,#0x38]
;;;1108   }
000016  bd10              POP      {r4,pc}
;;;1109   
                          ENDP


                          AREA ||i.ADC_RegularChannelConfig||, CODE, READONLY, ALIGN=1

                  ADC_RegularChannelConfig PROC
;;;618    *******************************************************************************/
;;;619    void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, u8 ADC_Channel, u8 Rank, u8 ADC_SampleTime)
000000  b5f0              PUSH     {r4-r7,lr}
;;;620    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;621      u32 tmpreg1 = 0, tmpreg2 = 0;
000006  2000              MOVS     r0,#0
000008  2100              MOVS     r1,#0
;;;622    
;;;623      /* Check the parameters */
;;;624      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;625      assert_param(IS_ADC_CHANNEL(ADC_Channel));
;;;626      assert_param(IS_ADC_REGULAR_RANK(Rank));
;;;627      assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
;;;628    
;;;629      /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
;;;630      if (ADC_Channel > ADC_Channel_9)
00000a  2d09              CMP      r5,#9
00000c  dd11              BLE      |L29.50|
;;;631      {
;;;632        /* Get the old register value */
;;;633        tmpreg1 = ADCx->SMPR1;
00000e  68e0              LDR      r0,[r4,#0xc]
;;;634        /* Calculate the mask to clear */
;;;635        tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
000010  f1a5060a          SUB      r6,r5,#0xa
000014  eb060746          ADD      r7,r6,r6,LSL #1
000018  2607              MOVS     r6,#7
00001a  fa06f107          LSL      r1,r6,r7
;;;636        /* Clear the old discontinuous mode channel count */
;;;637        tmpreg1 &= ~tmpreg2;
00001e  4388              BICS     r0,r0,r1
;;;638        /* Calculate the mask to set */
;;;639        tmpreg2 = (u32)ADC_SampleTime << (3 * (ADC_Channel - 10));
000020  f1a5060a          SUB      r6,r5,#0xa
000024  eb060646          ADD      r6,r6,r6,LSL #1
000028  fa03f106          LSL      r1,r3,r6
;;;640        /* Set the discontinuous mode channel count */
;;;641        tmpreg1 |= tmpreg2;
00002c  4308              ORRS     r0,r0,r1
;;;642        /* Store the new register value */
;;;643        ADCx->SMPR1 = tmpreg1;
00002e  60e0              STR      r0,[r4,#0xc]
000030  e00c              B        |L29.76|
                  |L29.50|
;;;644      }
;;;645      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;646      {
;;;647        /* Get the old register value */
;;;648        tmpreg1 = ADCx->SMPR2;
000032  6920              LDR      r0,[r4,#0x10]
;;;649        /* Calculate the mask to clear */
;;;650        tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
000034  eb050745          ADD      r7,r5,r5,LSL #1
000038  2607              MOVS     r6,#7
00003a  fa06f107          LSL      r1,r6,r7
;;;651        /* Clear the old discontinuous mode channel count */
;;;652        tmpreg1 &= ~tmpreg2;
00003e  4388              BICS     r0,r0,r1
;;;653        /* Calculate the mask to set */
;;;654        tmpreg2 = (u32)ADC_SampleTime << (3 * ADC_Channel);
000040  eb050645          ADD      r6,r5,r5,LSL #1
000044  fa03f106          LSL      r1,r3,r6
;;;655        /* Set the discontinuous mode channel count */
;;;656        tmpreg1 |= tmpreg2;
000048  4308              ORRS     r0,r0,r1
;;;657        /* Store the new register value */
;;;658        ADCx->SMPR2 = tmpreg1;
00004a  6120              STR      r0,[r4,#0x10]
                  |L29.76|
;;;659      }
;;;660      /* For Rank 1 to 6 */
;;;661      if (Rank < 7)
00004c  2a07              CMP      r2,#7
00004e  da0f              BGE      |L29.112|
;;;662      {
;;;663        /* Get the old register value */
;;;664        tmpreg1 = ADCx->SQR3;
000050  6b60              LDR      r0,[r4,#0x34]
;;;665        /* Calculate the mask to clear */
;;;666        tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
000052  1e56              SUBS     r6,r2,#1
000054  eb060786          ADD      r7,r6,r6,LSL #2
000058  261f              MOVS     r6,#0x1f
00005a  fa06f107          LSL      r1,r6,r7
;;;667        /* Clear the old SQx bits for the selected rank */
;;;668        tmpreg1 &= ~tmpreg2;
00005e  4388              BICS     r0,r0,r1
;;;669        /* Calculate the mask to set */
;;;670        tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 1));
000060  1e56              SUBS     r6,r2,#1
000062  eb060686          ADD      r6,r6,r6,LSL #2
000066  fa05f106          LSL      r1,r5,r6
;;;671        /* Set the SQx bits for the selected rank */
;;;672        tmpreg1 |= tmpreg2;
00006a  4308              ORRS     r0,r0,r1
;;;673        /* Store the new register value */
;;;674        ADCx->SQR3 = tmpreg1;
00006c  6360              STR      r0,[r4,#0x34]
00006e  e022              B        |L29.182|
                  |L29.112|
;;;675      }
;;;676      /* For Rank 7 to 12 */
;;;677      else if (Rank < 13)
000070  2a0d              CMP      r2,#0xd
000072  da0f              BGE      |L29.148|
;;;678      {
;;;679        /* Get the old register value */
;;;680        tmpreg1 = ADCx->SQR2;
000074  6b20              LDR      r0,[r4,#0x30]
;;;681        /* Calculate the mask to clear */
;;;682        tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
000076  1fd6              SUBS     r6,r2,#7
000078  eb060786          ADD      r7,r6,r6,LSL #2
00007c  261f              MOVS     r6,#0x1f
00007e  fa06f107          LSL      r1,r6,r7
;;;683        /* Clear the old SQx bits for the selected rank */
;;;684        tmpreg1 &= ~tmpreg2;
000082  4388              BICS     r0,r0,r1
;;;685        /* Calculate the mask to set */
;;;686        tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 7));
000084  1fd6              SUBS     r6,r2,#7
000086  eb060686          ADD      r6,r6,r6,LSL #2
00008a  fa05f106          LSL      r1,r5,r6
;;;687        /* Set the SQx bits for the selected rank */
;;;688        tmpreg1 |= tmpreg2;
00008e  4308              ORRS     r0,r0,r1
;;;689        /* Store the new register value */
;;;690        ADCx->SQR2 = tmpreg1;
000090  6320              STR      r0,[r4,#0x30]
000092  e010              B        |L29.182|
                  |L29.148|
;;;691      }
;;;692      /* For Rank 13 to 16 */
;;;693      else
;;;694      {
;;;695        /* Get the old register value */
;;;696        tmpreg1 = ADCx->SQR1;
000094  6ae0              LDR      r0,[r4,#0x2c]
;;;697        /* Calculate the mask to clear */
;;;698        tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
000096  f1a2060d          SUB      r6,r2,#0xd
00009a  eb060786          ADD      r7,r6,r6,LSL #2
00009e  261f              MOVS     r6,#0x1f
0000a0  fa06f107          LSL      r1,r6,r7
;;;699        /* Clear the old SQx bits for the selected rank */
;;;700        tmpreg1 &= ~tmpreg2;
0000a4  4388              BICS     r0,r0,r1
;;;701        /* Calculate the mask to set */
;;;702        tmpreg2 = (u32)ADC_Channel << (5 * (Rank - 13));
0000a6  f1a2060d          SUB      r6,r2,#0xd
0000aa  eb060686          ADD      r6,r6,r6,LSL #2
0000ae  fa05f106          LSL      r1,r5,r6
;;;703        /* Set the SQx bits for the selected rank */
;;;704        tmpreg1 |= tmpreg2;
0000b2  4308              ORRS     r0,r0,r1
;;;705        /* Store the new register value */
;;;706        ADCx->SQR1 = tmpreg1;
0000b4  62e0              STR      r0,[r4,#0x2c]
                  |L29.182|
;;;707      }
;;;708    }
0000b6  bdf0              POP      {r4-r7,pc}
;;;709    
                          ENDP


                          AREA ||i.ADC_ResetCalibration||, CODE, READONLY, ALIGN=1

                  ADC_ResetCalibration PROC
;;;366    *******************************************************************************/
;;;367    void ADC_ResetCalibration(ADC_TypeDef* ADCx)
000000  6881              LDR      r1,[r0,#8]
;;;368    {
;;;369      /* Check the parameters */
;;;370      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;371    
;;;372      /* Resets the selected ADC calibartion registers */  
;;;373      ADCx->CR2 |= CR2_RSTCAL_Set;
000002  f0410108          ORR      r1,r1,#8
000006  6081              STR      r1,[r0,#8]
;;;374    }
000008  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||i.ADC_SetInjectedOffset||, CODE, READONLY, ALIGN=1

                  ADC_SetInjectedOffset PROC
;;;1126   *******************************************************************************/
;;;1127   void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, u8 ADC_InjectedChannel, u16 Offset)
000000  5042              STR      r2,[r0,r1]
;;;1128   {
;;;1129     /* Check the parameters */
;;;1130     assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;1131     assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
;;;1132     assert_param(IS_ADC_OFFSET(Offset));  
;;;1133   
;;;1134     /* Set the selected injected channel data offset */
;;;1135     *((vu32 *)((*(u32*)&ADCx) + ADC_InjectedChannel)) = (u32)Offset;
;;;1136   }
000002  4770              BX       lr
;;;1137   
                          ENDP


                          AREA ||i.ADC_SoftwareStartConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_SoftwareStartConvCmd PROC
;;;464    *******************************************************************************/
;;;465    void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L32.12|
;;;466    {
;;;467      /* Check the parameters */
;;;468      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;469      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;470    
;;;471      if (NewState != DISABLE)
;;;472      {
;;;473        /* Enable the selected ADC conversion on external event and start the selected
;;;474           ADC conversion */
;;;475        ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
000002  6882              LDR      r2,[r0,#8]
000004  f44202a0          ORR      r2,r2,#0x500000
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L32.20|
                  |L32.12|
;;;476      }
;;;477      else
;;;478      {
;;;479        /* Disable the selected ADC conversion on external event and stop the selected
;;;480           ADC conversion */
;;;481        ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
00000c  6882              LDR      r2,[r0,#8]
00000e  f42202a0          BIC      r2,r2,#0x500000
000012  6082              STR      r2,[r0,#8]
                  |L32.20|
;;;482      }
;;;483    }
000014  4770              BX       lr
;;;484    
                          ENDP


                          AREA ||i.ADC_SoftwareStartInjectedConvCmd||, CODE, READONLY, ALIGN=1

                  ADC_SoftwareStartInjectedConvCmd PROC
;;;927    *******************************************************************************/
;;;928    void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
000000  b121              CBZ      r1,|L33.12|
;;;929    {
;;;930      /* Check the parameters */
;;;931      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;932      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;933    
;;;934      if (NewState != DISABLE)
;;;935      {
;;;936        /* Enable the selected ADC conversion for injected group on external event and start the selected
;;;937           ADC injected conversion */
;;;938        ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
000002  6882              LDR      r2,[r0,#8]
000004  f4421202          ORR      r2,r2,#0x208000
000008  6082              STR      r2,[r0,#8]
00000a  e003              B        |L33.20|
                  |L33.12|
;;;939      }
;;;940      else
;;;941      {
;;;942        /* Disable the selected ADC conversion on external event for injected group and stop the selected
;;;943           ADC injected conversion */
;;;944        ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
00000c  6882              LDR      r2,[r0,#8]
00000e  f4221202          BIC      r2,r2,#0x208000
000012  6082              STR      r2,[r0,#8]
                  |L33.20|
;;;945      }
;;;946    }
000014  4770              BX       lr
;;;947    
                          ENDP


                          AREA ||i.ADC_StartCalibration||, CODE, READONLY, ALIGN=1

                  ADC_StartCalibration PROC
;;;414    *******************************************************************************/
;;;415    void ADC_StartCalibration(ADC_TypeDef* ADCx)
000000  6881              LDR      r1,[r0,#8]
;;;416    {
;;;417      /* Check the parameters */
;;;418      assert_param(IS_ADC_ALL_PERIPH(ADCx));
;;;419    
;;;420      /* Enable the selected ADC calibration process */  
;;;421      ADCx->CR2 |= CR2_CAL_Set;
000002  f0410104          ORR      r1,r1,#4
000006  6081              STR      r1,[r0,#8]
;;;422    }
000008  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.ADC_StructInit||, CODE, READONLY, ALIGN=1

                  ADC_StructInit PROC
;;;239    *******************************************************************************/
;;;240    void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
000000  2100              MOVS     r1,#0
;;;241    {
;;;242      /* Reset ADC init structure parameters values */
;;;243      /* Initialize the ADC_Mode member */
;;;244      ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
000002  6001              STR      r1,[r0,#0]
;;;245    
;;;246      /* initialize the ADC_ScanConvMode member */
;;;247      ADC_InitStruct->ADC_ScanConvMode = DISABLE;
000004  7101              STRB     r1,[r0,#4]
;;;248    
;;;249      /* Initialize the ADC_ContinuousConvMode member */
;;;250      ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
000006  7141              STRB     r1,[r0,#5]
;;;251    
;;;252      /* Initialize the ADC_ExternalTrigConv member */
;;;253      ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
000008  6081              STR      r1,[r0,#8]
;;;254    
;;;255      /* Initialize the ADC_DataAlign member */
;;;256      ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
00000a  60c1              STR      r1,[r0,#0xc]
;;;257    
;;;258      /* Initialize the ADC_NbrOfChannel member */
;;;259      ADC_InitStruct->ADC_NbrOfChannel = 1;
00000c  2101              MOVS     r1,#1
00000e  7401              STRB     r1,[r0,#0x10]
;;;260    }
000010  4770              BX       lr
;;;261    
                          ENDP


                          AREA ||i.ADC_TempSensorVrefintCmd||, CODE, READONLY, ALIGN=2

                  ADC_TempSensorVrefintCmd PROC
;;;1286   *******************************************************************************/
;;;1287   void ADC_TempSensorVrefintCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L36.16|
;;;1288   {
;;;1289     /* Check the parameters */
;;;1290     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1291   
;;;1292     if (NewState != DISABLE)
;;;1293     {
;;;1294       /* Enable the temperature sensor and Vrefint channel*/
;;;1295       ADC1->CR2 |= CR2_TSVREFE_Set;
000002  4907              LDR      r1,|L36.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4410100          ORR      r1,r1,#0x800000
00000a  4a05              LDR      r2,|L36.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L36.28|
                  |L36.16|
;;;1296     }
;;;1297     else
;;;1298     {
;;;1299       /* Disable the temperature sensor and Vrefint channel*/
;;;1300       ADC1->CR2 &= CR2_TSVREFE_Reset;
000010  4903              LDR      r1,|L36.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4210100          BIC      r1,r1,#0x800000
000018  4a01              LDR      r2,|L36.32|
00001a  6011              STR      r1,[r2,#0]
                  |L36.28|
;;;1301     }
;;;1302   }
00001c  4770              BX       lr
;;;1303   
                          ENDP

00001e  0000              DCW      0x0000
                  |L36.32|
                          DCD      0x40012408
