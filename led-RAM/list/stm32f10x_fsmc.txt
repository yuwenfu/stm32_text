; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_fsmc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_fsmc.crf lib\src\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_ClearFlag||, CODE, READONLY, ALIGN=2

                  FSMC_ClearFlag PROC
;;;750    *******************************************************************************/                   
;;;751    void FSMC_ClearFlag(u32 FSMC_Bank, u32 FSMC_FLAG)
000000  2810              CMP      r0,#0x10
;;;752    {
;;;753     /* Check the parameters */
;;;754      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;755      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;756        
;;;757      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d107              BNE      |L1.20|
;;;758      {
;;;759        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  438a              BICS     r2,r2,r1
00000c  f04f4320          MOV      r3,#0xa0000000
000010  665a              STR      r2,[r3,#0x64]
000012  e012              B        |L1.58|
                  |L1.20|
;;;760      }  
;;;761      else if(FSMC_Bank == FSMC_Bank3_NAND)
000014  f5b07f80          CMP      r0,#0x100
000018  d107              BNE      |L1.42|
;;;762      {
;;;763        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
00001a  4a08              LDR      r2,|L1.60|
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32084          STR      r2,[r3,#0x84]
000028  e007              B        |L1.58|
                  |L1.42|
;;;764      }
;;;765      /* FSMC_Bank4_PCCARD*/
;;;766      else
;;;767      {
;;;768        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
00002a  4a04              LDR      r2,|L1.60|
00002c  3220              ADDS     r2,r2,#0x20
00002e  6812              LDR      r2,[r2,#0]
000030  438a              BICS     r2,r2,r1
000032  f04f4320          MOV      r3,#0xa0000000
000036  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.58|
;;;769      }
;;;770    }
00003a  4770              BX       lr
;;;771    
                          ENDP

                  |L1.60|
                          DCD      0xa0000084

                          AREA ||i.FSMC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  FSMC_ClearITPendingBit PROC
;;;841    *******************************************************************************/
;;;842    void FSMC_ClearITPendingBit(u32 FSMC_Bank, u32 FSMC_IT)
000000  2810              CMP      r0,#0x10
;;;843    {
;;;844      /* Check the parameters */
;;;845      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;846      assert_param(IS_FSMC_IT(FSMC_IT));
;;;847        
;;;848      if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d108              BNE      |L2.22|
;;;849      {
;;;850        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
000004  f04f4220          MOV      r2,#0xa0000000
000008  6e52              LDR      r2,[r2,#0x64]
00000a  ea2202d1          BIC      r2,r2,r1,LSR #3
00000e  f04f4320          MOV      r3,#0xa0000000
000012  665a              STR      r2,[r3,#0x64]
000014  e014              B        |L2.64|
                  |L2.22|
;;;851      }  
;;;852      else if(FSMC_Bank == FSMC_Bank3_NAND)
000016  f5b07f80          CMP      r0,#0x100
00001a  d108              BNE      |L2.46|
;;;853      {
;;;854        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
00001c  4a09              LDR      r2,|L2.68|
00001e  6812              LDR      r2,[r2,#0]
000020  ea2202d1          BIC      r2,r2,r1,LSR #3
000024  f04f4320          MOV      r3,#0xa0000000
000028  f8c32084          STR      r2,[r3,#0x84]
00002c  e008              B        |L2.64|
                  |L2.46|
;;;855      }
;;;856      /* FSMC_Bank4_PCCARD*/
;;;857      else
;;;858      {
;;;859        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
00002e  4a05              LDR      r2,|L2.68|
000030  3220              ADDS     r2,r2,#0x20
000032  6812              LDR      r2,[r2,#0]
000034  ea2202d1          BIC      r2,r2,r1,LSR #3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  f8c320a4          STR      r2,[r3,#0xa4]
                  |L2.64|
;;;860      }
;;;861    }
000040  4770              BX       lr
;;;862    
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0xa0000084

                          AREA ||i.FSMC_GetECC||, CODE, READONLY, ALIGN=2

                  FSMC_GetECC PROC
;;;599    *******************************************************************************/
;;;600    u32 FSMC_GetECC(u32 FSMC_Bank)
000000  4601              MOV      r1,r0
;;;601    {
;;;602      u32 eccval = 0x00000000;
000002  2000              MOVS     r0,#0
;;;603      
;;;604      if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2910              CMP      r1,#0x10
000006  d103              BNE      |L3.16|
;;;605      {
;;;606        /* Get the ECCR2 register value */
;;;607        eccval = FSMC_Bank2->ECCR2;
000008  f04f4220          MOV      r2,#0xa0000000
00000c  6f50              LDR      r0,[r2,#0x74]
00000e  e001              B        |L3.20|
                  |L3.16|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get the ECCR3 register value */
;;;612        eccval = FSMC_Bank3->ECCR3;
000010  4a01              LDR      r2,|L3.24|
000012  6810              LDR      r0,[r2,#0]
                  |L3.20|
;;;613      }
;;;614      /* Return the error correction code value */
;;;615      return(eccval);
;;;616    }
000014  4770              BX       lr
;;;617    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0xa0000094

                          AREA ||i.FSMC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetFlagStatus PROC
;;;698    *******************************************************************************/                   
;;;699    FlagStatus FSMC_GetFlagStatus(u32 FSMC_Bank, u32 FSMC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;700    {
000002  4602              MOV      r2,r0
;;;701      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;702      u32 tmpsr = 0x00000000;
000006  2300              MOVS     r3,#0
;;;703      
;;;704      /* Check the parameters */
;;;705      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;706      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;707      
;;;708      if(FSMC_Bank == FSMC_Bank2_NAND)
000008  2a10              CMP      r2,#0x10
00000a  d103              BNE      |L4.20|
;;;709      {
;;;710        tmpsr = FSMC_Bank2->SR2;
00000c  f04f4420          MOV      r4,#0xa0000000
000010  6e63              LDR      r3,[r4,#0x64]
000012  e008              B        |L4.38|
                  |L4.20|
;;;711      }  
;;;712      else if(FSMC_Bank == FSMC_Bank3_NAND)
000014  f5b27f80          CMP      r2,#0x100
000018  d102              BNE      |L4.32|
;;;713      {
;;;714        tmpsr = FSMC_Bank3->SR3;
00001a  4c06              LDR      r4,|L4.52|
00001c  6823              LDR      r3,[r4,#0]
00001e  e002              B        |L4.38|
                  |L4.32|
;;;715      }
;;;716      /* FSMC_Bank4_PCCARD*/
;;;717      else
;;;718      {
;;;719        tmpsr = FSMC_Bank4->SR4;
000020  4c04              LDR      r4,|L4.52|
000022  3420              ADDS     r4,r4,#0x20
000024  6823              LDR      r3,[r4,#0]
                  |L4.38|
;;;720      } 
;;;721      
;;;722      /* Get the flag status */
;;;723      if ((tmpsr & FSMC_FLAG) != (u16)RESET )
000026  ea030401          AND      r4,r3,r1
00002a  b10c              CBZ      r4,|L4.48|
;;;724      {
;;;725        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L4.50|
                  |L4.48|
;;;726      }
;;;727      else
;;;728      {
;;;729        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L4.50|
;;;730      }
;;;731      /* Return the flag status */
;;;732      return bitstatus;
;;;733    }
000032  bd10              POP      {r4,pc}
;;;734    
                          ENDP

                  |L4.52|
                          DCD      0xa0000084

                          AREA ||i.FSMC_GetITStatus||, CODE, READONLY, ALIGN=2

                  FSMC_GetITStatus PROC
;;;787    *******************************************************************************/ 
;;;788    ITStatus FSMC_GetITStatus(u32 FSMC_Bank, u32 FSMC_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;789    {
000002  4602              MOV      r2,r0
;;;790      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;791      u32 tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
000006  2300              MOVS     r3,#0
000008  2400              MOVS     r4,#0
00000a  2500              MOVS     r5,#0
;;;792      
;;;793      /* Check the parameters */
;;;794      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;795      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;796      
;;;797      if(FSMC_Bank == FSMC_Bank2_NAND)
00000c  2a10              CMP      r2,#0x10
00000e  d103              BNE      |L5.24|
;;;798      {
;;;799        tmpsr = FSMC_Bank2->SR2;
000010  f04f4620          MOV      r6,#0xa0000000
000014  6e73              LDR      r3,[r6,#0x64]
000016  e008              B        |L5.42|
                  |L5.24|
;;;800      }  
;;;801      else if(FSMC_Bank == FSMC_Bank3_NAND)
000018  f5b27f80          CMP      r2,#0x100
00001c  d102              BNE      |L5.36|
;;;802      {
;;;803        tmpsr = FSMC_Bank3->SR3;
00001e  4e08              LDR      r6,|L5.64|
000020  6833              LDR      r3,[r6,#0]
000022  e002              B        |L5.42|
                  |L5.36|
;;;804      }
;;;805      /* FSMC_Bank4_PCCARD*/
;;;806      else
;;;807      {
;;;808        tmpsr = FSMC_Bank4->SR4;
000024  4e06              LDR      r6,|L5.64|
000026  3620              ADDS     r6,r6,#0x20
000028  6833              LDR      r3,[r6,#0]
                  |L5.42|
;;;809      } 
;;;810      
;;;811      itstatus = tmpsr & FSMC_IT;
00002a  ea030401          AND      r4,r3,r1
;;;812      
;;;813      itenable = tmpsr & (FSMC_IT >> 3);
00002e  ea0305d1          AND      r5,r3,r1,LSR #3
;;;814    
;;;815      if ((itstatus != (u32)RESET)  && (itenable != (u32)RESET))
000032  b114              CBZ      r4,|L5.58|
000034  b10d              CBZ      r5,|L5.58|
;;;816      {
;;;817        bitstatus = SET;
000036  2001              MOVS     r0,#1
000038  e000              B        |L5.60|
                  |L5.58|
;;;818      }
;;;819      else
;;;820      {
;;;821        bitstatus = RESET;
00003a  2000              MOVS     r0,#0
                  |L5.60|
;;;822      }
;;;823      return bitstatus; 
;;;824    }
00003c  bd70              POP      {r4-r6,pc}
;;;825    
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
                          DCD      0xa0000084

                          AREA ||i.FSMC_ITConfig||, CODE, READONLY, ALIGN=2

                  FSMC_ITConfig PROC
;;;636    *******************************************************************************/
;;;637    void FSMC_ITConfig(u32 FSMC_Bank, u32 FSMC_IT, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;638    {
;;;639      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;640      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;641      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;642      
;;;643      if (NewState != DISABLE)
000002  b1ea              CBZ      r2,|L6.64|
;;;644      {
;;;645        /* Enable the selected FSMC_Bank2 interrupts */
;;;646        if(FSMC_Bank == FSMC_Bank2_NAND)
000004  2810              CMP      r0,#0x10
000006  d107              BNE      |L6.24|
;;;647        {
;;;648          FSMC_Bank2->SR2 |= FSMC_IT;
000008  f04f4320          MOV      r3,#0xa0000000
00000c  6e5b              LDR      r3,[r3,#0x64]
00000e  430b              ORRS     r3,r3,r1
000010  f04f4420          MOV      r4,#0xa0000000
000014  6663              STR      r3,[r4,#0x64]
000016  e030              B        |L6.122|
                  |L6.24|
;;;649        }
;;;650        /* Enable the selected FSMC_Bank3 interrupts */
;;;651        else if (FSMC_Bank == FSMC_Bank3_NAND)
000018  f5b07f80          CMP      r0,#0x100
00001c  d107              BNE      |L6.46|
;;;652        {
;;;653          FSMC_Bank3->SR3 |= FSMC_IT;
00001e  4b17              LDR      r3,|L6.124|
000020  681b              LDR      r3,[r3,#0]
000022  430b              ORRS     r3,r3,r1
000024  f04f4420          MOV      r4,#0xa0000000
000028  f8c43084          STR      r3,[r4,#0x84]
00002c  e025              B        |L6.122|
                  |L6.46|
;;;654        }
;;;655        /* Enable the selected FSMC_Bank4 interrupts */
;;;656        else
;;;657        {
;;;658          FSMC_Bank4->SR4 |= FSMC_IT;    
00002e  4b13              LDR      r3,|L6.124|
000030  3320              ADDS     r3,r3,#0x20
000032  681b              LDR      r3,[r3,#0]
000034  430b              ORRS     r3,r3,r1
000036  f04f4420          MOV      r4,#0xa0000000
00003a  f8c430a4          STR      r3,[r4,#0xa4]
00003e  e01c              B        |L6.122|
                  |L6.64|
;;;659        }
;;;660      }
;;;661      else
;;;662      {
;;;663        /* Disable the selected FSMC_Bank2 interrupts */
;;;664        if(FSMC_Bank == FSMC_Bank2_NAND)
000040  2810              CMP      r0,#0x10
000042  d107              BNE      |L6.84|
;;;665        {
;;;666          
;;;667          FSMC_Bank2->SR2 &= (u32)~FSMC_IT;
000044  f04f4320          MOV      r3,#0xa0000000
000048  6e5b              LDR      r3,[r3,#0x64]
00004a  438b              BICS     r3,r3,r1
00004c  f04f4420          MOV      r4,#0xa0000000
000050  6663              STR      r3,[r4,#0x64]
000052  e012              B        |L6.122|
                  |L6.84|
;;;668        }
;;;669        /* Disable the selected FSMC_Bank3 interrupts */
;;;670        else if (FSMC_Bank == FSMC_Bank3_NAND)
000054  f5b07f80          CMP      r0,#0x100
000058  d107              BNE      |L6.106|
;;;671        {
;;;672          FSMC_Bank3->SR3 &= (u32)~FSMC_IT;
00005a  4b08              LDR      r3,|L6.124|
00005c  681b              LDR      r3,[r3,#0]
00005e  438b              BICS     r3,r3,r1
000060  f04f4420          MOV      r4,#0xa0000000
000064  f8c43084          STR      r3,[r4,#0x84]
000068  e007              B        |L6.122|
                  |L6.106|
;;;673        }
;;;674        /* Disable the selected FSMC_Bank4 interrupts */
;;;675        else
;;;676        {
;;;677          FSMC_Bank4->SR4 &= (u32)~FSMC_IT;    
00006a  4b04              LDR      r3,|L6.124|
00006c  3320              ADDS     r3,r3,#0x20
00006e  681b              LDR      r3,[r3,#0]
000070  438b              BICS     r3,r3,r1
000072  f04f4420          MOV      r4,#0xa0000000
000076  f8c430a4          STR      r3,[r4,#0xa4]
                  |L6.122|
;;;678        }
;;;679      }
;;;680    }
00007a  bd10              POP      {r4,pc}
;;;681                      
                          ENDP

                  |L6.124|
                          DCD      0xa0000084

                          AREA ||i.FSMC_NANDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDCmd PROC
;;;491    *******************************************************************************/
;;;492    void FSMC_NANDCmd(u32 FSMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L7.42|
;;;493    {
;;;494      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;495      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;496      
;;;497      if (NewState != DISABLE)
;;;498      {
;;;499        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;500        if(FSMC_Bank == FSMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L7.24|
;;;501        {
;;;502          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420204          ORR      r2,r2,#4
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01b              B        |L7.80|
                  |L7.24|
;;;503        }
;;;504        else
;;;505        {
;;;506          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
000018  4a0e              LDR      r2,|L7.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420204          ORR      r2,r2,#4
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e012              B        |L7.80|
                  |L7.42|
;;;507        }
;;;508      }
;;;509      else
;;;510      {
;;;511        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;512        if(FSMC_Bank == FSMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L7.64|
;;;513        {
;;;514          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L7.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e007              B        |L7.80|
                  |L7.64|
;;;515        }
;;;516        else
;;;517        {
;;;518          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
000040  4a04              LDR      r2,|L7.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L7.88|
000046  401a              ANDS     r2,r2,r3
000048  f04f4320          MOV      r3,#0xa0000000
00004c  f8c32080          STR      r2,[r3,#0x80]
                  |L7.80|
;;;519        }
;;;520      }
;;;521    }
000050  4770              BX       lr
;;;522    
                          ENDP

000052  0000              DCW      0x0000
                  |L7.84|
                          DCD      0xa0000080
                  |L7.88|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_NANDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDDeInit PROC
;;;85     *******************************************************************************/
;;;86     void FSMC_NANDDeInit(u32 FSMC_Bank)
000000  2810              CMP      r0,#0x10
;;;87     {
;;;88       /* Check the parameter */
;;;89       assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;90       
;;;91       if(FSMC_Bank == FSMC_Bank2_NAND)
000002  d10a              BNE      |L8.26|
;;;92       {
;;;93         /* Set the FSMC_Bank2 registers to their reset values */
;;;94         FSMC_Bank2->PCR2 = 0x00000018;
000004  2118              MOVS     r1,#0x18
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6611              STR      r1,[r2,#0x60]
;;;95         FSMC_Bank2->SR2 = 0x00000040;
00000c  2140              MOVS     r1,#0x40
00000e  6651              STR      r1,[r2,#0x64]
;;;96         FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
000010  f04f31fc          MOV      r1,#0xfcfcfcfc
000014  6691              STR      r1,[r2,#0x68]
;;;97         FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
000016  66d1              STR      r1,[r2,#0x6c]
000018  e010              B        |L8.60|
                  |L8.26|
;;;98       }
;;;99       /* FSMC_Bank3_NAND */  
;;;100      else
;;;101      {
;;;102        /* Set the FSMC_Bank3 registers to their reset values */
;;;103        FSMC_Bank3->PCR3 = 0x00000018;
00001a  2118              MOVS     r1,#0x18
00001c  4a08              LDR      r2,|L8.64|
00001e  6011              STR      r1,[r2,#0]
;;;104        FSMC_Bank3->SR3 = 0x00000040;
000020  2140              MOVS     r1,#0x40
000022  f04f4220          MOV      r2,#0xa0000000
000026  f8c21084          STR      r1,[r2,#0x84]
;;;105        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
00002a  f04f31fc          MOV      r1,#0xfcfcfcfc
00002e  4a04              LDR      r2,|L8.64|
000030  3208              ADDS     r2,r2,#8
000032  6011              STR      r1,[r2,#0]
;;;106        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
000034  f04f4220          MOV      r2,#0xa0000000
000038  f8c2108c          STR      r1,[r2,#0x8c]
                  |L8.60|
;;;107      }  
;;;108    }
00003c  4770              BX       lr
;;;109    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0xa0000080

                          AREA ||i.FSMC_NANDECCCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NANDECCCmd PROC
;;;558    *******************************************************************************/
;;;559    void FSMC_NANDECCCmd(u32 FSMC_Bank, FunctionalState NewState)
000000  b199              CBZ      r1,|L9.42|
;;;560    {
;;;561      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;562      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;563      
;;;564      if (NewState != DISABLE)
;;;565      {
;;;566        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;567        if(FSMC_Bank == FSMC_Bank2_NAND)
000002  2810              CMP      r0,#0x10
000004  d108              BNE      |L9.24|
;;;568        {
;;;569          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000006  f04f4220          MOV      r2,#0xa0000000
00000a  6e12              LDR      r2,[r2,#0x60]
00000c  f0420240          ORR      r2,r2,#0x40
000010  f04f4320          MOV      r3,#0xa0000000
000014  661a              STR      r2,[r3,#0x60]
000016  e01b              B        |L9.80|
                  |L9.24|
;;;570        }
;;;571        else
;;;572        {
;;;573          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000018  4a0e              LDR      r2,|L9.84|
00001a  6812              LDR      r2,[r2,#0]
00001c  f0420240          ORR      r2,r2,#0x40
000020  f04f4320          MOV      r3,#0xa0000000
000024  f8c32080          STR      r2,[r3,#0x80]
000028  e012              B        |L9.80|
                  |L9.42|
;;;574        }
;;;575      }
;;;576      else
;;;577      {
;;;578        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;579        if(FSMC_Bank == FSMC_Bank2_NAND)
00002a  2810              CMP      r0,#0x10
00002c  d108              BNE      |L9.64|
;;;580        {
;;;581          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
00002e  f04f4220          MOV      r2,#0xa0000000
000032  6e12              LDR      r2,[r2,#0x60]
000034  4b08              LDR      r3,|L9.88|
000036  401a              ANDS     r2,r2,r3
000038  f04f4320          MOV      r3,#0xa0000000
00003c  661a              STR      r2,[r3,#0x60]
00003e  e007              B        |L9.80|
                  |L9.64|
;;;582        }
;;;583        else
;;;584        {
;;;585          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
000040  4a04              LDR      r2,|L9.84|
000042  6812              LDR      r2,[r2,#0]
000044  4b04              LDR      r3,|L9.88|
000046  401a              ANDS     r2,r2,r3
000048  f04f4320          MOV      r3,#0xa0000000
00004c  f8c32080          STR      r2,[r3,#0x80]
                  |L9.80|
;;;586        }
;;;587      }
;;;588    }
000050  4770              BX       lr
;;;589    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0xa0000080
                  |L9.88|
                          DCD      0x000fffbf

                          AREA ||i.FSMC_NANDInit||, CODE, READONLY, ALIGN=2

                  FSMC_NANDInit PROC
;;;229    *******************************************************************************/
;;;230    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;231    {
;;;232      u32 tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;233        
;;;234      /* Check the parameters */
;;;235      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;236      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;237      assert_param( IS_FSMC_DATA_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;238      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;239      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;240      assert_param( IS_FSMC_ADDRESS_LOW_MAPPING(FSMC_NANDInitStruct->FSMC_AddressLowMapping));
;;;241      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;242      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;243    
;;;244      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;245      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;246      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;247      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;248    
;;;249      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;250      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;251      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;252      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;253      
;;;254      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;255      tmppcr = (u32)FSMC_NANDInitStruct->FSMC_Waitfeature |
000008  6844              LDR      r4,[r0,#4]
00000a  f0440408          ORR      r4,r4,#8
00000e  6885              LDR      r5,[r0,#8]
000010  432c              ORRS     r4,r4,r5
000012  68c5              LDR      r5,[r0,#0xc]
000014  432c              ORRS     r4,r4,r5
000016  6905              LDR      r5,[r0,#0x10]
000018  432c              ORRS     r4,r4,r5
00001a  6945              LDR      r5,[r0,#0x14]
00001c  432c              ORRS     r4,r4,r5
00001e  6985              LDR      r5,[r0,#0x18]
000020  ea442445          ORR      r4,r4,r5,LSL #9
000024  69c5              LDR      r5,[r0,#0x1c]
000026  ea443145          ORR      r1,r4,r5,LSL #13
;;;256                PCR_MemoryType_NAND |
;;;257                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;258                FSMC_NANDInitStruct->FSMC_ECC |
;;;259                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;260                FSMC_NANDInitStruct->FSMC_AddressLowMapping |
;;;261                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;262                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;263                
;;;264      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;265      tmppmem = (u32)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
00002a  6a04              LDR      r4,[r0,#0x20]
00002c  6824              LDR      r4,[r4,#0]
00002e  6a05              LDR      r5,[r0,#0x20]
000030  686d              LDR      r5,[r5,#4]
000032  ea442405          ORR      r4,r4,r5,LSL #8
000036  6a05              LDR      r5,[r0,#0x20]
000038  892d              LDRH     r5,[r5,#8]
00003a  ea444405          ORR      r4,r4,r5,LSL #16
00003e  6a05              LDR      r5,[r0,#0x20]
000040  7b2d              LDRB     r5,[r5,#0xc]
000042  ea446205          ORR      r2,r4,r5,LSL #24
;;;266                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;267                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;268                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;269                
;;;270      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;271      tmppatt = (u32)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000046  6a44              LDR      r4,[r0,#0x24]
000048  6824              LDR      r4,[r4,#0]
00004a  6a45              LDR      r5,[r0,#0x24]
00004c  686d              LDR      r5,[r5,#4]
00004e  ea442405          ORR      r4,r4,r5,LSL #8
000052  6a45              LDR      r5,[r0,#0x24]
000054  892d              LDRH     r5,[r5,#8]
000056  ea444405          ORR      r4,r4,r5,LSL #16
00005a  6a45              LDR      r5,[r0,#0x24]
00005c  7b2d              LDRB     r5,[r5,#0xc]
00005e  ea446305          ORR      r3,r4,r5,LSL #24
;;;272                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;273                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;274                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;275      
;;;276      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
000062  6804              LDR      r4,[r0,#0]
000064  2c10              CMP      r4,#0x10
000066  d105              BNE      |L10.116|
;;;277      {
;;;278        /* FSMC_Bank2_NAND registers configuration */
;;;279        FSMC_Bank2->PCR2 = tmppcr;
000068  f04f4420          MOV      r4,#0xa0000000
00006c  6621              STR      r1,[r4,#0x60]
;;;280        FSMC_Bank2->PMEM2 = tmppmem;
00006e  66a2              STR      r2,[r4,#0x68]
;;;281        FSMC_Bank2->PATT2 = tmppatt;
000070  66e3              STR      r3,[r4,#0x6c]
000072  e008              B        |L10.134|
                  |L10.116|
;;;282      }
;;;283      else
;;;284      {
;;;285        /* FSMC_Bank3_NAND registers configuration */
;;;286        FSMC_Bank3->PCR3 = tmppcr;
000074  4c04              LDR      r4,|L10.136|
000076  6021              STR      r1,[r4,#0]
;;;287        FSMC_Bank3->PMEM3 = tmppmem;
000078  f04f4420          MOV      r4,#0xa0000000
00007c  f8c42088          STR      r2,[r4,#0x88]
;;;288        FSMC_Bank3->PATT3 = tmppatt;
000080  4c01              LDR      r4,|L10.136|
000082  340c              ADDS     r4,r4,#0xc
000084  6023              STR      r3,[r4,#0]
                  |L10.134|
;;;289      }
;;;290    }
000086  bd30              POP      {r4,r5,pc}
;;;291    
                          ENDP

                  |L10.136|
                          DCD      0xa0000080

                          AREA ||i.FSMC_NANDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NANDStructInit PROC
;;;398    *******************************************************************************/
;;;399    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
000000  2110              MOVS     r1,#0x10
;;;400    { 
;;;401      /* Reset NAND Init structure parameters values */
;;;402      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
000002  6001              STR      r1,[r0,#0]
;;;403      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000004  2100              MOVS     r1,#0
000006  6041              STR      r1,[r0,#4]
;;;404      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000008  6081              STR      r1,[r0,#8]
;;;405      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
00000a  60c1              STR      r1,[r0,#0xc]
;;;406      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
00000c  6101              STR      r1,[r0,#0x10]
;;;407      FSMC_NANDInitStruct->FSMC_AddressLowMapping = FSMC_AddressLowMapping_Direct;
00000e  6141              STR      r1,[r0,#0x14]
;;;408      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
000010  6181              STR      r1,[r0,#0x18]
;;;409      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
000012  61c1              STR      r1,[r0,#0x1c]
;;;410      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000014  21fc              MOVS     r1,#0xfc
000016  6a02              LDR      r2,[r0,#0x20]
000018  6011              STR      r1,[r2,#0]
;;;411      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00001a  6a02              LDR      r2,[r0,#0x20]
00001c  6051              STR      r1,[r2,#4]
;;;412      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00001e  6a02              LDR      r2,[r0,#0x20]
000020  6091              STR      r1,[r2,#8]
;;;413      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000022  6a02              LDR      r2,[r0,#0x20]
000024  60d1              STR      r1,[r2,#0xc]
;;;414      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000026  6a42              LDR      r2,[r0,#0x24]
000028  6011              STR      r1,[r2,#0]
;;;415      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
00002a  6a42              LDR      r2,[r0,#0x24]
00002c  6051              STR      r1,[r2,#4]
;;;416      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00002e  6a42              LDR      r2,[r0,#0x24]
000030  6091              STR      r1,[r2,#8]
;;;417      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
000032  6a42              LDR      r2,[r0,#0x24]
000034  60d1              STR      r1,[r2,#0xc]
;;;418    }
000036  4770              BX       lr
;;;419    
                          ENDP


                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMCmd PROC
;;;462    *******************************************************************************/
;;;463    void FSMC_NORSRAMCmd(u32 FSMC_Bank, FunctionalState NewState)
000000  b151              CBZ      r1,|L12.24|
;;;464    {
;;;465      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;466      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;467      
;;;468      if (NewState != DISABLE)
;;;469      {
;;;470        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;471        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000002  0082              LSLS     r2,r0,#2
000004  f1a242c0          SUB      r2,r2,#0x60000000
000008  6812              LDR      r2,[r2,#0]
00000a  f0420301          ORR      r3,r2,#1
00000e  0082              LSLS     r2,r0,#2
000010  f1a242c0          SUB      r2,r2,#0x60000000
000014  6013              STR      r3,[r2,#0]
000016  e009              B        |L12.44|
                  |L12.24|
;;;472      }
;;;473      else
;;;474      {
;;;475        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;476        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
000018  0082              LSLS     r2,r0,#2
00001a  f1a242c0          SUB      r2,r2,#0x60000000
00001e  6812              LDR      r2,[r2,#0]
000020  4b03              LDR      r3,|L12.48|
000022  401a              ANDS     r2,r2,r3
000024  0083              LSLS     r3,r0,#2
000026  f1a343c0          SUB      r3,r3,#0x60000000
00002a  601a              STR      r2,[r3,#0]
                  |L12.44|
;;;477      }
;;;478    }
00002c  4770              BX       lr
;;;479    
                          ENDP

00002e  0000              DCW      0x0000
                  |L12.48|
                          DCD      0x000ffffe

                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMDeInit PROC
;;;54     *******************************************************************************/
;;;55     void FSMC_NORSRAMDeInit(u32 FSMC_Bank)
000000  b930              CBNZ     r0,|L13.16|
;;;56     {
;;;57       /* Check the parameter */
;;;58       assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;59       
;;;60       /* FSMC_Bank1_NORSRAM1 */
;;;61       if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;62       {
;;;63         FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000002  f24302db          MOV      r2,#0x30db
000006  0081              LSLS     r1,r0,#2
000008  f1a141c0          SUB      r1,r1,#0x60000000
00000c  600a              STR      r2,[r1,#0]
00000e  e005              B        |L13.28|
                  |L13.16|
;;;64       }
;;;65       /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;66       else
;;;67       {   
;;;68         FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000010  f24302d2          MOV      r2,#0x30d2
000014  0081              LSLS     r1,r0,#2
000016  f1a141c0          SUB      r1,r1,#0x60000000
00001a  600a              STR      r2,[r1,#0]
                  |L13.28|
;;;69       }
;;;70     
;;;71       FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  1c41              ADDS     r1,r0,#1
000022  0089              LSLS     r1,r1,#2
000024  f1a141c0          SUB      r1,r1,#0x60000000
000028  600a              STR      r2,[r1,#0]
;;;72       FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002a  0081              LSLS     r1,r0,#2
00002c  f1a141c0          SUB      r1,r1,#0x60000000
000030  f8c12104          STR      r2,[r1,#0x104]
;;;73     }
000034  4770              BX       lr
;;;74     
                          ENDP


                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMInit PROC
;;;137    *******************************************************************************/
;;;138    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  e9d01201          LDRD     r1,r2,[r0,#4]
;;;139    { 
;;;140      /* Check the parameters */
;;;141      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;142      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;143      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;144      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;145      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;146      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;147      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;148      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;149      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;150      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;151      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;152      assert_param(IS_FSMC_ASYNC_WAIT(FSMC_NORSRAMInitStruct->FSMC_AsyncWait));
;;;153      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;154      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;155      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;156      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;157      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;158      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;159      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;160      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;161      
;;;162      /* Bank1 NOR/SRAM control register configuration */ 
;;;163      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000004  4311              ORRS     r1,r1,r2
000006  68c2              LDR      r2,[r0,#0xc]
000008  4311              ORRS     r1,r1,r2
00000a  6902              LDR      r2,[r0,#0x10]
00000c  4311              ORRS     r1,r1,r2
00000e  6942              LDR      r2,[r0,#0x14]
000010  4311              ORRS     r1,r1,r2
000012  6982              LDR      r2,[r0,#0x18]
000014  4311              ORRS     r1,r1,r2
000016  69c2              LDR      r2,[r0,#0x1c]
000018  4311              ORRS     r1,r1,r2
00001a  6a02              LDR      r2,[r0,#0x20]
00001c  4311              ORRS     r1,r1,r2
00001e  6a42              LDR      r2,[r0,#0x24]
000020  4311              ORRS     r1,r1,r2
000022  6a82              LDR      r2,[r0,#0x28]
000024  4311              ORRS     r1,r1,r2
000026  6ac2              LDR      r2,[r0,#0x2c]
000028  4311              ORRS     r1,r1,r2
00002a  6b02              LDR      r2,[r0,#0x30]
00002c  4311              ORRS     r1,r1,r2
00002e  6802              LDR      r2,[r0,#0]
000030  0092              LSLS     r2,r2,#2
000032  f1a242c0          SUB      r2,r2,#0x60000000
000036  6011              STR      r1,[r2,#0]
;;;164                (u32)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;165                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;166                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;167                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;168                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;169                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;170                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;171                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;172                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;173                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;174                FSMC_NORSRAMInitStruct->FSMC_AsyncWait |
;;;175                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;176    
;;;177      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
000038  6881              LDR      r1,[r0,#8]
00003a  2908              CMP      r1,#8
00003c  d10b              BNE      |L14.86|
;;;178      {
;;;179        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (u32)BCR_FACCEN_Set;
00003e  6801              LDR      r1,[r0,#0]
000040  0089              LSLS     r1,r1,#2
000042  f1a141c0          SUB      r1,r1,#0x60000000
000046  6809              LDR      r1,[r1,#0]
000048  f0410240          ORR      r2,r1,#0x40
00004c  6801              LDR      r1,[r0,#0]
00004e  0089              LSLS     r1,r1,#2
000050  f1a141c0          SUB      r1,r1,#0x60000000
000054  600a              STR      r2,[r1,#0]
                  |L14.86|
;;;180      }
;;;181    
;;;182      /* Bank1 NOR/SRAM timing register configuration */
;;;183      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
000056  6b41              LDR      r1,[r0,#0x34]
000058  6809              LDR      r1,[r1,#0]
00005a  6b42              LDR      r2,[r0,#0x34]
00005c  6852              LDR      r2,[r2,#4]
00005e  ea411102          ORR      r1,r1,r2,LSL #4
000062  6b42              LDR      r2,[r0,#0x34]
000064  6892              LDR      r2,[r2,#8]
000066  ea412102          ORR      r1,r1,r2,LSL #8
00006a  6b42              LDR      r2,[r0,#0x34]
00006c  8992              LDRH     r2,[r2,#0xc]
00006e  ea414102          ORR      r1,r1,r2,LSL #16
000072  6b42              LDR      r2,[r0,#0x34]
000074  8a12              LDRH     r2,[r2,#0x10]
000076  ea415102          ORR      r1,r1,r2,LSL #20
00007a  6b42              LDR      r2,[r0,#0x34]
00007c  7d12              LDRB     r2,[r2,#0x14]
00007e  ea416102          ORR      r1,r1,r2,LSL #24
000082  6b42              LDR      r2,[r0,#0x34]
000084  6992              LDR      r2,[r2,#0x18]
000086  4311              ORRS     r1,r1,r2
000088  6802              LDR      r2,[r0,#0]
00008a  1c52              ADDS     r2,r2,#1
00008c  0092              LSLS     r2,r2,#2
00008e  f1a242c0          SUB      r2,r2,#0x60000000
000092  6011              STR      r1,[r2,#0]
;;;184                (u32)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;185                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;186                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;187                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;188                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;189                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;190                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;191                
;;;192    
;;;193        
;;;194      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;195      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
000094  6a81              LDR      r1,[r0,#0x28]
000096  f5b14f80          CMP      r1,#0x4000
00009a  d11f              BNE      |L14.220|
;;;196      {
;;;197        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;198        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;199        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;200        assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;201        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;202        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;203        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;204    
;;;205        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
00009c  6b81              LDR      r1,[r0,#0x38]
00009e  6809              LDR      r1,[r1,#0]
0000a0  6b82              LDR      r2,[r0,#0x38]
0000a2  6852              LDR      r2,[r2,#4]
0000a4  ea411102          ORR      r1,r1,r2,LSL #4
0000a8  6b82              LDR      r2,[r0,#0x38]
0000aa  6892              LDR      r2,[r2,#8]
0000ac  ea412102          ORR      r1,r1,r2,LSL #8
0000b0  6b82              LDR      r2,[r0,#0x38]
0000b2  8992              LDRH     r2,[r2,#0xc]
0000b4  ea414102          ORR      r1,r1,r2,LSL #16
0000b8  6b82              LDR      r2,[r0,#0x38]
0000ba  8a12              LDRH     r2,[r2,#0x10]
0000bc  ea415102          ORR      r1,r1,r2,LSL #20
0000c0  6b82              LDR      r2,[r0,#0x38]
0000c2  7d12              LDRB     r2,[r2,#0x14]
0000c4  ea416102          ORR      r1,r1,r2,LSL #24
0000c8  6b82              LDR      r2,[r0,#0x38]
0000ca  6992              LDR      r2,[r2,#0x18]
0000cc  4311              ORRS     r1,r1,r2
0000ce  6802              LDR      r2,[r0,#0]
0000d0  0092              LSLS     r2,r2,#2
0000d2  f1a242c0          SUB      r2,r2,#0x60000000
0000d6  f8c21104          STR      r1,[r2,#0x104]
0000da  e007              B        |L14.236|
                  |L14.220|
;;;206                  (u32)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;207                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;208                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;209                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;210                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;211                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;212                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;213      }
;;;214      else
;;;215      {
;;;216        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
0000dc  f06f4270          MVN      r2,#0xf0000000
0000e0  6801              LDR      r1,[r0,#0]
0000e2  0089              LSLS     r1,r1,#2
0000e4  f1a141c0          SUB      r1,r1,#0x60000000
0000e8  f8c12104          STR      r2,[r1,#0x104]
                  |L14.236|
;;;217      }
;;;218    }
0000ec  4770              BX       lr
;;;219    
                          ENDP


                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;358    *******************************************************************************/
;;;359    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  2100              MOVS     r1,#0
;;;360    {  
;;;361      /* Reset NOR/SRAM Init structure parameters values */
;;;362      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  6001              STR      r1,[r0,#0]
;;;363      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2102              MOVS     r1,#2
000006  6041              STR      r1,[r0,#4]
;;;364      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
000008  2100              MOVS     r1,#0
00000a  6081              STR      r1,[r0,#8]
;;;365      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000c  60c1              STR      r1,[r0,#0xc]
;;;366      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;367      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000010  6141              STR      r1,[r0,#0x14]
;;;368      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000012  6181              STR      r1,[r0,#0x18]
;;;369      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000014  61c1              STR      r1,[r0,#0x1c]
;;;370      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000016  f44f5180          MOV      r1,#0x1000
00001a  6201              STR      r1,[r0,#0x20]
;;;371      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001c  0049              LSLS     r1,r1,#1
00001e  6241              STR      r1,[r0,#0x24]
;;;372      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000020  2100              MOVS     r1,#0
000022  6281              STR      r1,[r0,#0x28]
;;;373      FSMC_NORSRAMInitStruct->FSMC_AsyncWait = FSMC_AsyncWait_Disable;
000024  62c1              STR      r1,[r0,#0x2c]
;;;374      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
000026  6301              STR      r1,[r0,#0x30]
;;;375      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000028  210f              MOVS     r1,#0xf
00002a  6b42              LDR      r2,[r0,#0x34]
00002c  6011              STR      r1,[r2,#0]
;;;376      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
00002e  6b42              LDR      r2,[r0,#0x34]
000030  6051              STR      r1,[r2,#4]
;;;377      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000032  21ff              MOVS     r1,#0xff
000034  6b42              LDR      r2,[r0,#0x34]
000036  6091              STR      r1,[r2,#8]
;;;378      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000038  210f              MOVS     r1,#0xf
00003a  6b42              LDR      r2,[r0,#0x34]
00003c  60d1              STR      r1,[r2,#0xc]
;;;379      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
00003e  6b42              LDR      r2,[r0,#0x34]
000040  6111              STR      r1,[r2,#0x10]
;;;380      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
000042  6b42              LDR      r2,[r0,#0x34]
000044  6151              STR      r1,[r2,#0x14]
;;;381      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
000046  2100              MOVS     r1,#0
000048  6b42              LDR      r2,[r0,#0x34]
00004a  6191              STR      r1,[r2,#0x18]
;;;382      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
00004c  210f              MOVS     r1,#0xf
00004e  6b82              LDR      r2,[r0,#0x38]
000050  6011              STR      r1,[r2,#0]
;;;383      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000052  6b82              LDR      r2,[r0,#0x38]
000054  6051              STR      r1,[r2,#4]
;;;384      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
000056  21ff              MOVS     r1,#0xff
000058  6b82              LDR      r2,[r0,#0x38]
00005a  6091              STR      r1,[r2,#8]
;;;385      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00005c  210f              MOVS     r1,#0xf
00005e  6b82              LDR      r2,[r0,#0x38]
000060  60d1              STR      r1,[r2,#0xc]
;;;386      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000062  6b82              LDR      r2,[r0,#0x38]
000064  6111              STR      r1,[r2,#0x10]
;;;387      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000066  6b82              LDR      r2,[r0,#0x38]
000068  6151              STR      r1,[r2,#0x14]
;;;388      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00006a  2100              MOVS     r1,#0
00006c  6b82              LDR      r2,[r0,#0x38]
00006e  6191              STR      r1,[r2,#0x18]
;;;389    }
000070  4770              BX       lr
;;;390    
                          ENDP


                          AREA ||i.FSMC_PCCARDCmd||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDCmd PROC
;;;530    *******************************************************************************/
;;;531    void FSMC_PCCARDCmd(FunctionalState NewState)
000000  b140              CBZ      r0,|L16.20|
;;;532    {
;;;533      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;534      
;;;535      if (NewState != DISABLE)
;;;536      {
;;;537        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;538        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
000002  4909              LDR      r1,|L16.40|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  f04f4220          MOV      r2,#0xa0000000
00000e  f8c210a0          STR      r1,[r2,#0xa0]
000012  e007              B        |L16.36|
                  |L16.20|
;;;539      }
;;;540      else
;;;541      {
;;;542        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;543        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
000014  4904              LDR      r1,|L16.40|
000016  6809              LDR      r1,[r1,#0]
000018  4a04              LDR      r2,|L16.44|
00001a  4011              ANDS     r1,r1,r2
00001c  f04f4220          MOV      r2,#0xa0000000
000020  f8c210a0          STR      r1,[r2,#0xa0]
                  |L16.36|
;;;544      }
;;;545    }
000024  4770              BX       lr
;;;546    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
                          DCD      0xa00000a0
                  |L16.44|
                          DCD      0x000ffffb

                          AREA ||i.FSMC_PCCARDDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDDeInit PROC
;;;117    *******************************************************************************/
;;;118    void FSMC_PCCARDDeInit(void)
000000  2018              MOVS     r0,#0x18
;;;119    {
;;;120      /* Set the FSMC_Bank4 registers to their reset values */
;;;121      FSMC_Bank4->PCR4 = 0x00000018; 
000002  4908              LDR      r1,|L17.36|
000004  6008              STR      r0,[r1,#0]
;;;122      FSMC_Bank4->SR4 = 0x00000000;	
000006  2000              MOVS     r0,#0
000008  0609              LSLS     r1,r1,#24
00000a  f8c100a4          STR      r0,[r1,#0xa4]
;;;123      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
00000e  f04f30fc          MOV      r0,#0xfcfcfcfc
000012  4904              LDR      r1,|L17.36|
000014  3108              ADDS     r1,r1,#8
000016  6008              STR      r0,[r1,#0]
;;;124      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000018  1d09              ADDS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;125      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;126    }
000020  4770              BX       lr
;;;127    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDInit||, CODE, READONLY, ALIGN=2

                  FSMC_PCCARDInit PROC
;;;301    *******************************************************************************/
;;;302    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  e9d01200          LDRD     r1,r2,[r0,#0]
;;;303    {
;;;304      /* Check the parameters */
;;;305      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;306      assert_param(IS_FSMC_ADDRESS_LOW_MAPPING(FSMC_PCCARDInitStruct->FSMC_AddressLowMapping));
;;;307      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;308      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;309    
;;;310     
;;;311      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;312      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;313      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;314      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;315      
;;;316      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;317      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;318      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;319      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;320    
;;;321      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;322      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;323      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;324      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;325      
;;;326      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;327      FSMC_Bank4->PCR4 = (u32)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000004  4311              ORRS     r1,r1,r2
000006  6882              LDR      r2,[r0,#8]
000008  ea412142          ORR      r1,r1,r2,LSL #9
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  ea413142          ORR      r1,r1,r2,LSL #13
000012  4a1b              LDR      r2,|L18.128|
000014  6011              STR      r1,[r2,#0]
;;;328                         FSMC_PCCARDInitStruct->FSMC_AddressLowMapping |
;;;329                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;330                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;331                
;;;332      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;333      FSMC_Bank4->PMEM4 = (u32)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000016  6901              LDR      r1,[r0,#0x10]
000018  6809              LDR      r1,[r1,#0]
00001a  6902              LDR      r2,[r0,#0x10]
00001c  6852              LDR      r2,[r2,#4]
00001e  ea412102          ORR      r1,r1,r2,LSL #8
000022  6902              LDR      r2,[r0,#0x10]
000024  8912              LDRH     r2,[r2,#8]
000026  ea414102          ORR      r1,r1,r2,LSL #16
00002a  6902              LDR      r2,[r0,#0x10]
00002c  7b12              LDRB     r2,[r2,#0xc]
00002e  ea416102          ORR      r1,r1,r2,LSL #24
000032  4a13              LDR      r2,|L18.128|
000034  3208              ADDS     r2,r2,#8
000036  6011              STR      r1,[r2,#0]
;;;334                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;335                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;336                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;337                
;;;338      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;339      FSMC_Bank4->PATT4 = (u32)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000038  6941              LDR      r1,[r0,#0x14]
00003a  6809              LDR      r1,[r1,#0]
00003c  6942              LDR      r2,[r0,#0x14]
00003e  6852              LDR      r2,[r2,#4]
000040  ea412102          ORR      r1,r1,r2,LSL #8
000044  6942              LDR      r2,[r0,#0x14]
000046  8912              LDRH     r2,[r2,#8]
000048  ea414102          ORR      r1,r1,r2,LSL #16
00004c  6942              LDR      r2,[r0,#0x14]
00004e  7b12              LDRB     r2,[r2,#0xc]
000050  ea416102          ORR      r1,r1,r2,LSL #24
000054  4a0a              LDR      r2,|L18.128|
000056  320c              ADDS     r2,r2,#0xc
000058  6011              STR      r1,[r2,#0]
;;;340                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;341                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;342                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;343                
;;;344      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;345      FSMC_Bank4->PIO4 = (u32)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
00005a  6981              LDR      r1,[r0,#0x18]
00005c  6809              LDR      r1,[r1,#0]
00005e  6982              LDR      r2,[r0,#0x18]
000060  6852              LDR      r2,[r2,#4]
000062  ea412102          ORR      r1,r1,r2,LSL #8
000066  6982              LDR      r2,[r0,#0x18]
000068  8912              LDRH     r2,[r2,#8]
00006a  ea414102          ORR      r1,r1,r2,LSL #16
00006e  6982              LDR      r2,[r0,#0x18]
000070  7b12              LDRB     r2,[r2,#0xc]
000072  ea416102          ORR      r1,r1,r2,LSL #24
000076  f04f4220          MOV      r2,#0xa0000000
00007a  f8c210b0          STR      r1,[r2,#0xb0]
;;;346                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;347                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;348                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;349    }
00007e  4770              BX       lr
;;;350    
                          ENDP

                  |L18.128|
                          DCD      0xa00000a0

                          AREA ||i.FSMC_PCCARDStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_PCCARDStructInit PROC
;;;427    *******************************************************************************/
;;;428    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000000  2100              MOVS     r1,#0
;;;429    {
;;;430      /* Reset PCCARD Init structure parameters values */
;;;431      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000002  6001              STR      r1,[r0,#0]
;;;432      FSMC_PCCARDInitStruct->FSMC_AddressLowMapping = FSMC_AddressLowMapping_Direct;
000004  6041              STR      r1,[r0,#4]
;;;433      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000006  6081              STR      r1,[r0,#8]
;;;434      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
000008  60c1              STR      r1,[r0,#0xc]
;;;435      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00000a  21fc              MOVS     r1,#0xfc
00000c  6902              LDR      r2,[r0,#0x10]
00000e  6011              STR      r1,[r2,#0]
;;;436      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000010  6902              LDR      r2,[r0,#0x10]
000012  6051              STR      r1,[r2,#4]
;;;437      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000014  6902              LDR      r2,[r0,#0x10]
000016  6091              STR      r1,[r2,#8]
;;;438      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000018  6902              LDR      r2,[r0,#0x10]
00001a  60d1              STR      r1,[r2,#0xc]
;;;439      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00001c  6942              LDR      r2,[r0,#0x14]
00001e  6011              STR      r1,[r2,#0]
;;;440      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000020  6942              LDR      r2,[r0,#0x14]
000022  6051              STR      r1,[r2,#4]
;;;441      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000024  6942              LDR      r2,[r0,#0x14]
000026  6091              STR      r1,[r2,#8]
;;;442      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
000028  6942              LDR      r2,[r0,#0x14]
00002a  60d1              STR      r1,[r2,#0xc]
;;;443      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00002c  6982              LDR      r2,[r0,#0x18]
00002e  6011              STR      r1,[r2,#0]
;;;444      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000030  6982              LDR      r2,[r0,#0x18]
000032  6051              STR      r1,[r2,#4]
;;;445      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000034  6982              LDR      r2,[r0,#0x18]
000036  6091              STR      r1,[r2,#8]
;;;446      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
000038  6982              LDR      r2,[r0,#0x18]
00003a  60d1              STR      r1,[r2,#0xc]
;;;447    }
00003c  4770              BX       lr
;;;448    
                          ENDP

