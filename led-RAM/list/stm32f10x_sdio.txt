; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_sdio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_sdio.crf lib\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||i.SDIO_CEATAITCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CEATAITCmd PROC
;;;621    *******************************************************************************/
;;;622    void SDIO_CEATAITCmd(FunctionalState NewState)
000000  2101              MOVS     r1,#1
;;;623    { 
;;;624      /* Check the parameters */
;;;625      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;626      
;;;627      *(vu32 *) CMD_NIEN_BB = (u32)((~((u32)NewState)) & ((u32)0x1));
000002  4381              BICS     r1,r1,r0
000004  4a01              LDR      r2,|L1.12|
000006  6011              STR      r1,[r2,#0]
;;;628    }
000008  4770              BX       lr
;;;629    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x423001b4

                          AREA ||i.SDIO_ClearFlag||, CODE, READONLY, ALIGN=2

                  SDIO_ClearFlag PROC
;;;731    *******************************************************************************/
;;;732    void SDIO_ClearFlag(u32 SDIO_FLAG)
000000  4901              LDR      r1,|L2.8|
;;;733    { 
;;;734      /* Check the parameters */
;;;735      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;736       
;;;737      SDIO->ICR = SDIO_FLAG;
000002  6388              STR      r0,[r1,#0x38]
;;;738    }
000004  4770              BX       lr
;;;739    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  SDIO_ClearITPendingBit PROC
;;;825    *******************************************************************************/
;;;826    void SDIO_ClearITPendingBit(u32 SDIO_IT)
000000  4901              LDR      r1,|L3.8|
;;;827    { 
;;;828      /* Check the parameters */
;;;829      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;830       
;;;831      SDIO->ICR = SDIO_IT;
000002  6388              STR      r0,[r1,#0x38]
;;;832    }
000004  4770              BX       lr
;;;833    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_ClockCmd||, CODE, READONLY, ALIGN=2

                  SDIO_ClockCmd PROC
;;;188    *******************************************************************************/
;;;189    void SDIO_ClockCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;190    {
;;;191      /* Check the parameters */
;;;192      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;193      
;;;194      *(vu32 *) CLKCR_CLKEN_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;195    }
000004  4770              BX       lr
;;;196    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x423000a0

                          AREA ||i.SDIO_CmdStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_CmdStructInit PROC
;;;358    *******************************************************************************/
;;;359    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;360    {
;;;361      /* SDIO_CmdInitStruct members default value */
;;;362      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;363      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;364      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
000006  6081              STR      r1,[r0,#8]
;;;365      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
000008  60c1              STR      r1,[r0,#0xc]
;;;366      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
00000a  6101              STR      r1,[r0,#0x10]
;;;367    }
00000c  4770              BX       lr
;;;368    
                          ENDP


                          AREA ||i.SDIO_CommandCompletionCmd||, CODE, READONLY, ALIGN=2

                  SDIO_CommandCompletionCmd PROC
;;;605    *******************************************************************************/
;;;606    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;607    { 
;;;608      /* Check the parameters */
;;;609      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;610      
;;;611      *(vu32 *) CMD_ENCMDCOMPL_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;612    }
000004  4770              BX       lr
;;;613    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x423001b0

                          AREA ||i.SDIO_DMACmd||, CODE, READONLY, ALIGN=2

                  SDIO_DMACmd PROC
;;;301    *******************************************************************************/
;;;302    void SDIO_DMACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;303    {
;;;304      /* Check the parameters */
;;;305      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;306      
;;;307      *(vu32 *) DCTRL_DMAEN_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;308    }
000004  4770              BX       lr
;;;309    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x4230058c

                          AREA ||i.SDIO_DataConfig||, CODE, READONLY, ALIGN=2

                  SDIO_DataConfig PROC
;;;411    *******************************************************************************/
;;;412    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  2100              MOVS     r1,#0
;;;413    {
;;;414      u32 tmpreg = 0;
;;;415      
;;;416      /* Check the parameters */
;;;417      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;418      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;419      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;420      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;421      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;422    
;;;423    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;424      /* Set the SDIO Data TimeOut value */
;;;425      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
000002  4b0a              LDR      r3,|L8.44|
000004  6802              LDR      r2,[r0,#0]
000006  625a              STR      r2,[r3,#0x24]
;;;426        
;;;427    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;428      /* Set the SDIO DataLength value */
;;;429      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
000008  6842              LDR      r2,[r0,#4]
00000a  629a              STR      r2,[r3,#0x28]
;;;430      
;;;431    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;432      /* Get the SDIO DCTRL value */
;;;433      tmpreg = SDIO->DCTRL;
00000c  461a              MOV      r2,r3
00000e  6ad1              LDR      r1,[r2,#0x2c]
;;;434    
;;;435      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;436      tmpreg &= DCTRL_CLEAR_MASK;
000010  f02101f7          BIC      r1,r1,#0xf7
;;;437      /* Set DEN bit according to SDIO_DPSM value */
;;;438      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;439      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;440      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;441      tmpreg |= (u32)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
000014  e9d02302          LDRD     r2,r3,[r0,#8]
000018  431a              ORRS     r2,r2,r3
00001a  6903              LDR      r3,[r0,#0x10]
00001c  431a              ORRS     r2,r2,r3
00001e  6943              LDR      r3,[r0,#0x14]
000020  431a              ORRS     r2,r2,r3
000022  4311              ORRS     r1,r1,r2
;;;442               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;443      
;;;444      /* Write to SDIO DCTRL */
;;;445      SDIO->DCTRL = tmpreg;
000024  4a01              LDR      r2,|L8.44|
000026  62d1              STR      r1,[r2,#0x2c]
;;;446    }
000028  4770              BX       lr
;;;447    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x40018000

                          AREA ||i.SDIO_DataStructInit||, CODE, READONLY, ALIGN=1

                  SDIO_DataStructInit PROC
;;;455    *******************************************************************************/
;;;456    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000000  f04f31ff          MOV      r1,#0xffffffff
;;;457    {
;;;458      /* SDIO_DataInitStruct members default value */
;;;459      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
000004  6001              STR      r1,[r0,#0]
;;;460      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000006  2100              MOVS     r1,#0
000008  6041              STR      r1,[r0,#4]
;;;461      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
00000a  6081              STR      r1,[r0,#8]
;;;462      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00000c  60c1              STR      r1,[r0,#0xc]
;;;463      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00000e  6101              STR      r1,[r0,#0x10]
;;;464      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000010  6141              STR      r1,[r0,#0x14]
;;;465    }
000012  4770              BX       lr
;;;466    
                          ENDP


                          AREA ||i.SDIO_DeInit||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;106    *******************************************************************************/
;;;107    void SDIO_DeInit(void)
000000  2000              MOVS     r0,#0
;;;108    {
;;;109      SDIO->POWER = 0x00000000;
000002  4906              LDR      r1,|L10.28|
000004  6008              STR      r0,[r1,#0]
;;;110      SDIO->CLKCR = 0x00000000;
000006  6048              STR      r0,[r1,#4]
;;;111      SDIO->ARG = 0x00000000;
000008  6088              STR      r0,[r1,#8]
;;;112      SDIO->CMD = 0x00000000;
00000a  60c8              STR      r0,[r1,#0xc]
;;;113      SDIO->DTIMER = 0x00000000;
00000c  6248              STR      r0,[r1,#0x24]
;;;114      SDIO->DLEN = 0x00000000;
00000e  6288              STR      r0,[r1,#0x28]
;;;115      SDIO->DCTRL = 0x00000000;
000010  62c8              STR      r0,[r1,#0x2c]
;;;116      SDIO->ICR = 0x00C007FF;
000012  4803              LDR      r0,|L10.32|
000014  6388              STR      r0,[r1,#0x38]
;;;117      SDIO->MASK = 0x00000000;
000016  2000              MOVS     r0,#0
000018  63c8              STR      r0,[r1,#0x3c]
;;;118    }
00001a  4770              BX       lr
;;;119    
                          ENDP

                  |L10.28|
                          DCD      0x40018000
                  |L10.32|
                          DCD      0x00c007ff

                          AREA ||i.SDIO_GetCommandResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetCommandResponse PROC
;;;376    *******************************************************************************/
;;;377    u8 SDIO_GetCommandResponse(void)
000000  4801              LDR      r0,|L11.8|
;;;378    {
;;;379      return (u8)(SDIO->RESPCMD);
000002  6900              LDR      r0,[r0,#0x10]
000004  b2c0              UXTB     r0,r0
;;;380    }
000006  4770              BX       lr
;;;381    
                          ENDP

                  |L11.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetDataCounter||, CODE, READONLY, ALIGN=2

                  SDIO_GetDataCounter PROC
;;;473    *******************************************************************************/
;;;474    u32 SDIO_GetDataCounter(void)
000000  4801              LDR      r0,|L12.8|
;;;475    { 
;;;476      return SDIO->DCOUNT;
000002  6b00              LDR      r0,[r0,#0x30]
;;;477    }
000004  4770              BX       lr
;;;478    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFIFOCount||, CODE, READONLY, ALIGN=2

                  SDIO_GetFIFOCount PROC
;;;510    *******************************************************************************/
;;;511    u32 SDIO_GetFIFOCount(void)
000000  4801              LDR      r0,|L13.8|
;;;512    { 
;;;513      return SDIO->FIFOCNT;
000002  6c80              LDR      r0,[r0,#0x48]
;;;514    }
000004  4770              BX       lr
;;;515    
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetFlagStatus PROC
;;;684    *******************************************************************************/
;;;685    FlagStatus SDIO_GetFlagStatus(u32 SDIO_FLAG)
000000  4601              MOV      r1,r0
;;;686    { 
;;;687      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;688      
;;;689      /* Check the parameters */
;;;690      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;691      
;;;692      if ((SDIO->STA & SDIO_FLAG) != (u32)RESET)
000004  4a03              LDR      r2,|L14.20|
000006  6b52              LDR      r2,[r2,#0x34]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L14.16|
;;;693      {
;;;694        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L14.18|
                  |L14.16|
;;;695      }
;;;696      else
;;;697      {
;;;698        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L14.18|
;;;699      }
;;;700      return bitstatus;
;;;701    }
000012  4770              BX       lr
;;;702    
                          ENDP

                  |L14.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetITStatus||, CODE, READONLY, ALIGN=2

                  SDIO_GetITStatus PROC
;;;779    *******************************************************************************/
;;;780    ITStatus SDIO_GetITStatus(u32 SDIO_IT)
000000  4601              MOV      r1,r0
;;;781    { 
;;;782      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;783      
;;;784      /* Check the parameters */
;;;785      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;786    
;;;787      if ((SDIO->STA & SDIO_IT) != (u32)RESET)  
000004  4a03              LDR      r2,|L15.20|
000006  6b52              LDR      r2,[r2,#0x34]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L15.16|
;;;788      {
;;;789        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L15.18|
                  |L15.16|
;;;790      }
;;;791      else
;;;792      {
;;;793        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;794      }
;;;795      return bitstatus;
;;;796    }
000012  4770              BX       lr
;;;797    
                          ENDP

                  |L15.20|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_GetPowerState PROC
;;;226    *******************************************************************************/
;;;227    u32 SDIO_GetPowerState(void)
000000  4802              LDR      r0,|L16.12|
;;;228    {
;;;229      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000002  6800              LDR      r0,[r0,#0]
000004  f0000003          AND      r0,r0,#3
;;;230    }
000008  4770              BX       lr
;;;231    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40018000

                          AREA ||i.SDIO_GetResponse||, CODE, READONLY, ALIGN=2

                  SDIO_GetResponse PROC
;;;393    *******************************************************************************/
;;;394    u32 SDIO_GetResponse(u32 SDIO_RESP)
000000  4601              MOV      r1,r0
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;398      
;;;399      return (*(vu32 *)(SDIO_RESP_ADDR + SDIO_RESP)); 
000002  4802              LDR      r0,|L17.12|
000004  4408              ADD      r0,r0,r1
000006  6940              LDR      r0,[r0,#0x14]
;;;400    }
000008  4770              BX       lr
;;;401    
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      0x40018000

                          AREA ||i.SDIO_ITConfig||, CODE, READONLY, ALIGN=2

                  SDIO_ITConfig PROC
;;;275    *******************************************************************************/
;;;276    void SDIO_ITConfig(u32 SDIO_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L18.14|
;;;277    {
;;;278      /* Check the parameters */
;;;279      assert_param(IS_SDIO_IT(SDIO_IT));
;;;280      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;281      
;;;282      if (NewState != DISABLE)
;;;283      {
;;;284        /* Enable the SDIO interrupts */
;;;285        SDIO->MASK |= SDIO_IT;
000002  4a06              LDR      r2,|L18.28|
000004  6bd2              LDR      r2,[r2,#0x3c]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L18.28|
00000a  63da              STR      r2,[r3,#0x3c]
00000c  e004              B        |L18.24|
                  |L18.14|
;;;286      }
;;;287      else
;;;288      {
;;;289        /* Disable the SDIO interrupts */
;;;290        SDIO->MASK &= ~SDIO_IT;
00000e  4a03              LDR      r2,|L18.28|
000010  6bd2              LDR      r2,[r2,#0x3c]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L18.28|
000016  63da              STR      r2,[r3,#0x3c]
                  |L18.24|
;;;291      } 
;;;292    }
000018  4770              BX       lr
;;;293    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
                          DCD      0x40018000

                          AREA ||i.SDIO_Init||, CODE, READONLY, ALIGN=2

                  SDIO_Init PROC
;;;129    *******************************************************************************/
;;;130    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;131    {
;;;132      u32 tmpreg = 0;
;;;133        
;;;134      /* Check the parameters */
;;;135      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;136      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;137      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;138      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;139      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;140       
;;;141    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;142      /* Get the SDIO CLKCR value */
;;;143      tmpreg = SDIO->CLKCR;
000002  4a0a              LDR      r2,|L19.44|
000004  6851              LDR      r1,[r2,#4]
;;;144      
;;;145      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;146      tmpreg &= CLKCR_CLEAR_MASK;
000006  f64762ff          MOV      r2,#0x7eff
00000a  4391              BICS     r1,r1,r2
;;;147      
;;;148      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;149      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;150      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;151      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;152      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;153      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;154      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
00000c  7802              LDRB     r2,[r0,#0]
00000e  68c3              LDR      r3,[r0,#0xc]
000010  431a              ORRS     r2,r2,r3
000012  6883              LDR      r3,[r0,#8]
000014  431a              ORRS     r2,r2,r3
000016  6903              LDR      r3,[r0,#0x10]
000018  431a              ORRS     r2,r2,r3
00001a  6843              LDR      r3,[r0,#4]
00001c  431a              ORRS     r2,r2,r3
00001e  6943              LDR      r3,[r0,#0x14]
000020  431a              ORRS     r2,r2,r3
000022  4311              ORRS     r1,r1,r2
;;;155                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;156                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;157      
;;;158      /* Write to SDIO CLKCR */
;;;159      SDIO->CLKCR = tmpreg;             
000024  4a01              LDR      r2,|L19.44|
000026  6051              STR      r1,[r2,#4]
;;;160    }
000028  4770              BX       lr
;;;161    
                          ENDP

00002a  0000              DCW      0x0000
                  |L19.44|
                          DCD      0x40018000

                          AREA ||i.SDIO_ReadData||, CODE, READONLY, ALIGN=2

                  SDIO_ReadData PROC
;;;485    *******************************************************************************/
;;;486    u32 SDIO_ReadData(void)
000000  4801              LDR      r0,|L20.8|
;;;487    { 
;;;488      return SDIO->FIFO;
000002  6800              LDR      r0,[r0,#0]
;;;489    }
000004  4770              BX       lr
;;;490    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x40018080

                          AREA ||i.SDIO_SendCEATACmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendCEATACmd PROC
;;;637    *******************************************************************************/
;;;638    void SDIO_SendCEATACmd(FunctionalState NewState)
000000  4901              LDR      r1,|L21.8|
;;;639    { 
;;;640      /* Check the parameters */
;;;641      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;642      
;;;643      *(vu32 *) CMD_ATACMD_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;644    }
000004  4770              BX       lr
;;;645    
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x423001b8

                          AREA ||i.SDIO_SendCommand||, CODE, READONLY, ALIGN=2

                  SDIO_SendCommand PROC
;;;319    *******************************************************************************/
;;;320    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
000000  2100              MOVS     r1,#0
;;;321    {
;;;322      u32 tmpreg = 0;
;;;323      
;;;324      /* Check the parameters */
;;;325      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;326      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;327      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;328      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;329      
;;;330    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;331      /* Set the SDIO Argument value */
;;;332      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000002  4b09              LDR      r3,|L22.40|
000004  6802              LDR      r2,[r0,#0]
000006  609a              STR      r2,[r3,#8]
;;;333      
;;;334    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;335      /* Get the SDIO CMD value */
;;;336      tmpreg = SDIO->CMD;
000008  461a              MOV      r2,r3
00000a  68d1              LDR      r1,[r2,#0xc]
;;;337    
;;;338      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;339      tmpreg &= CMD_CLEAR_MASK;
00000c  f36f010a          BFC      r1,#0,#11
;;;340      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;341      /* Set WAITRESP bits according to SDIO_Response value */
;;;342      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;343      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;344      tmpreg |= (u32)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
000010  e9d02301          LDRD     r2,r3,[r0,#4]
000014  431a              ORRS     r2,r2,r3
000016  68c3              LDR      r3,[r0,#0xc]
000018  431a              ORRS     r2,r2,r3
00001a  6903              LDR      r3,[r0,#0x10]
00001c  431a              ORRS     r2,r2,r3
00001e  4311              ORRS     r1,r1,r2
;;;345               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;346      
;;;347      /* Write to SDIO CMD */
;;;348      SDIO->CMD = tmpreg;
000020  4a01              LDR      r2,|L22.40|
000022  60d1              STR      r1,[r2,#0xc]
;;;349    }
000024  4770              BX       lr
;;;350    
                          ENDP

000026  0000              DCW      0x0000
                  |L22.40|
                          DCD      0x40018000

                          AREA ||i.SDIO_SendSDIOSuspendCmd||, CODE, READONLY, ALIGN=2

                  SDIO_SendSDIOSuspendCmd PROC
;;;589    *******************************************************************************/
;;;590    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L23.8|
;;;591    { 
;;;592      /* Check the parameters */
;;;593      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;594      
;;;595      *(vu32 *) CMD_SDIOSUSPEND_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;596    }
000004  4770              BX       lr
;;;597    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x423001ac

                          AREA ||i.SDIO_SetPowerState||, CODE, READONLY, ALIGN=2

                  SDIO_SetPowerState PROC
;;;206    *******************************************************************************/
;;;207    void SDIO_SetPowerState(u32 SDIO_PowerState)
000000  4905              LDR      r1,|L24.24|
;;;208    {
;;;209      /* Check the parameters */
;;;210      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;211      
;;;212      SDIO->POWER &= PWR_PWRCTRL_MASK;
000002  6809              LDR      r1,[r1,#0]
000004  f0210103          BIC      r1,r1,#3
000008  4a03              LDR      r2,|L24.24|
00000a  6011              STR      r1,[r2,#0]
;;;213      SDIO->POWER |= SDIO_PowerState;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  4301              ORRS     r1,r1,r0
000012  6011              STR      r1,[r2,#0]
;;;214    }
000014  4770              BX       lr
;;;215    
                          ENDP

000016  0000              DCW      0x0000
                  |L24.24|
                          DCD      0x40018000

                          AREA ||i.SDIO_SetSDIOOperation||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOOperation PROC
;;;573    *******************************************************************************/
;;;574    void SDIO_SetSDIOOperation(FunctionalState NewState)
000000  4901              LDR      r1,|L25.8|
;;;575    { 
;;;576      /* Check the parameters */
;;;577      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;578      
;;;579      *(vu32 *) DCTRL_SDIOEN_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;580    }
000004  4770              BX       lr
;;;581    
                          ENDP

000006  0000              DCW      0x0000
                  |L25.8|
                          DCD      0x423005ac

                          AREA ||i.SDIO_SetSDIOReadWaitMode||, CODE, READONLY, ALIGN=2

                  SDIO_SetSDIOReadWaitMode PROC
;;;557    *******************************************************************************/
;;;558    void SDIO_SetSDIOReadWaitMode(u32 SDIO_ReadWaitMode)
000000  4901              LDR      r1,|L26.8|
;;;559    {
;;;560      /* Check the parameters */
;;;561      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;562      
;;;563      *(vu32 *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000002  6008              STR      r0,[r1,#0]
;;;564    }
000004  4770              BX       lr
;;;565    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x423005a8

                          AREA ||i.SDIO_StartSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StartSDIOReadWait PROC
;;;523    *******************************************************************************/
;;;524    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L27.8|
;;;525    { 
;;;526      /* Check the parameters */
;;;527      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;528      
;;;529      *(vu32 *) DCTRL_RWSTART_BB = (u32) NewState;
000002  6008              STR      r0,[r1,#0]
;;;530    }
000004  4770              BX       lr
;;;531    
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      0x423005a0

                          AREA ||i.SDIO_StopSDIOReadWait||, CODE, READONLY, ALIGN=2

                  SDIO_StopSDIOReadWait PROC
;;;539    *******************************************************************************/
;;;540    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;541    { 
;;;542      /* Check the parameters */
;;;543      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;544      
;;;545      *(vu32 *) DCTRL_RWSTOP_BB = (u32) NewState;
000002  6008              STR      r0,[r1,#0]
;;;546    }
000004  4770              BX       lr
;;;547    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x423005a4

                          AREA ||i.SDIO_StructInit||, CODE, READONLY, ALIGN=1

                  SDIO_StructInit PROC
;;;169    *******************************************************************************/
;;;170    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000000  2100              MOVS     r1,#0
;;;171    {
;;;172      /* SDIO_InitStruct members default value */
;;;173      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000002  7001              STRB     r1,[r0,#0]
;;;174      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000004  6041              STR      r1,[r0,#4]
;;;175      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000006  6081              STR      r1,[r0,#8]
;;;176      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000008  60c1              STR      r1,[r0,#0xc]
;;;177      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
00000a  6101              STR      r1,[r0,#0x10]
;;;178      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00000c  6141              STR      r1,[r0,#0x14]
;;;179    }
00000e  4770              BX       lr
;;;180    
                          ENDP


                          AREA ||i.SDIO_WriteData||, CODE, READONLY, ALIGN=2

                  SDIO_WriteData PROC
;;;497    *******************************************************************************/
;;;498    void SDIO_WriteData(u32 Data)
000000  4901              LDR      r1,|L30.8|
;;;499    { 
;;;500      SDIO->FIFO = Data;
000002  6008              STR      r0,[r1,#0]
;;;501    }
000004  4770              BX       lr
;;;502    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      0x40018080
