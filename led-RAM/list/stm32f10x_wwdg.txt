; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_wwdg.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_wwdg.crf lib\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;194    *******************************************************************************/
;;;195    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;196    {
;;;197      WWDG->SR = (u32)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;198    }
000006  4770              BX       lr
;;;199    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;60     *******************************************************************************/
;;;61     void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;62     {
;;;63       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;64       RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;65     }
000014  bd10              POP      {r4,pc}
;;;66     
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;165    *******************************************************************************/
;;;166    void WWDG_Enable(u8 Counter)
000000  f0400180          ORR      r1,r0,#0x80
;;;167    {
;;;168      /* Check the parameters */
;;;169      assert_param(IS_WWDG_COUNTER(Counter));
;;;170    
;;;171      WWDG->CR = CR_WDGA_Set | Counter;
000004  4a01              LDR      r2,|L3.12|
000006  6011              STR      r1,[r2,#0]
;;;172    }
000008  4770              BX       lr
;;;173    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;131    *******************************************************************************/
;;;132    void WWDG_EnableIT(void)
000000  2001              MOVS     r0,#1
;;;133    {
;;;134      *(vu32 *) CFR_EWI_BB = (u32)ENABLE;
000002  4901              LDR      r1,|L4.8|
000004  6008              STR      r0,[r1,#0]
;;;135    }
000006  4770              BX       lr
;;;136    
                          ENDP

                  |L4.8|
                          DCD      0x420580a4

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;181    *******************************************************************************/
;;;182    FlagStatus WWDG_GetFlagStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;183    {
;;;184      return (FlagStatus)(*(vu32 *) SR_EWIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;185    }
000006  4770              BX       lr
;;;186    
                          ENDP

                  |L5.8|
                          DCD      0x42058100

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;145    *******************************************************************************/
;;;146    void WWDG_SetCounter(u8 Counter)
000000  f000017f          AND      r1,r0,#0x7f
;;;147    {
;;;148      /* Check the parameters */
;;;149      assert_param(IS_WWDG_COUNTER(Counter));
;;;150    
;;;151      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;152         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;153      WWDG->CR = Counter & BIT_Mask;
000004  4a01              LDR      r2,|L6.12|
000006  6011              STR      r1,[r2,#0]
;;;154    }
000008  4770              BX       lr
;;;155    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;79     *******************************************************************************/
;;;80     void WWDG_SetPrescaler(u32 WWDG_Prescaler)
000000  2100              MOVS     r1,#0
;;;81     {
;;;82       u32 tmpreg = 0;
;;;83     
;;;84       /* Check the parameters */
;;;85       assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;86     
;;;87       /* Clear WDGTB[1:0] bits */
;;;88       tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000002  4a04              LDR      r2,|L7.20|
000004  6812              LDR      r2,[r2,#0]
000006  f42271c0          BIC      r1,r2,#0x180
;;;89     
;;;90       /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;91       tmpreg |= WWDG_Prescaler;
00000a  4301              ORRS     r1,r1,r0
;;;92     
;;;93       /* Store the new value */
;;;94       WWDG->CFR = tmpreg;
00000c  4a01              LDR      r2,|L7.20|
00000e  6011              STR      r1,[r2,#0]
;;;95     }
000010  4770              BX       lr
;;;96     
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;106    *******************************************************************************/
;;;107    void WWDG_SetWindowValue(u8 WindowValue)
000000  2100              MOVS     r1,#0
;;;108    {
;;;109      u32 tmpreg = 0;
;;;110    
;;;111      /* Check the parameters */
;;;112      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;113    
;;;114      /* Clear W[6:0] bits */
;;;115      tmpreg = WWDG->CFR & CFR_W_Mask;
000002  4a05              LDR      r2,|L8.24|
000004  6812              LDR      r2,[r2,#0]
000006  f022017f          BIC      r1,r2,#0x7f
;;;116    
;;;117      /* Set W[6:0] bits according to WindowValue value */
;;;118      tmpreg |= WindowValue & BIT_Mask;
00000a  f000027f          AND      r2,r0,#0x7f
00000e  4311              ORRS     r1,r1,r2
;;;119    
;;;120      /* Store the new value */
;;;121      WWDG->CFR = tmpreg;
000010  4a01              LDR      r2,|L8.24|
000012  6011              STR      r1,[r2,#0]
;;;122    }
000014  4770              BX       lr
;;;123    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40002c04
