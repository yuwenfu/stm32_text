; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_gpio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_gpio.crf lib\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;111    *******************************************************************************/
;;;112    void GPIO_AFIODeInit(void) 
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;115      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;116    }
000012  bd10              POP      {r4,pc}
;;;117    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;54     *******************************************************************************/
;;;55     void GPIO_DeInit(GPIO_TypeDef* GPIOx)  
000000  b510              PUSH     {r4,lr}
;;;56     {
000002  4604              MOV      r4,r0
;;;57       /* Check the parameters */
;;;58       assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;59       
;;;60       switch (*(u32*)&GPIOx)
000004  492d              LDR      r1,|L2.188|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L2.108|
00000c  dc09              BGT      |L2.34|
00000e  482c              LDR      r0,|L2.192|
000010  4420              ADD      r0,r0,r4
000012  b180              CBZ      r0,|L2.54|
000014  f5b06f80          CMP      r0,#0x400
000018  d016              BEQ      |L2.72|
00001a  f5b06f00          CMP      r0,#0x800
00001e  d14a              BNE      |L2.182|
000020  e01b              B        |L2.90|
                  |L2.34|
000022  f5b06f80          CMP      r0,#0x400
000026  d02a              BEQ      |L2.126|
000028  f5b06f00          CMP      r0,#0x800
00002c  d030              BEQ      |L2.144|
00002e  f5b06f40          CMP      r0,#0xc00
000032  d140              BNE      |L2.182|
000034  e035              B        |L2.162|
                  |L2.54|
;;;61       {
;;;62         case GPIOA_BASE:
;;;63           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000036  2101              MOVS     r1,#1
000038  2004              MOVS     r0,#4
00003a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;64           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
00003e  2100              MOVS     r1,#0
000040  2004              MOVS     r0,#4
000042  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;65           break;
000046  e037              B        |L2.184|
                  |L2.72|
;;;66     
;;;67         case GPIOB_BASE:
;;;68           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000048  2101              MOVS     r1,#1
00004a  2008              MOVS     r0,#8
00004c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;69           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000050  2100              MOVS     r1,#0
000052  2008              MOVS     r0,#8
000054  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;70           break;
000058  e02e              B        |L2.184|
                  |L2.90|
;;;71     
;;;72         case GPIOC_BASE:
;;;73           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00005a  2101              MOVS     r1,#1
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;74           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000062  2100              MOVS     r1,#0
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;75           break;
00006a  e025              B        |L2.184|
                  |L2.108|
;;;76     
;;;77         case GPIOD_BASE:
;;;78           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;79           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
000074  2100              MOVS     r1,#0
000076  2020              MOVS     r0,#0x20
000078  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;80           break;
00007c  e01c              B        |L2.184|
                  |L2.126|
;;;81           
;;;82         case GPIOE_BASE:
;;;83           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
00007e  2101              MOVS     r1,#1
000080  2040              MOVS     r0,#0x40
000082  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;84           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000086  2100              MOVS     r1,#0
000088  2040              MOVS     r0,#0x40
00008a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;85           break; 
00008e  e013              B        |L2.184|
                  |L2.144|
;;;86     
;;;87         case GPIOF_BASE:
;;;88           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
000090  2101              MOVS     r1,#1
000092  2080              MOVS     r0,#0x80
000094  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;89           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000098  2100              MOVS     r1,#0
00009a  2080              MOVS     r0,#0x80
00009c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;90           break;
0000a0  e00a              B        |L2.184|
                  |L2.162|
;;;91     
;;;92         case GPIOG_BASE:
;;;93           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
0000a2  2101              MOVS     r1,#1
0000a4  0208              LSLS     r0,r1,#8
0000a6  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;94           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000aa  2100              MOVS     r1,#0
0000ac  f44f7080          MOV      r0,#0x100
0000b0  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;95           break;                       
0000b4  e000              B        |L2.184|
                  |L2.182|
;;;96     
;;;97         default:
;;;98           break;
0000b6  bf00              NOP      
                  |L2.184|
0000b8  bf00              NOP                            ;65
;;;99       }
;;;100    }
0000ba  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  |L2.188|
                          DCD      0x40011400
                  |L2.192|
                          DCD      0xbffef800

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;585    *******************************************************************************/
;;;586    void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
000000  b530              PUSH     {r4,r5,lr}
;;;587    {
;;;588      u32 tmp = 0x00;
000002  2200              MOVS     r2,#0
;;;589    
;;;590      /* Check the parameters */
;;;591      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;592      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;593      
;;;594      tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
000004  078b              LSLS     r3,r1,#30
000006  0f1c              LSRS     r4,r3,#28
000008  230f              MOVS     r3,#0xf
00000a  fa03f204          LSL      r2,r3,r4
;;;595    
;;;596      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00000e  4b0b              LDR      r3,|L3.60|
000010  108c              ASRS     r4,r1,#2
000012  f8533024          LDR      r3,[r3,r4,LSL #2]
000016  4393              BICS     r3,r3,r2
000018  4c08              LDR      r4,|L3.60|
00001a  108d              ASRS     r5,r1,#2
00001c  f8443025          STR      r3,[r4,r5,LSL #2]
;;;597      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
000020  4623              MOV      r3,r4
000022  108c              ASRS     r4,r1,#2
000024  f8533024          LDR      r3,[r3,r4,LSL #2]
000028  078c              LSLS     r4,r1,#30
00002a  0f24              LSRS     r4,r4,#28
00002c  fa00f404          LSL      r4,r0,r4
000030  4323              ORRS     r3,r3,r4
000032  4c02              LDR      r4,|L3.60|
000034  108d              ASRS     r5,r1,#2
000036  f8443025          STR      r3,[r4,r5,LSL #2]
;;;598    }
00003a  bd30              POP      {r4,r5,pc}
;;;599    
                          ENDP

                  |L3.60|
                          DCD      0x40010008

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;490    *******************************************************************************/
;;;491    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;492    {
;;;493      /* Check the parameters */
;;;494      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;495      
;;;496      *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;497    }
000004  4770              BX       lr
;;;498    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;464    *******************************************************************************/
;;;465    void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
000000  4602              MOV      r2,r0
;;;466    {
;;;467      u32 tmpreg = 0x00;
000002  2000              MOVS     r0,#0
;;;468    
;;;469      /* Check the parameters */
;;;470      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;471      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;472        
;;;473      tmpreg = AFIO->EVCR;
000004  4b05              LDR      r3,|L5.28|
000006  6818              LDR      r0,[r3,#0]
;;;474      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;475      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000008  f64f7380          MOV      r3,#0xff80
00000c  4018              ANDS     r0,r0,r3
;;;476      tmpreg |= (u32)GPIO_PortSource << 0x04;
00000e  ea401002          ORR      r0,r0,r2,LSL #4
;;;477      tmpreg |= GPIO_PinSource;
000012  4308              ORRS     r0,r0,r1
;;;478    
;;;479      AFIO->EVCR = tmpreg;
000014  4b01              LDR      r3,|L5.28|
000016  6018              STR      r0,[r3,#0]
;;;480    }
000018  4770              BX       lr
;;;481    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;129    *******************************************************************************/
;;;130    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
000004  4602              MOV      r2,r0
;;;132      u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2000              MOVS     r0,#0
00000c  2300              MOVS     r3,#0
;;;133      u32 tmpreg = 0x00, pinmask = 0x00;
00000e  2400              MOVS     r4,#0
000010  2700              MOVS     r7,#0
;;;134    
;;;135      /* Check the parameters */
;;;136      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;137      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;138      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;139      
;;;140    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;141      currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
000012  f891c003          LDRB     r12,[r1,#3]
000016  f00c050f          AND      r5,r12,#0xf
;;;142    
;;;143      if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
00001a  f891c003          LDRB     r12,[r1,#3]
00001e  f00c0c10          AND      r12,r12,#0x10
000022  f1bc0f00          CMP      r12,#0
000026  d003              BEQ      |L6.48|
;;;144      { 
;;;145        /* Check the parameters */
;;;146        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;147        /* Output mode */
;;;148        currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
000028  f891c002          LDRB     r12,[r1,#2]
00002c  ea4c0505          ORR      r5,r12,r5
                  |L6.48|
;;;149      }
;;;150    
;;;151    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;152      /* Configure the eight low port pins */
;;;153      if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
000030  f891c000          LDRB     r12,[r1,#0]
000034  f1bc0f00          CMP      r12,#0
000038  d030              BEQ      |L6.156|
;;;154      {
;;;155        tmpreg = GPIOx->CRL;
00003a  6814              LDR      r4,[r2,#0]
;;;156    
;;;157        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
00003c  2000              MOVS     r0,#0
00003e  e02a              B        |L6.150|
                  |L6.64|
;;;158        {
;;;159          pos = ((u32)0x01) << pinpos;
000040  f04f0c01          MOV      r12,#1
000044  fa0cf300          LSL      r3,r12,r0
;;;160          /* Get the port pins position */
;;;161          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000048  f8b1c000          LDRH     r12,[r1,#0]
00004c  ea0c0603          AND      r6,r12,r3
;;;162    
;;;163          if (currentpin == pos)
000050  429e              CMP      r6,r3
000052  d11f              BNE      |L6.148|
;;;164          {
;;;165            pos = pinpos << 2;
000054  0083              LSLS     r3,r0,#2
;;;166            /* Clear the corresponding low control register bits */
;;;167            pinmask = ((u32)0x0F) << pos;
000056  f04f0c0f          MOV      r12,#0xf
00005a  fa0cf703          LSL      r7,r12,r3
;;;168            tmpreg &= ~pinmask;
00005e  43bc              BICS     r4,r4,r7
;;;169    
;;;170            /* Write the mode configuration in the corresponding bits */
;;;171            tmpreg |= (currentmode << pos);
000060  fa05fc03          LSL      r12,r5,r3
000064  ea4c0404          ORR      r4,r12,r4
;;;172    
;;;173            /* Reset the corresponding ODR bit */
;;;174            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000068  f891c003          LDRB     r12,[r1,#3]
00006c  f1bc0f28          CMP      r12,#0x28
000070  d105              BNE      |L6.126|
;;;175            {
;;;176              GPIOx->BRR = (((u32)0x01) << pinpos);
000072  f04f0c01          MOV      r12,#1
000076  fa0cfc00          LSL      r12,r12,r0
00007a  f8c2c014          STR      r12,[r2,#0x14]
                  |L6.126|
;;;177            }
;;;178            /* Set the corresponding ODR bit */
;;;179            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00007e  f891c003          LDRB     r12,[r1,#3]
000082  f1bc0f48          CMP      r12,#0x48
000086  d105              BNE      |L6.148|
;;;180            {
;;;181              GPIOx->BSRR = (((u32)0x01) << pinpos);
000088  f04f0c01          MOV      r12,#1
00008c  fa0cfc00          LSL      r12,r12,r0
000090  f8c2c010          STR      r12,[r2,#0x10]
                  |L6.148|
000094  1c40              ADDS     r0,r0,#1              ;157
                  |L6.150|
000096  2808              CMP      r0,#8                 ;157
000098  d3d2              BCC      |L6.64|
;;;182            }
;;;183          }
;;;184        }
;;;185        GPIOx->CRL = tmpreg;
00009a  6014              STR      r4,[r2,#0]
                  |L6.156|
;;;186      }
;;;187    
;;;188    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;189      /* Configure the eight high port pins */
;;;190      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
00009c  f8b1c000          LDRH     r12,[r1,#0]
0000a0  f1bc0fff          CMP      r12,#0xff
0000a4  dd34              BLE      |L6.272|
;;;191      {
;;;192        tmpreg = GPIOx->CRH;
0000a6  6854              LDR      r4,[r2,#4]
;;;193        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0000a8  2000              MOVS     r0,#0
0000aa  e02e              B        |L6.266|
                  |L6.172|
;;;194        {
;;;195          pos = (((u32)0x01) << (pinpos + 0x08));
0000ac  f1000c08          ADD      r12,r0,#8
0000b0  f04f0801          MOV      r8,#1
0000b4  fa08f30c          LSL      r3,r8,r12
;;;196          /* Get the port pins position */
;;;197          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
0000b8  f8b1c000          LDRH     r12,[r1,#0]
0000bc  ea0c0603          AND      r6,r12,r3
;;;198          if (currentpin == pos)
0000c0  429e              CMP      r6,r3
0000c2  d121              BNE      |L6.264|
;;;199          {
;;;200            pos = pinpos << 2;
0000c4  0083              LSLS     r3,r0,#2
;;;201            /* Clear the corresponding high control register bits */
;;;202            pinmask = ((u32)0x0F) << pos;
0000c6  f04f0c0f          MOV      r12,#0xf
0000ca  fa0cf703          LSL      r7,r12,r3
;;;203            tmpreg &= ~pinmask;
0000ce  43bc              BICS     r4,r4,r7
;;;204    
;;;205            /* Write the mode configuration in the corresponding bits */
;;;206            tmpreg |= (currentmode << pos);
0000d0  fa05fc03          LSL      r12,r5,r3
0000d4  ea4c0404          ORR      r4,r12,r4
;;;207    
;;;208            /* Reset the corresponding ODR bit */
;;;209            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000d8  f891c003          LDRB     r12,[r1,#3]
0000dc  f1bc0f28          CMP      r12,#0x28
0000e0  d105              BNE      |L6.238|
;;;210            {
;;;211              GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
0000e2  f1000c08          ADD      r12,r0,#8
0000e6  fa08f80c          LSL      r8,r8,r12
0000ea  f8c28014          STR      r8,[r2,#0x14]
                  |L6.238|
;;;212            }
;;;213            /* Set the corresponding ODR bit */
;;;214            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000ee  f891c003          LDRB     r12,[r1,#3]
0000f2  f1bc0f48          CMP      r12,#0x48
0000f6  d107              BNE      |L6.264|
;;;215            {
;;;216              GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
0000f8  f1000c08          ADD      r12,r0,#8
0000fc  f04f0801          MOV      r8,#1
000100  fa08f80c          LSL      r8,r8,r12
000104  f8c28010          STR      r8,[r2,#0x10]
                  |L6.264|
000108  1c40              ADDS     r0,r0,#1              ;193
                  |L6.266|
00010a  2808              CMP      r0,#8                 ;193
00010c  d3ce              BCC      |L6.172|
;;;217            }
;;;218          }
;;;219        }
;;;220        GPIOx->CRH = tmpreg;
00010e  6054              STR      r4,[r2,#4]
                  |L6.272|
;;;221      }
;;;222    }
000110  e8bd81f0          POP      {r4-r8,pc}
;;;223    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;430    *******************************************************************************/
;;;431    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  f44f3280          MOV      r2,#0x10000
;;;432    {
;;;433      u32 tmp = 0x00010000;
;;;434      
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438      
;;;439      tmp |= GPIO_Pin;
000004  430a              ORRS     r2,r2,r1
;;;440      /* Set LCKK bit */
;;;441      GPIOx->LCKR = tmp;
000006  6182              STR      r2,[r0,#0x18]
;;;442      /* Reset LCKK bit */
;;;443      GPIOx->LCKR =  GPIO_Pin;
000008  6181              STR      r1,[r0,#0x18]
;;;444      /* Set LCKK bit */
;;;445      GPIOx->LCKR = tmp;
00000a  6182              STR      r2,[r0,#0x18]
;;;446      /* Read LCKK bit*/
;;;447      tmp = GPIOx->LCKR;
00000c  6982              LDR      r2,[r0,#0x18]
;;;448      /* Read LCKK bit*/
;;;449      tmp = GPIOx->LCKR;
00000e  6982              LDR      r2,[r0,#0x18]
;;;450    }
000010  4770              BX       lr
;;;451    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;534    *******************************************************************************/
;;;535    void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;536    {
000002  460a              MOV      r2,r1
;;;537      u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2100              MOVS     r1,#0
00000a  2500              MOVS     r5,#0
;;;538    
;;;539      /* Check the parameters */
;;;540      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;541      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;542      
;;;543      tmpreg = AFIO->MAPR;
00000c  4e17              LDR      r6,|L8.108|
00000e  6871              LDR      r1,[r6,#4]
;;;544    
;;;545      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
000010  f3c04503          UBFX     r5,r0,#16,#4
;;;546      tmp = GPIO_Remap & LSB_MASK;
000014  b283              UXTH     r3,r0
;;;547    
;;;548      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000016  f4001640          AND      r6,r0,#0x300000
00001a  f5b61f40          CMP      r6,#0x300000
00001e  d108              BNE      |L8.50|
;;;549      {
;;;550        tmpreg &= DBGAFR_SWJCFG_MASK;
000020  f0216170          BIC      r1,r1,#0xf000000
;;;551        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
000024  4e11              LDR      r6,|L8.108|
000026  6876              LDR      r6,[r6,#4]
000028  f0266670          BIC      r6,r6,#0xf000000
00002c  4f0f              LDR      r7,|L8.108|
00002e  607e              STR      r6,[r7,#4]
000030  e012              B        |L8.88|
                  |L8.50|
;;;552      }
;;;553      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
000032  f4001680          AND      r6,r0,#0x100000
000036  f5b61f80          CMP      r6,#0x100000
00003a  d106              BNE      |L8.74|
;;;554      {
;;;555        tmp1 = ((u32)0x03) << tmpmask;
00003c  2603              MOVS     r6,#3
00003e  fa06f405          LSL      r4,r6,r5
;;;556        tmpreg &= ~tmp1;
000042  43a1              BICS     r1,r1,r4
;;;557        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000044  f0416170          ORR      r1,r1,#0xf000000
000048  e006              B        |L8.88|
                  |L8.74|
;;;558      }
;;;559      else
;;;560      {
;;;561        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00004a  0d46              LSRS     r6,r0,#21
00004c  0136              LSLS     r6,r6,#4
00004e  fa03f606          LSL      r6,r3,r6
000052  43b1              BICS     r1,r1,r6
;;;562        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000054  f0416170          ORR      r1,r1,#0xf000000
                  |L8.88|
;;;563      }
;;;564    
;;;565      if (NewState != DISABLE)
000058  b122              CBZ      r2,|L8.100|
;;;566      {
;;;567        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00005a  0d46              LSRS     r6,r0,#21
00005c  0136              LSLS     r6,r6,#4
00005e  fa03f606          LSL      r6,r3,r6
000062  4331              ORRS     r1,r1,r6
                  |L8.100|
;;;568      }
;;;569    
;;;570      AFIO->MAPR = tmpreg;
000064  4e01              LDR      r6,|L8.108|
000066  6071              STR      r1,[r6,#4]
;;;571    }
000068  bdf0              POP      {r4-r7,pc}
;;;572    
                          ENDP

00006a  0000              DCW      0x0000
                  |L8.108|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;277    *******************************************************************************/
;;;278    u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;279    {
;;;280      /* Check the parameters */
;;;281      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;282      
;;;283      return ((u16)GPIOx->IDR);
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;284    }
000006  4770              BX       lr
;;;285    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;250    *******************************************************************************/
;;;251    u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  4602              MOV      r2,r0
;;;252    {
;;;253      u8 bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;254      
;;;255      /* Check the parameters */
;;;256      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;257      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;258      
;;;259      if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
000004  6893              LDR      r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L10.14|
;;;260      {
;;;261        bitstatus = (u8)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L10.16|
                  |L10.14|
;;;262      }
;;;263      else
;;;264      {
;;;265        bitstatus = (u8)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L10.16|
;;;266      }
;;;267      return bitstatus;
;;;268    }
000010  4770              BX       lr
;;;269    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;322    *******************************************************************************/
;;;323    u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;324    {
;;;325      /* Check the parameters */
;;;326      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;327        
;;;328      return ((u16)GPIOx->ODR);
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;329    }
000006  4770              BX       lr
;;;330    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;295    *******************************************************************************/
;;;296    u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  4602              MOV      r2,r0
;;;297    {
;;;298      u8 bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;299    
;;;300      /* Check the parameters */
;;;301      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;302      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;303      
;;;304      if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
000004  68d3              LDR      r3,[r2,#0xc]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L12.14|
;;;305      {
;;;306        bitstatus = (u8)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L12.16|
                  |L12.14|
;;;307      }
;;;308      else
;;;309      {
;;;310        bitstatus = (u8)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L12.16|
;;;311      }
;;;312      return bitstatus;
;;;313    }
000010  4770              BX       lr
;;;314    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;361    *******************************************************************************/
;;;362    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;363    {
;;;364      /* Check the parameters */
;;;365      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;366      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;367      
;;;368      GPIOx->BRR = GPIO_Pin;
;;;369    }
000002  4770              BX       lr
;;;370    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;341    *******************************************************************************/
;;;342    void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;346      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;347      
;;;348      GPIOx->BSRR = GPIO_Pin;
;;;349    }
000002  4770              BX       lr
;;;350    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;232    *******************************************************************************/
;;;233    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;234    {
;;;235      /* Reset GPIO init structure parameters values */
;;;236      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;237      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;238      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;239    }
00000e  4770              BX       lr
;;;240    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;411    *******************************************************************************/
;;;412    void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;413    {
;;;414      /* Check the parameters */
;;;415      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;416      
;;;417      GPIOx->ODR = PortVal;
;;;418    }
000002  4770              BX       lr
;;;419    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;384    *******************************************************************************/
;;;385    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L17.6|
;;;386    {
;;;387      /* Check the parameters */
;;;388      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;389      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;390      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;391      
;;;392      if (BitVal != Bit_RESET)
;;;393      {
;;;394        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
000004  e000              B        |L17.8|
                  |L17.6|
;;;395      }
;;;396      else
;;;397      {
;;;398        GPIOx->BRR = GPIO_Pin;
000006  6141              STR      r1,[r0,#0x14]
                  |L17.8|
;;;399      }
;;;400    }
000008  4770              BX       lr
;;;401    
                          ENDP

