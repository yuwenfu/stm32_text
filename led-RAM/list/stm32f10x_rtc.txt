; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_rtc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_rtc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_rtc.crf lib\src\stm32f10x_rtc.c]
                          THUMB

                          AREA ||i.RTC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RTC_ClearFlag PROC
;;;275    *******************************************************************************/
;;;276    void RTC_ClearFlag(u16 RTC_FLAG)
000000  4902              LDR      r1,|L1.12|
;;;277    {
;;;278      /* Check the parameters */
;;;279      assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
;;;280        
;;;281      /* Clear the coressponding RTC flag */
;;;282      RTC->CRL &= (u16)~RTC_FLAG;
000002  8809              LDRH     r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L1.12|
000008  8011              STRH     r1,[r2,#0]
;;;283    }
00000a  4770              BX       lr
;;;284    
                          ENDP

                  |L1.12|
                          DCD      0x40002804

                          AREA ||i.RTC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RTC_ClearITPendingBit PROC
;;;328    *******************************************************************************/
;;;329    void RTC_ClearITPendingBit(u16 RTC_IT)
000000  4902              LDR      r1,|L2.12|
;;;330    {
;;;331      /* Check the parameters */
;;;332      assert_param(IS_RTC_IT(RTC_IT));  
;;;333      
;;;334      /* Clear the coressponding RTC pending bit */
;;;335      RTC->CRL &= (u16)~RTC_IT;
000002  8809              LDRH     r1,[r1,#0]
000004  4381              BICS     r1,r1,r0
000006  4a01              LDR      r2,|L2.12|
000008  8011              STRH     r1,[r2,#0]
;;;336    }
00000a  4770              BX       lr
;;;337    
                          ENDP

                  |L2.12|
                          DCD      0x40002804

                          AREA ||i.RTC_EnterConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_EnterConfigMode PROC
;;;72     *******************************************************************************/
;;;73     void RTC_EnterConfigMode(void)
000000  4803              LDR      r0,|L3.16|
;;;74     {
;;;75       /* Set the CNF flag to enter in the Configuration Mode */
;;;76       RTC->CRL |= CRL_CNF_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400010          ORR      r0,r0,#0x10
000008  4901              LDR      r1,|L3.16|
00000a  8008              STRH     r0,[r1,#0]
;;;77     }
00000c  4770              BX       lr
;;;78     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40002804

                          AREA ||i.RTC_ExitConfigMode||, CODE, READONLY, ALIGN=2

                  RTC_ExitConfigMode PROC
;;;86     *******************************************************************************/
;;;87     void RTC_ExitConfigMode(void)
000000  4803              LDR      r0,|L4.16|
;;;88     {
;;;89       /* Reset the CNF flag to exit from the Configuration Mode */
;;;90       RTC->CRL &= CRL_CNF_Reset;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71ef          MOV      r1,#0xffef
000008  4008              ANDS     r0,r0,r1
00000a  4901              LDR      r1,|L4.16|
00000c  8008              STRH     r0,[r1,#0]
;;;91     }
00000e  4770              BX       lr
;;;92     
                          ENDP

                  |L4.16|
                          DCD      0x40002804

                          AREA ||i.RTC_GetCounter||, CODE, READONLY, ALIGN=2

                  RTC_GetCounter PROC
;;;100    *******************************************************************************/
;;;101    u32 RTC_GetCounter(void)
000000  2100              MOVS     r1,#0
;;;102    {
;;;103      u16 tmp = 0;
;;;104      tmp = RTC->CNTL;
000002  4803              LDR      r0,|L5.16|
000004  8801              LDRH     r1,[r0,#0]
;;;105    
;;;106      return (((u32)RTC->CNTH << 16 ) | tmp) ;
000006  1f00              SUBS     r0,r0,#4
000008  8800              LDRH     r0,[r0,#0]
00000a  ea414000          ORR      r0,r1,r0,LSL #16
;;;107    }
00000e  4770              BX       lr
;;;108    
                          ENDP

                  |L5.16|
                          DCD      0x4000281c

                          AREA ||i.RTC_GetDivider||, CODE, READONLY, ALIGN=2

                  RTC_GetDivider PROC
;;;180    *******************************************************************************/
;;;181    u32 RTC_GetDivider(void)
000000  2000              MOVS     r0,#0
;;;182    {
;;;183      u32 tmp = 0x00;
;;;184    
;;;185      tmp = ((u32)RTC->DIVH & (u32)0x000F) << 16;
000002  4904              LDR      r1,|L6.20|
000004  8809              LDRH     r1,[r1,#0]
000006  0709              LSLS     r1,r1,#28
000008  0b08              LSRS     r0,r1,#12
;;;186      tmp |= RTC->DIVL;
00000a  4902              LDR      r1,|L6.20|
00000c  1d09              ADDS     r1,r1,#4
00000e  8809              LDRH     r1,[r1,#0]
000010  4308              ORRS     r0,r0,r1
;;;187    
;;;188      return tmp;
;;;189    }
000012  4770              BX       lr
;;;190    
                          ENDP

                  |L6.20|
                          DCD      0x40002810

                          AREA ||i.RTC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetFlagStatus PROC
;;;243    *******************************************************************************/
;;;244    FlagStatus RTC_GetFlagStatus(u16 RTC_FLAG)
000000  4601              MOV      r1,r0
;;;245    {
;;;246      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;247      
;;;248      /* Check the parameters */
;;;249      assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
;;;250      
;;;251      if ((RTC->CRL & RTC_FLAG) != (u16)RESET)
000004  4a03              LDR      r2,|L7.20|
000006  8812              LDRH     r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L7.16|
;;;252      {
;;;253        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L7.18|
                  |L7.16|
;;;254      }
;;;255      else
;;;256      {
;;;257        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L7.18|
;;;258      }
;;;259      return bitstatus;
;;;260    }
000012  4770              BX       lr
;;;261    
                          ENDP

                  |L7.20|
                          DCD      0x40002804

                          AREA ||i.RTC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RTC_GetITStatus PROC
;;;296    *******************************************************************************/
;;;297    ITStatus RTC_GetITStatus(u16 RTC_IT)
000000  4601              MOV      r1,r0
;;;298    {
;;;299      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;300    
;;;301      /* Check the parameters */
;;;302      assert_param(IS_RTC_GET_IT(RTC_IT)); 
;;;303      
;;;304      bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
000004  4a06              LDR      r2,|L8.32|
000006  8812              LDRH     r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b2d0              UXTB     r0,r2
;;;305    
;;;306      if (((RTC->CRH & RTC_IT) != (u16)RESET) && (bitstatus != (u16)RESET))
00000c  4a04              LDR      r2,|L8.32|
00000e  1f12              SUBS     r2,r2,#4
000010  8812              LDRH     r2,[r2,#0]
000012  400a              ANDS     r2,r2,r1
000014  b112              CBZ      r2,|L8.28|
000016  b108              CBZ      r0,|L8.28|
;;;307      {
;;;308        bitstatus = SET;
000018  2001              MOVS     r0,#1
00001a  e000              B        |L8.30|
                  |L8.28|
;;;309      }
;;;310      else
;;;311      {
;;;312        bitstatus = RESET;
00001c  2000              MOVS     r0,#0
                  |L8.30|
;;;313      }
;;;314      return bitstatus;
;;;315    }
00001e  4770              BX       lr
;;;316    
                          ENDP

                  |L8.32|
                          DCD      0x40002804

                          AREA ||i.RTC_ITConfig||, CODE, READONLY, ALIGN=2

                  RTC_ITConfig PROC
;;;48     *******************************************************************************/
;;;49     void RTC_ITConfig(u16 RTC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L9.14|
;;;50     {
;;;51       /* Check the parameters */
;;;52       assert_param(IS_RTC_IT(RTC_IT));  
;;;53       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;54       
;;;55       if (NewState != DISABLE)
;;;56       {
;;;57         RTC->CRH |= RTC_IT;
000002  4a06              LDR      r2,|L9.28|
000004  8812              LDRH     r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L9.28|
00000a  801a              STRH     r2,[r3,#0]
00000c  e004              B        |L9.24|
                  |L9.14|
;;;58       }
;;;59       else
;;;60       {
;;;61         RTC->CRH &= (u16)~RTC_IT;
00000e  4a03              LDR      r2,|L9.28|
000010  8812              LDRH     r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L9.28|
000016  801a              STRH     r2,[r3,#0]
                  |L9.24|
;;;62       }
;;;63     }
000018  4770              BX       lr
;;;64     
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40002800

                          AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarm PROC
;;;159    *******************************************************************************/
;;;160    void RTC_SetAlarm(u32 AlarmValue)
000000  b500              PUSH     {lr}
;;;161    {  
000002  4602              MOV      r2,r0
;;;162      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;163    
;;;164      /* Set the ALARM MSB word */
;;;165      RTC->ALRH = AlarmValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L10.24|
00000c  8008              STRH     r0,[r1,#0]
;;;166      /* Set the ALARM LSB word */
;;;167      RTC->ALRL = (AlarmValue & RTC_LSB_Mask);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;168    											 
;;;169    
;;;170      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;171    }
000016  bd00              POP      {pc}
;;;172    
                          ENDP

                  |L10.24|
                          DCD      0x40002820

                          AREA ||i.RTC_SetCounter||, CODE, READONLY, ALIGN=2

                  RTC_SetCounter PROC
;;;116    *******************************************************************************/
;;;117    void RTC_SetCounter(u32 CounterValue)
000000  b500              PUSH     {lr}
;;;118    { 
000002  4602              MOV      r2,r0
;;;119      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;120    
;;;121      /* Set RTC COUNTER MSB word */
;;;122      RTC->CNTH = CounterValue >> 16;
000008  0c10              LSRS     r0,r2,#16
00000a  4903              LDR      r1,|L11.24|
00000c  8008              STRH     r0,[r1,#0]
;;;123      /* Set RTC COUNTER LSB word */
;;;124      RTC->CNTL = (CounterValue & RTC_LSB_Mask);
00000e  1d09              ADDS     r1,r1,#4
000010  800a              STRH     r2,[r1,#0]
;;;125    
;;;126      RTC_ExitConfigMode();
000012  f7fffffe          BL       RTC_ExitConfigMode
;;;127    }
000016  bd00              POP      {pc}
;;;128    
                          ENDP

                  |L11.24|
                          DCD      0x40002818

                          AREA ||i.RTC_SetPrescaler||, CODE, READONLY, ALIGN=2

                  RTC_SetPrescaler PROC
;;;136    *******************************************************************************/
;;;137    void RTC_SetPrescaler(u32 PrescalerValue)
000000  b500              PUSH     {lr}
;;;138    {
000002  4602              MOV      r2,r0
;;;139      /* Check the parameters */
;;;140      assert_param(IS_RTC_PRESCALER(PrescalerValue));
;;;141      
;;;142      RTC_EnterConfigMode();
000004  f7fffffe          BL       RTC_EnterConfigMode
;;;143    
;;;144      /* Set RTC PRESCALER MSB word */
;;;145      RTC->PRLH = (PrescalerValue & PRLH_MSB_Mask) >> 16;
000008  f3c24003          UBFX     r0,r2,#16,#4
00000c  4903              LDR      r1,|L12.28|
00000e  8008              STRH     r0,[r1,#0]
;;;146      /* Set RTC PRESCALER LSB word */
;;;147      RTC->PRLL = (PrescalerValue & RTC_LSB_Mask);
000010  1d09              ADDS     r1,r1,#4
000012  800a              STRH     r2,[r1,#0]
;;;148    
;;;149      RTC_ExitConfigMode();
000014  f7fffffe          BL       RTC_ExitConfigMode
;;;150    }
000018  bd00              POP      {pc}
;;;151    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40002808

                          AREA ||i.RTC_WaitForLastTask||, CODE, READONLY, ALIGN=2

                  RTC_WaitForLastTask PROC
;;;199    *******************************************************************************/
;;;200    void RTC_WaitForLastTask(void)
000000  bf00              NOP      
                  |L13.2|
;;;201    {
;;;202      /* Loop until RTOFF flag is set */
;;;203      while ((RTC->CRL & RTC_FLAG_RTOFF) == (u16)RESET)
000002  4803              LDR      r0,|L13.16|
000004  8800              LDRH     r0,[r0,#0]
000006  f0000020          AND      r0,r0,#0x20
00000a  2800              CMP      r0,#0
00000c  d0f9              BEQ      |L13.2|
;;;204      {
;;;205      }
;;;206    }
00000e  4770              BX       lr
;;;207    
                          ENDP

                  |L13.16|
                          DCD      0x40002804

                          AREA ||i.RTC_WaitForSynchro||, CODE, READONLY, ALIGN=2

                  RTC_WaitForSynchro PROC
;;;218    *******************************************************************************/
;;;219    void RTC_WaitForSynchro(void)
000000  4807              LDR      r0,|L14.32|
;;;220    {
;;;221      /* Clear RSF flag */
;;;222      RTC->CRL &= (u16)~RTC_FLAG_RSF;
000002  8800              LDRH     r0,[r0,#0]
000004  f64f71f7          MOV      r1,#0xfff7
000008  4008              ANDS     r0,r0,r1
00000a  4905              LDR      r1,|L14.32|
00000c  8008              STRH     r0,[r1,#0]
;;;223    
;;;224      /* Loop until RSF flag is set */
;;;225      while ((RTC->CRL & RTC_FLAG_RSF) == (u16)RESET)
00000e  bf00              NOP      
                  |L14.16|
000010  4803              LDR      r0,|L14.32|
000012  8800              LDRH     r0,[r0,#0]
000014  f0000008          AND      r0,r0,#8
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L14.16|
;;;226      {
;;;227      }
;;;228    }
00001c  4770              BX       lr
;;;229    
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      0x40002804
