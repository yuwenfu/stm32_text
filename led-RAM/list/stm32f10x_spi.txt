; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_spi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_spi.crf lib\src\stm32f10x_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;369    *******************************************************************************/
;;;370    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;371    {
;;;372      /* Check the parameters */
;;;373      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;374      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;375    
;;;376      if (NewState != DISABLE)
;;;377      {
;;;378        /* Enable the selected SPI peripheral (in I2S mode) */
;;;379        SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;380      }
;;;381      else
;;;382      {
;;;383        /* Disable the selected SPI peripheral (in I2S mode) */
;;;384        SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;385      }
;;;386    }
000016  4770              BX       lr
;;;387    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=1

                  I2S_Init PROC
;;;168    ******************************************************************************/
;;;169    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;170    {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460c              MOV      r4,r1
;;;171      u16 tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
00000a  f04f0900          MOV      r9,#0
00000e  2702              MOVS     r7,#2
000010  f04f0800          MOV      r8,#0
000014  f04f0a01          MOV      r10,#1
;;;172      u32 tmp = 0;
000018  2600              MOVS     r6,#0
;;;173      RCC_ClocksTypeDef RCC_Clocks;
;;;174       
;;;175      /* Check the I2S parameters */
;;;176      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;177      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;178      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;179      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;180      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;181      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;182      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;183    
;;;184    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;185    
;;;186      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;187      SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
00001a  8ba8              LDRH     r0,[r5,#0x1c]
00001c  f24f0140          MOV      r1,#0xf040
000020  4008              ANDS     r0,r0,r1
000022  83a8              STRH     r0,[r5,#0x1c]
;;;188      SPIx->I2SPR = 0x0002;
000024  2002              MOVS     r0,#2
000026  8428              STRH     r0,[r5,#0x20]
;;;189      
;;;190      /* Get the I2SCFGR register value */
;;;191      tmpreg = SPIx->I2SCFGR;
000028  f8b5901c          LDRH     r9,[r5,#0x1c]
;;;192      
;;;193      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;194      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
00002c  8920              LDRH     r0,[r4,#8]
00002e  2802              CMP      r0,#2
000030  d101              BNE      |L2.54|
;;;195      {
;;;196        i2sodd = (u16)0;
000032  bf00              NOP      
;;;197        i2sdiv = (u16)2;   
000034  e031              B        |L2.154|
                  |L2.54|
;;;198      }
;;;199      /* If the requested audio frequency is not the default, compute the prescaler */
;;;200      else
;;;201      {
;;;202        /* Check the frame length (For the Prescaler computing) */
;;;203        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
000036  88a0              LDRH     r0,[r4,#4]
000038  b910              CBNZ     r0,|L2.64|
;;;204        {
;;;205          /* Packet length is 16 bits */
;;;206          packetlength = 1;
00003a  f04f0a01          MOV      r10,#1
00003e  e001              B        |L2.68|
                  |L2.64|
;;;207        }
;;;208        else
;;;209        {
;;;210          /* Packet length is 32 bits */
;;;211          packetlength = 2;
000040  f04f0a02          MOV      r10,#2
                  |L2.68|
;;;212        }
;;;213        /* Get System Clock frequency */
;;;214        RCC_GetClocksFreq(&RCC_Clocks);
000044  a801              ADD      r0,sp,#4
000046  f7fffffe          BL       RCC_GetClocksFreq
;;;215        
;;;216        /* Compute the Real divider depending on the MCLK output state with a flaoting point */
;;;217        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
00004a  88e0              LDRH     r0,[r4,#6]
00004c  f5b07f00          CMP      r0,#0x200
000050  d10a              BNE      |L2.104|
;;;218        {
;;;219          /* MCLK output is enabled */
;;;220          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
000052  9801              LDR      r0,[sp,#4]
000054  eb000080          ADD      r0,r0,r0,LSL #2
000058  0040              LSLS     r0,r0,#1
00005a  8921              LDRH     r1,[r4,#8]
00005c  0209              LSLS     r1,r1,#8
00005e  fbb0f0f1          UDIV     r0,r0,r1
000062  1d40              ADDS     r0,r0,#5
000064  b286              UXTH     r6,r0
000066  e00b              B        |L2.128|
                  |L2.104|
;;;221        }
;;;222        else
;;;223        {
;;;224          /* MCLK output is disabled */
;;;225          tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
000068  ea4f104a          LSL      r0,r10,#5
00006c  8921              LDRH     r1,[r4,#8]
00006e  4348              MULS     r0,r1,r0
000070  9901              LDR      r1,[sp,#4]
000072  eb010181          ADD      r1,r1,r1,LSL #2
000076  0049              LSLS     r1,r1,#1
000078  fbb1f0f0          UDIV     r0,r1,r0
00007c  1d40              ADDS     r0,r0,#5
00007e  b286              UXTH     r6,r0
                  |L2.128|
;;;226        }
;;;227        
;;;228        /* Remove the flaoting point */
;;;229        tmp = tmp/10;  
000080  200a              MOVS     r0,#0xa
000082  fbb6f6f0          UDIV     r6,r6,r0
;;;230          
;;;231        /* Check the parity of the divider */
;;;232        i2sodd = (u16)(tmp & (u16)0x0001);
000086  f0060801          AND      r8,r6,#1
;;;233       
;;;234        /* Compute the i2sdiv prescaler */
;;;235        i2sdiv = (u16)((tmp - i2sodd) / 2);
00008a  eba60008          SUB      r0,r6,r8
00008e  f3c0074f          UBFX     r7,r0,#1,#16
;;;236       
;;;237        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;238        i2sodd = (u16) (i2sodd << 8);
000092  f64f70ff          MOV      r0,#0xffff
000096  ea002808          AND      r8,r0,r8,LSL #8
                  |L2.154|
;;;239      }
;;;240      
;;;241      /* Test if the divider is 1 or 0 */
;;;242      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
00009a  2f02              CMP      r7,#2
00009c  db01              BLT      |L2.162|
00009e  2fff              CMP      r7,#0xff
0000a0  dd02              BLE      |L2.168|
                  |L2.162|
;;;243      {
;;;244        /* Set the default values */
;;;245        i2sdiv = 2;
0000a2  2702              MOVS     r7,#2
;;;246        i2sodd = 0;
0000a4  f04f0800          MOV      r8,#0
                  |L2.168|
;;;247      }
;;;248    
;;;249      /* Write to SPIx I2SPR register the computed value */
;;;250      SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
0000a8  ea470008          ORR      r0,r7,r8
0000ac  88e1              LDRH     r1,[r4,#6]
0000ae  4308              ORRS     r0,r0,r1
0000b0  8428              STRH     r0,[r5,#0x20]
;;;251     
;;;252      /* Configure the I2S with the SPI_InitStruct values */
;;;253      tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
0000b2  8820              LDRH     r0,[r4,#0]
0000b4  f4406000          ORR      r0,r0,#0x800
0000b8  8861              LDRH     r1,[r4,#2]
0000ba  4308              ORRS     r0,r0,r1
0000bc  88a1              LDRH     r1,[r4,#4]
0000be  4308              ORRS     r0,r0,r1
0000c0  8961              LDRH     r1,[r4,#0xa]
0000c2  4308              ORRS     r0,r0,r1
0000c4  ea400909          ORR      r9,r0,r9
;;;254                      I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
;;;255                      I2S_InitStruct->I2S_CPOL);
;;;256     
;;;257      /* Write to SPIx I2SCFGR */  
;;;258      SPIx->I2SCFGR = tmpreg;                                    
0000c8  f8a5901c          STRH     r9,[r5,#0x1c]
;;;259    }
0000cc  b006              ADD      sp,sp,#0x18
0000ce  e8bd87f0          POP      {r4-r10,pc}
;;;260    
                          ENDP


                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;309    *******************************************************************************/
;;;310    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;311    {
;;;312    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;313      /* Initialize the I2S_Mode member */
;;;314      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;315      
;;;316      /* Initialize the I2S_Standard member */
;;;317      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;318      
;;;319      /* Initialize the I2S_DataFormat member */
;;;320      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;321      
;;;322      /* Initialize the I2S_MCLKOutput member */
;;;323      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;324      
;;;325      /* Initialize the I2S_AudioFreq member */
;;;326      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  8101              STRH     r1,[r0,#8]
;;;327      
;;;328      /* Initialize the I2S_CPOL member */
;;;329      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8141              STRH     r1,[r0,#0xa]
;;;330    }
000012  4770              BX       lr
;;;331    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;703    *******************************************************************************/
;;;704    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, u16 SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;705    {
;;;706      /* Check the parameters */
;;;707      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;708      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;709    
;;;710      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L4.16|
;;;711      {
;;;712        /* Set the Tx only mode */
;;;713        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;714      }
;;;715      else
;;;716      {
;;;717        /* Set the Rx only mode */
;;;718        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L4.26|
;;;719      }
;;;720    }
00001a  4770              BX       lr
;;;721    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;618    *******************************************************************************/
;;;619    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;620    {
;;;621      /* Check the parameters */
;;;622      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;623      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;624    
;;;625      if (NewState != DISABLE)
;;;626      {
;;;627        /* Enable the selected SPI CRC calculation */
;;;628        SPIx->CR1 |= CR1_CRCEN_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;629      }
;;;630      else
;;;631      {
;;;632        /* Disable the selected SPI CRC calculation */
;;;633        SPIx->CR1 &= CR1_CRCEN_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L5.22|
;;;634      }
;;;635    }
000016  4770              BX       lr
;;;636    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;341    *******************************************************************************/
;;;342    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;343    {
;;;344      /* Check the parameters */
;;;345      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;346      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;347    
;;;348      if (NewState != DISABLE)
;;;349      {
;;;350        /* Enable the selected SPI peripheral */
;;;351        SPIx->CR1 |= CR1_SPE_Set;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;352      }
;;;353      else
;;;354      {
;;;355        /* Disable the selected SPI peripheral */
;;;356        SPIx->CR1 &= CR1_SPE_Reset;
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;357      }
;;;358    }
000016  4770              BX       lr
;;;359    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;578    *******************************************************************************/
;;;579    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, u16 SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;580    {
;;;581      /* Check the parameters */
;;;582      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;583      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;584    
;;;585      /* Clear DFF bit */
;;;586      SPIx->CR1 &= (u16)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;587      /* Set new DFF bit value */
;;;588      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;589    }
000010  4770              BX       lr
;;;590    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;649    *******************************************************************************/
;;;650    u16 SPI_GetCRC(SPI_TypeDef* SPIx, u8 SPI_CRC)
000000  4602              MOV      r2,r0
;;;651    {
;;;652      u16 crcreg = 0;
000002  2000              MOVS     r0,#0
;;;653    
;;;654      /* Check the parameters */
;;;655      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;656      assert_param(IS_SPI_CRC(SPI_CRC));
;;;657    
;;;658      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L8.12|
;;;659      {
;;;660        /* Get the Tx CRC register */
;;;661        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L8.14|
                  |L8.12|
;;;662      }
;;;663      else
;;;664      {
;;;665        /* Get the Rx CRC register */
;;;666        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L8.14|
;;;667      }
;;;668    
;;;669      /* Return the selected CRC register */
;;;670      return crcreg;
;;;671    }
00000e  4770              BX       lr
;;;672    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;680    *******************************************************************************/
;;;681    u16 SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;682    {
;;;683      /* Check the parameters */
;;;684      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;685      
;;;686      /* Return the CRC polynomial register */
;;;687      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;688    }
000004  4770              BX       lr
;;;689    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;782    *******************************************************************************/
;;;783    void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
000000  2920              CMP      r1,#0x20
;;;784    {
;;;785      /* Check the parameters */
;;;786      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;787      assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;788        
;;;789      /* SPI_FLAG_MODF flag clear */
;;;790      if(SPI_I2S_FLAG == SPI_FLAG_MODF)
000002  d105              BNE      |L10.16|
;;;791      {
;;;792        /* Read SR register */
;;;793        (void)SPIx->SR;
000004  8902              LDRH     r2,[r0,#8]
;;;794        
;;;795        /* Write on CR1 register */
;;;796        SPIx->CR1 |= CR1_SPE_Set; 
000006  8802              LDRH     r2,[r0,#0]
000008  f0420240          ORR      r2,r2,#0x40
00000c  8002              STRH     r2,[r0,#0]
00000e  e007              B        |L10.32|
                  |L10.16|
;;;797      }
;;;798      /* SPI_I2S_FLAG_OVR flag or I2S_FLAG_UDR flag clear */
;;;799      else if ((SPI_I2S_FLAG == SPI_I2S_FLAG_OVR) || (SPI_I2S_FLAG == I2S_FLAG_UDR))  
000010  2940              CMP      r1,#0x40
000012  d001              BEQ      |L10.24|
000014  2908              CMP      r1,#8
000016  d101              BNE      |L10.28|
                  |L10.24|
;;;800      {
;;;801        /* Read SR register  (Before clearing OVR flag, it is mandatory to read 
;;;802           SPI_I2S_DR register)*/
;;;803        (void)SPIx->SR;
000018  8902              LDRH     r2,[r0,#8]
00001a  e001              B        |L10.32|
                  |L10.28|
;;;804      }
;;;805      else /* SPI_FLAG_CRCERR flag clear */
;;;806      {
;;;807        /* Clear the selected SPI flag */
;;;808        SPIx->SR = (u16)~SPI_I2S_FLAG;
00001c  43ca              MVNS     r2,r1
00001e  8102              STRH     r2,[r0,#8]
                  |L10.32|
;;;809      }
;;;810    }
000020  4770              BX       lr
;;;811    
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;879    *******************************************************************************/
;;;880    void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;881    {
;;;882      u16 itpos = 0;
000002  2200              MOVS     r2,#0
;;;883    
;;;884      /* Check the parameters */
;;;885      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;886      assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;887    
;;;888      /* SPI_IT_MODF pending bit clear */
;;;889      if(SPI_I2S_IT == SPI_IT_MODF)
000004  2955              CMP      r1,#0x55
000006  d105              BNE      |L11.20|
;;;890      {
;;;891        /* Read SR register */
;;;892        (void)SPIx->SR;
000008  8903              LDRH     r3,[r0,#8]
;;;893        /* Write on CR1 register */
;;;894        SPIx->CR1 |= CR1_SPE_Set; 
00000a  8803              LDRH     r3,[r0,#0]
00000c  f0430340          ORR      r3,r3,#0x40
000010  8003              STRH     r3,[r0,#0]
000012  e00c              B        |L11.46|
                  |L11.20|
;;;895      }
;;;896      /* SPI_I2S_IT_OVR or I2S_IT_UDR pending bit clear */ 
;;;897      else if((SPI_I2S_IT == SPI_I2S_IT_OVR) || (SPI_I2S_IT == I2S_IT_UDR))    
000014  2956              CMP      r1,#0x56
000016  d001              BEQ      |L11.28|
000018  2953              CMP      r1,#0x53
00001a  d101              BNE      |L11.32|
                  |L11.28|
;;;898      {
;;;899        /* Read SR register */
;;;900        (void)(SPIx->SR);
00001c  8903              LDRH     r3,[r0,#8]
00001e  e006              B        |L11.46|
                  |L11.32|
;;;901      }  
;;;902      else   /* SPI_IT_CRCERR pending bit clear */
;;;903      {
;;;904        /* Get the SPI/I2S IT index */
;;;905        itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
000020  f001040f          AND      r4,r1,#0xf
000024  2301              MOVS     r3,#1
000026  40a3              LSLS     r3,r3,r4
000028  b29a              UXTH     r2,r3
;;;906        /* Clear the selected SPI/I2S interrupt pending bits */
;;;907        SPIx->SR = (u16)~itpos;
00002a  43d3              MVNS     r3,r2
00002c  8103              STRH     r3,[r0,#8]
                  |L11.46|
;;;908      }
;;;909    }
00002e  bd10              POP      {r4,pc}
;;;910    
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;449    *******************************************************************************/
;;;450    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, u16 SPI_I2S_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L12.10|
;;;451    {
;;;452      /* Check the parameters */
;;;453      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;454      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;455      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;456    
;;;457      if (NewState != DISABLE)
;;;458      {
;;;459        /* Enable the selected SPI/I2S DMA requests */
;;;460        SPIx->CR2 |= SPI_I2S_DMAReq;
000002  8883              LDRH     r3,[r0,#4]
000004  430b              ORRS     r3,r3,r1
000006  8083              STRH     r3,[r0,#4]
000008  e002              B        |L12.16|
                  |L12.10|
;;;461      }
;;;462      else
;;;463      {
;;;464        /* Disable the selected SPI/I2S DMA requests */
;;;465        SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
00000a  8883              LDRH     r3,[r0,#4]
00000c  438b              BICS     r3,r3,r1
00000e  8083              STRH     r3,[r0,#4]
                  |L12.16|
;;;466      }
;;;467    }
000010  4770              BX       lr
;;;468    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;64     *******************************************************************************/
;;;65     void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;66     {
000002  4604              MOV      r4,r0
;;;67       /* Check the parameters */
;;;68       assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;69       
;;;70       switch (*(u32*)&SPIx)
000004  4814              LDR      r0,|L13.88|
000006  4420              ADD      r0,r0,r4
000008  b178              CBZ      r0,|L13.42|
00000a  f5b06f80          CMP      r0,#0x400
00000e  d016              BEQ      |L13.62|
000010  f5b04f78          CMP      r0,#0xf800
000014  d11d              BNE      |L13.82|
;;;71       {
;;;72         case SPI1_BASE:
;;;73           /* Enable SPI1 reset state */
;;;74           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
000016  2101              MOVS     r1,#1
000018  0308              LSLS     r0,r1,#12
00001a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;75           /* Release SPI1 from reset state */
;;;76           RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
00001e  2100              MOVS     r1,#0
000020  f44f5080          MOV      r0,#0x1000
000024  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;77           break;
000028  e014              B        |L13.84|
                  |L13.42|
;;;78     
;;;79         case SPI2_BASE:
;;;80           /* Enable SPI2 reset state */
;;;81           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  0388              LSLS     r0,r1,#14
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;82           /* Release SPI2 from reset state */
;;;83           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
000032  2100              MOVS     r1,#0
000034  f44f4080          MOV      r0,#0x4000
000038  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;84           break;
00003c  e00a              B        |L13.84|
                  |L13.62|
;;;85     
;;;86         case SPI3_BASE:
;;;87           /* Enable SPI3 reset state */
;;;88           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003e  2101              MOVS     r1,#1
000040  03c8              LSLS     r0,r1,#15
000042  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;89           /* Release SPI3 from reset state */
;;;90           RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000046  2100              MOVS     r1,#0
000048  f44f4000          MOV      r0,#0x8000
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;91           break;
000050  e000              B        |L13.84|
                  |L13.82|
;;;92     
;;;93         default:
;;;94           break;
000052  bf00              NOP      
                  |L13.84|
000054  bf00              NOP                            ;77
;;;95       }
;;;96     }
000056  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  |L13.88|
                          DCD      0xbfffc800

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;741    *******************************************************************************/
;;;742    FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, u16 SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;743    {
;;;744      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;745    
;;;746      /* Check the parameters */
;;;747      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;748      assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;749    
;;;750      /* Check the status of the specified SPI/I2S flag */
;;;751      if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L14.14|
;;;752      {
;;;753        /* SPI_I2S_FLAG is set */
;;;754        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;755      }
;;;756      else
;;;757      {
;;;758        /* SPI_I2S_FLAG is reset */
;;;759        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;760      }
;;;761      /* Return the SPI_I2S_FLAG status */
;;;762      return  bitstatus;
;;;763      }
000010  4770              BX       lr
;;;764    
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;829    *******************************************************************************/
;;;830    ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;831    {
000002  4602              MOV      r2,r0
;;;832      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;833      u16 itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;834    
;;;835      /* Check the parameters */
;;;836      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;837      assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;838    
;;;839      /* Get the SPI/I2S IT index */
;;;840      itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;841    
;;;842      /* Get the SPI/I2S IT mask */
;;;843      itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;844      /* Set the IT mask */
;;;845      itmask = (u16)((u16)0x01 << itmask);
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;846      /* Get the SPI_I2S_IT enable bit status */
;;;847      enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;848    
;;;849      /* Check the status of the specified SPI/I2S interrupt */
;;;850      if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4026              ANDS     r6,r6,r4
000028  b116              CBZ      r6,|L15.48|
00002a  b10d              CBZ      r5,|L15.48|
;;;851      {
;;;852        /* SPI_I2S_IT is set */
;;;853        bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L15.50|
                  |L15.48|
;;;854      }
;;;855      else
;;;856      {
;;;857        /* SPI_I2S_IT is reset */
;;;858        bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L15.50|
;;;859      }
;;;860      /* Return the SPI_I2S_IT status */
;;;861      return bitstatus;
;;;862    }
000032  bdf0              POP      {r4-r7,pc}
;;;863    
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;405    *******************************************************************************/
;;;406    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, u8 SPI_I2S_IT, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;407    {
;;;408      u16 itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;409    
;;;410      /* Check the parameters */
;;;411      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;412      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;413      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;414    
;;;415      /* Get the SPI/I2S IT index */
;;;416      itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;417      /* Set the IT mask */
;;;418      itmask = (u16)((u16)1 << itpos);
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;419    
;;;420      if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L16.24|
;;;421      {
;;;422        /* Enable the selected SPI/I2S interrupt */
;;;423        SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e002              B        |L16.30|
                  |L16.24|
;;;424      }
;;;425      else
;;;426      {
;;;427        /* Disable the selected SPI/I2S interrupt */
;;;428        SPIx->CR2 &= (u16)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  439d              BICS     r5,r5,r3
00001c  8085              STRH     r5,[r0,#4]
                  |L16.30|
;;;429      }
;;;430    }
00001e  bd30              POP      {r4,r5,pc}
;;;431    
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;498    *******************************************************************************/
;;;499    u16 SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;500    {
;;;501      /* Check the parameters */
;;;502      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;503      
;;;504      /* Return the data in the DR register */
;;;505      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;506    }
000004  4770              BX       lr
;;;507    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;479    *******************************************************************************/
;;;480    void SPI_I2S_SendData(SPI_TypeDef* SPIx, u16 Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;484      
;;;485      /* Write in the DR register the data to be sent */
;;;486      SPIx->DR = Data;
;;;487    }
000002  4770              BX       lr
;;;488    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;109    ******************************************************************************/
;;;110    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;111    {
;;;112      u16 tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;113      
;;;114      /* check the parameters */
;;;115      assert_param(IS_SPI_ALL_PERIPH(SPIx));   
;;;116      
;;;117      /* Check the SPI parameters */
;;;118      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;119      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;120      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;121      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;122      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;123      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;124      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;125      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;126      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;127    
;;;128    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;129      /* Get the SPIx CR1 value */
;;;130      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;131      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;132      tmpreg &= CR1_CLEAR_Mask;
000006  f4025241          AND      r2,r2,#0x3040
;;;133      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;134         master/salve mode, CPOL and CPHA */
;;;135      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;136      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;137      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;138      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;139      /* Set CPOL bit according to SPI_CPOL value */
;;;140      /* Set CPHA bit according to SPI_CPHA value */
;;;141      tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;142                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;143                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;144                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;145      /* Write to SPIx CR1 */
;;;146      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;147      
;;;148      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;149      SPIx->I2SCFGR &= SPI_Mode_Select;		
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;150    
;;;151    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;152      /* Write to SPIx CRCPOLY */
;;;153      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;154    }
00003a  bd10              POP      {r4,pc}
;;;155    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;520    *******************************************************************************/
;;;521    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, u16 SPI_NSSInternalSoft)
000000  f64f62ff          MOV      r2,#0xfeff
;;;522    {
;;;523      /* Check the parameters */
;;;524      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;525      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;526    
;;;527      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  4291              CMP      r1,r2
000006  d004              BEQ      |L20.18|
;;;528      {
;;;529        /* Set NSS pin internally by software */
;;;530        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L20.28|
                  |L20.18|
;;;531      }
;;;532      else
;;;533      {
;;;534        /* Reset NSS pin internally by software */
;;;535        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L20.28|
;;;536      }
;;;537    }
00001c  4770              BX       lr
;;;538    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;548    *******************************************************************************/
;;;549    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;550    {
;;;551      /* Check the parameters */
;;;552      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;553      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;554    
;;;555      if (NewState != DISABLE)
;;;556      {
;;;557        /* Enable the selected SPI SS output */
;;;558        SPIx->CR2 |= CR2_SSOE_Set;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L21.22|
                  |L21.12|
;;;559      }
;;;560      else
;;;561      {
;;;562        /* Disable the selected SPI SS output */
;;;563        SPIx->CR2 &= CR2_SSOE_Reset;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L21.22|
;;;564      }
;;;565    }
000016  4770              BX       lr
;;;566    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;269    *******************************************************************************/
;;;270    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;271    {
;;;272    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;273      /* Initialize the SPI_Direction member */
;;;274      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;275    
;;;276      /* initialize the SPI_Mode member */
;;;277      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;278    
;;;279      /* initialize the SPI_DataSize member */
;;;280      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;281    
;;;282      /* Initialize the SPI_CPOL member */
;;;283      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;284    
;;;285      /* Initialize the SPI_CPHA member */
;;;286      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;287    
;;;288      /* Initialize the SPI_NSS member */
;;;289      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;290    
;;;291      /* Initialize the SPI_BaudRatePrescaler member */
;;;292      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;293    
;;;294      /* Initialize the SPI_FirstBit member */
;;;295      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;296    
;;;297      /* Initialize the SPI_CRCPolynomial member */
;;;298      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;299    }
000016  4770              BX       lr
;;;300    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;598    *******************************************************************************/
;;;599    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;600    {
;;;601      /* Check the parameters */
;;;602      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;603      
;;;604      /* Enable the selected SPI CRC transmission */
;;;605      SPIx->CR1 |= CR1_CRCNext_Set;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;606    }
000008  4770              BX       lr
;;;607    
                          ENDP

