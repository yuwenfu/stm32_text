; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_nvic.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_nvic.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_nvic.crf lib\src\stm32f10x_nvic.c]
                          THUMB

                          AREA ||i.NVIC_BASEPRICONFIG||, CODE, READONLY, ALIGN=1

                  NVIC_BASEPRICONFIG PROC
;;;245    *******************************************************************************/
;;;246    void NVIC_BASEPRICONFIG(u32 NewPriority)
000000  b510              PUSH     {r4,lr}
;;;247    {
000002  4604              MOV      r4,r0
;;;248      /* Check the parameters */
;;;249      assert_param(IS_NVIC_BASE_PRI(NewPriority));
;;;250      
;;;251      __BASEPRICONFIG(NewPriority << 0x04);
000004  0120              LSLS     r0,r4,#4
000006  f7fffffe          BL       __BASEPRICONFIG
;;;252    }
00000a  bd10              POP      {r4,pc}
;;;253    
                          ENDP


                          AREA ||i.NVIC_ClearIRQChannelPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_ClearIRQChannelPendingBit PROC
;;;333    *******************************************************************************/
;;;334    void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
000000  f000021f          AND      r2,r0,#0x1f
;;;335    {
;;;336      /* Check the parameters */
;;;337      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;338      
;;;339      NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a02              LDR      r2,|L2.20|
00000a  1143              ASRS     r3,r0,#5
00000c  f8421023          STR      r1,[r2,r3,LSL #2]
;;;340    }
000010  4770              BX       lr
;;;341    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      0xe000e280

                          AREA ||i.NVIC_ClearSystemHandlerPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_ClearSystemHandlerPendingBit PROC
;;;642    *******************************************************************************/
;;;643    void NVIC_ClearSystemHandlerPendingBit(u32 SystemHandler)
000000  b510              PUSH     {r4,lr}
;;;644    {
;;;645      u32 tmp = 0x00;
000002  2100              MOVS     r1,#0
;;;646    
;;;647      /* Check the parameters */
;;;648      assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
;;;649      
;;;650      /* Get the System Handler pending bit position */
;;;651      tmp = SystemHandler & (u32)0x1F;
000004  f000011f          AND      r1,r0,#0x1f
;;;652      /* Clear the corresponding System Handler pending bit */
;;;653      SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
000008  4a04              LDR      r2,|L3.28|
00000a  6812              LDR      r2,[r2,#0]
00000c  1e4b              SUBS     r3,r1,#1
00000e  2401              MOVS     r4,#1
000010  409c              LSLS     r4,r4,r3
000012  4322              ORRS     r2,r2,r4
000014  4b01              LDR      r3,|L3.28|
000016  601a              STR      r2,[r3,#0]
;;;654    }
000018  bd10              POP      {r4,pc}
;;;655    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_DeInit||, CODE, READONLY, ALIGN=2

                  NVIC_DeInit PROC
;;;38     *******************************************************************************/
;;;39     void NVIC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;40     {
;;;41       u32 index = 0;
;;;42       
;;;43       NVIC->ICER[0] = 0xFFFFFFFF;
000002  1e41              SUBS     r1,r0,#1
000004  4a0c              LDR      r2,|L4.56|
000006  6011              STR      r1,[r2,#0]
;;;44       NVIC->ICER[1] = 0x0FFFFFFF;
000008  090a              LSRS     r2,r1,#4
00000a  490b              LDR      r1,|L4.56|
00000c  3980              SUBS     r1,r1,#0x80
00000e  f8c12084          STR      r2,[r1,#0x84]
;;;45       NVIC->ICPR[0] = 0xFFFFFFFF;
000012  1e41              SUBS     r1,r0,#1
000014  f04f22e0          MOV      r2,#0xe000e000
000018  f8c21280          STR      r1,[r2,#0x280]
;;;46       NVIC->ICPR[1] = 0x0FFFFFFF;
00001c  090a              LSRS     r2,r1,#4
00001e  4907              LDR      r1,|L4.60|
000020  600a              STR      r2,[r1,#0]
;;;47       
;;;48       for(index = 0; index < 0x0F; index++)
000022  bf00              NOP      
000024  e004              B        |L4.48|
                  |L4.38|
;;;49       {
;;;50          NVIC->IPR[index] = 0x00000000;
000026  2200              MOVS     r2,#0
000028  4905              LDR      r1,|L4.64|
00002a  f8412020          STR      r2,[r1,r0,LSL #2]
00002e  1c40              ADDS     r0,r0,#1              ;48
                  |L4.48|
000030  280f              CMP      r0,#0xf               ;48
000032  d3f8              BCC      |L4.38|
;;;51       } 
;;;52     }
000034  4770              BX       lr
;;;53     
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      0xe000e180
                  |L4.60|
                          DCD      0xe000e284
                  |L4.64|
                          DCD      0xe000e400

                          AREA ||i.NVIC_GenerateCoreReset||, CODE, READONLY, ALIGN=2

                  NVIC_GenerateCoreReset PROC
;;;443    *******************************************************************************/
;;;444    void NVIC_GenerateCoreReset(void)
000000  4801              LDR      r0,|L5.8|
;;;445    {
;;;446      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
000002  4902              LDR      r1,|L5.12|
000004  6008              STR      r0,[r1,#0]
;;;447    }
000006  4770              BX       lr
;;;448    
                          ENDP

                  |L5.8|
                          DCD      0x05fa0001
                  |L5.12|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_GenerateSystemReset||, CODE, READONLY, ALIGN=2

                  NVIC_GenerateSystemReset PROC
;;;430    *******************************************************************************/
;;;431    void NVIC_GenerateSystemReset(void)
000000  4801              LDR      r0,|L6.8|
;;;432    {
;;;433      SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
000002  4902              LDR      r1,|L6.12|
000004  6008              STR      r0,[r1,#0]
;;;434    }
000006  4770              BX       lr
;;;435    
                          ENDP

                  |L6.8|
                          DCD      0x05fa0004
                  |L6.12|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_GetBASEPRI||, CODE, READONLY, ALIGN=1

                  NVIC_GetBASEPRI PROC
;;;261    *******************************************************************************/
;;;262    u32 NVIC_GetBASEPRI(void)
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264      return (__GetBASEPRI());
000002  f7fffffe          BL       __GetBASEPRI
;;;265    }
000006  bd10              POP      {r4,pc}
;;;266    
                          ENDP


                          AREA ||i.NVIC_GetCPUID||, CODE, READONLY, ALIGN=2

                  NVIC_GetCPUID PROC
;;;394    *******************************************************************************/
;;;395    u32 NVIC_GetCPUID(void)
000000  4801              LDR      r0,|L8.8|
;;;396    {
;;;397      return (SCB->CPUID);
000002  6800              LDR      r0,[r0,#0]
;;;398    }
000004  4770              BX       lr
;;;399    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0xe000ed00

                          AREA ||i.NVIC_GetCurrentActiveHandler||, CODE, READONLY, ALIGN=2

                  NVIC_GetCurrentActiveHandler PROC
;;;350    *******************************************************************************/
;;;351    u16 NVIC_GetCurrentActiveHandler(void)
000000  4802              LDR      r0,|L9.12|
;;;352    {
;;;353      return ((u16)(SCB->ICSR & (u32)0x3FF));
000002  6800              LDR      r0,[r0,#0]
000004  f3c00009          UBFX     r0,r0,#0,#10
;;;354    }
000008  4770              BX       lr
;;;355    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_GetCurrentPendingIRQChannel||, CODE, READONLY, ALIGN=2

                  NVIC_GetCurrentPendingIRQChannel PROC
;;;274    *******************************************************************************/
;;;275    u16 NVIC_GetCurrentPendingIRQChannel(void)
000000  4802              LDR      r0,|L10.12|
;;;276    {
;;;277      return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
000002  6800              LDR      r0,[r0,#0]
000004  f3c03009          UBFX     r0,r0,#12,#10
;;;278    }
000008  4770              BX       lr
;;;279    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_GetFaultAddress||, CODE, READONLY, ALIGN=2

                  NVIC_GetFaultAddress PROC
;;;761    *******************************************************************************/
;;;762    u32 NVIC_GetFaultAddress(u32 SystemHandler)
000000  4601              MOV      r1,r0
;;;763    {
;;;764      u32 faultaddress = 0x00;
000002  2000              MOVS     r0,#0
;;;765      u32 tmp = 0x00;
000004  2200              MOVS     r2,#0
;;;766    
;;;767      /* Check the parameters */
;;;768      assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
;;;769      
;;;770      tmp = (SystemHandler >> 0x16) & (u32)0x01;
000006  f3c15280          UBFX     r2,r1,#22,#1
;;;771    
;;;772      if (tmp == 0x00)
00000a  b912              CBNZ     r2,|L11.18|
;;;773      {
;;;774        faultaddress = SCB->MMFAR;
00000c  4b03              LDR      r3,|L11.28|
00000e  6818              LDR      r0,[r3,#0]
000010  e002              B        |L11.24|
                  |L11.18|
;;;775      }
;;;776      else
;;;777      {
;;;778        faultaddress = SCB->BFAR;
000012  4b02              LDR      r3,|L11.28|
000014  1d1b              ADDS     r3,r3,#4
000016  6818              LDR      r0,[r3,#0]
                  |L11.24|
;;;779      }
;;;780      return faultaddress;
;;;781    }
000018  4770              BX       lr
;;;782    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0xe000ed34

                          AREA ||i.NVIC_GetFaultHandlerSources||, CODE, READONLY, ALIGN=2

                  NVIC_GetFaultHandlerSources PROC
;;;714    *******************************************************************************/
;;;715    u32 NVIC_GetFaultHandlerSources(u32 SystemHandler)
000000  b530              PUSH     {r4,r5,lr}
;;;716    {
000002  4601              MOV      r1,r0
;;;717      u32 faultsources = 0x00;
000004  2000              MOVS     r0,#0
;;;718      u32 tmpreg = 0x00, tmppos = 0x00;
000006  2200              MOVS     r2,#0
000008  2300              MOVS     r3,#0
;;;719    
;;;720      /* Check the parameters */
;;;721      assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
;;;722      
;;;723      tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
00000a  f3c14281          UBFX     r2,r1,#18,#2
;;;724      tmppos = (SystemHandler >> 0x14) & (u32)0x03;
00000e  f3c15301          UBFX     r3,r1,#20,#2
;;;725    
;;;726      if (tmpreg == 0x00)
000012  b912              CBNZ     r2,|L12.26|
;;;727      {
;;;728        faultsources = SCB->HFSR;
000014  4c0a              LDR      r4,|L12.64|
000016  6820              LDR      r0,[r4,#0]
000018  e011              B        |L12.62|
                  |L12.26|
;;;729      }
;;;730      else if (tmpreg == 0x01)
00001a  2a01              CMP      r2,#1
00001c  d10c              BNE      |L12.56|
;;;731      {
;;;732        faultsources = SCB->CFSR >> (tmppos * 0x08);
00001e  4c08              LDR      r4,|L12.64|
000020  1f24              SUBS     r4,r4,#4
000022  6824              LDR      r4,[r4,#0]
000024  00dd              LSLS     r5,r3,#3
000026  fa24f005          LSR      r0,r4,r5
;;;733        if (tmppos != 0x02)
00002a  2b02              CMP      r3,#2
00002c  d002              BEQ      |L12.52|
;;;734        {
;;;735          faultsources &= (u32)0x0F;
00002e  f000000f          AND      r0,r0,#0xf
000032  e004              B        |L12.62|
                  |L12.52|
;;;736        }
;;;737        else
;;;738        {
;;;739          faultsources &= (u32)0xFF;
000034  b2c0              UXTB     r0,r0
000036  e002              B        |L12.62|
                  |L12.56|
;;;740        }
;;;741      }
;;;742      else
;;;743      {
;;;744        faultsources = SCB->DFSR;
000038  4c01              LDR      r4,|L12.64|
00003a  1d24              ADDS     r4,r4,#4
00003c  6820              LDR      r0,[r4,#0]
                  |L12.62|
;;;745      }
;;;746      return faultsources;
;;;747    }
00003e  bd30              POP      {r4,r5,pc}
;;;748    
                          ENDP

                  |L12.64|
                          DCD      0xe000ed2c

                          AREA ||i.NVIC_GetIRQChannelActiveBitStatus||, CODE, READONLY, ALIGN=2

                  NVIC_GetIRQChannelActiveBitStatus PROC
;;;364    *******************************************************************************/
;;;365    ITStatus NVIC_GetIRQChannelActiveBitStatus(u8 NVIC_IRQChannel)
000000  b510              PUSH     {r4,lr}
;;;366    {
000002  4601              MOV      r1,r0
;;;367      ITStatus activeirqstatus = RESET;
000004  2000              MOVS     r0,#0
;;;368      u32 tmp = 0x00;
000006  2200              MOVS     r2,#0
;;;369    
;;;370      /* Check the parameters */
;;;371      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;372      
;;;373      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
000008  f001041f          AND      r4,r1,#0x1f
00000c  2301              MOVS     r3,#1
00000e  fa03f204          LSL      r2,r3,r4
;;;374    
;;;375      if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
000012  4b05              LDR      r3,|L13.40|
000014  114c              ASRS     r4,r1,#5
000016  f8533024          LDR      r3,[r3,r4,LSL #2]
00001a  4013              ANDS     r3,r3,r2
00001c  4293              CMP      r3,r2
00001e  d101              BNE      |L13.36|
;;;376      {
;;;377        activeirqstatus = SET;
000020  2001              MOVS     r0,#1
000022  e000              B        |L13.38|
                  |L13.36|
;;;378      }
;;;379      else
;;;380      {
;;;381        activeirqstatus = RESET;
000024  2000              MOVS     r0,#0
                  |L13.38|
;;;382      }
;;;383      return activeirqstatus;
;;;384    }
000026  bd10              POP      {r4,pc}
;;;385    
                          ENDP

                  |L13.40|
                          DCD      0xe000e300

                          AREA ||i.NVIC_GetIRQChannelPendingBitStatus||, CODE, READONLY, ALIGN=2

                  NVIC_GetIRQChannelPendingBitStatus PROC
;;;288    *******************************************************************************/
;;;289    ITStatus NVIC_GetIRQChannelPendingBitStatus(u8 NVIC_IRQChannel)
000000  b510              PUSH     {r4,lr}
;;;290    {
000002  4601              MOV      r1,r0
;;;291      ITStatus pendingirqstatus = RESET;
000004  2000              MOVS     r0,#0
;;;292      u32 tmp = 0x00;
000006  2200              MOVS     r2,#0
;;;293      
;;;294      /* Check the parameters */
;;;295      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;296      
;;;297      tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
000008  f001041f          AND      r4,r1,#0x1f
00000c  2301              MOVS     r3,#1
00000e  fa03f204          LSL      r2,r3,r4
;;;298    
;;;299      if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
000012  4b05              LDR      r3,|L14.40|
000014  114c              ASRS     r4,r1,#5
000016  f8533024          LDR      r3,[r3,r4,LSL #2]
00001a  4013              ANDS     r3,r3,r2
00001c  4293              CMP      r3,r2
00001e  d101              BNE      |L14.36|
;;;300      {
;;;301        pendingirqstatus = SET;
000020  2001              MOVS     r0,#1
000022  e000              B        |L14.38|
                  |L14.36|
;;;302      }
;;;303      else
;;;304      {
;;;305        pendingirqstatus = RESET;
000024  2000              MOVS     r0,#0
                  |L14.38|
;;;306      }
;;;307      return pendingirqstatus;
;;;308    }
000026  bd10              POP      {r4,pc}
;;;309    
                          ENDP

                  |L14.40|
                          DCD      0xe000e200

                          AREA ||i.NVIC_GetSystemHandlerActiveBitStatus||, CODE, READONLY, ALIGN=2

                  NVIC_GetSystemHandlerActiveBitStatus PROC
;;;673    *******************************************************************************/
;;;674    ITStatus NVIC_GetSystemHandlerActiveBitStatus(u32 SystemHandler)
000000  b510              PUSH     {r4,lr}
;;;675    {
000002  4602              MOV      r2,r0
;;;676      ITStatus bitstatus  = RESET;
000004  2000              MOVS     r0,#0
;;;677    
;;;678      u32 tmp = 0x00, tmppos = 0x00;
000006  2300              MOVS     r3,#0
000008  2100              MOVS     r1,#0
;;;679    
;;;680      /* Check the parameters */
;;;681      assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
;;;682      
;;;683      tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
00000a  f3c23183          UBFX     r1,r2,#14,#4
;;;684    
;;;685      tmppos = (u32)0x01 << tmppos;
00000e  2401              MOVS     r4,#1
000010  fa04f101          LSL      r1,r4,r1
;;;686    
;;;687      tmp = SCB->SHCSR & tmppos;
000014  4c04              LDR      r4,|L15.40|
000016  6824              LDR      r4,[r4,#0]
000018  ea040301          AND      r3,r4,r1
;;;688    
;;;689      if (tmp == tmppos)
00001c  428b              CMP      r3,r1
00001e  d101              BNE      |L15.36|
;;;690      {
;;;691        bitstatus = SET;
000020  2001              MOVS     r0,#1
000022  e000              B        |L15.38|
                  |L15.36|
;;;692      }
;;;693      else
;;;694      {
;;;695        bitstatus = RESET;
000024  2000              MOVS     r0,#0
                  |L15.38|
;;;696      }
;;;697      return bitstatus;
;;;698    }
000026  bd10              POP      {r4,pc}
;;;699    
                          ENDP

                  |L15.40|
                          DCD      0xe000ed24

                          AREA ||i.NVIC_GetSystemHandlerPendingBitStatus||, CODE, READONLY, ALIGN=2

                  NVIC_GetSystemHandlerPendingBitStatus PROC
;;;578    *******************************************************************************/
;;;579    ITStatus NVIC_GetSystemHandlerPendingBitStatus(u32 SystemHandler)
000000  b510              PUSH     {r4,lr}
;;;580    {
000002  4602              MOV      r2,r0
;;;581      ITStatus bitstatus  = RESET;
000004  2000              MOVS     r0,#0
;;;582      u32 tmp = 0x00, tmppos = 0x00;
000006  2300              MOVS     r3,#0
000008  2100              MOVS     r1,#0
;;;583    
;;;584      /* Check the parameters */
;;;585      assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;586      
;;;587      tmppos = (SystemHandler >> 0x0A);
00000a  0a91              LSRS     r1,r2,#10
;;;588      tmppos &= (u32)0x0F;
00000c  f001010f          AND      r1,r1,#0xf
;;;589    
;;;590      tmppos = (u32)0x01 << tmppos;
000010  2401              MOVS     r4,#1
000012  fa04f101          LSL      r1,r4,r1
;;;591    
;;;592      tmp = SCB->SHCSR & tmppos;
000016  4c05              LDR      r4,|L16.44|
000018  6824              LDR      r4,[r4,#0]
00001a  ea040301          AND      r3,r4,r1
;;;593    
;;;594      if (tmp == tmppos)
00001e  428b              CMP      r3,r1
000020  d101              BNE      |L16.38|
;;;595      {
;;;596        bitstatus = SET;
000022  2001              MOVS     r0,#1
000024  e000              B        |L16.40|
                  |L16.38|
;;;597      }
;;;598      else
;;;599      {
;;;600        bitstatus = RESET;
000026  2000              MOVS     r0,#0
                  |L16.40|
;;;601      }
;;;602      return bitstatus;
;;;603    }
000028  bd10              POP      {r4,pc}
;;;604    
                          ENDP

00002a  0000              DCW      0x0000
                  |L16.44|
                          DCD      0xe000ed24

                          AREA ||i.NVIC_Init||, CODE, READONLY, ALIGN=2

                  NVIC_Init PROC
;;;121    *******************************************************************************/
;;;122    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;123    {
;;;124      u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2300              MOVS     r3,#0
;;;125      u32 tmppre = 0, tmpsub = 0x0F;
000008  2500              MOVS     r5,#0
00000a  240f              MOVS     r4,#0xf
;;;126    
;;;127      /* Check the parameters */
;;;128      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;129      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
;;;130      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;131      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;132        
;;;133      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
00000c  78c6              LDRB     r6,[r0,#3]
00000e  2e00              CMP      r6,#0
000010  d034              BEQ      |L17.124|
;;;134      {
;;;135        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;136        tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
000012  4e21              LDR      r6,|L17.152|
000014  6836              LDR      r6,[r6,#0]
000016  f40666e0          AND      r6,r6,#0x700
00001a  f5c666e0          RSB      r6,r6,#0x700
00001e  0a31              LSRS     r1,r6,#8
;;;137        tmppre = (0x4 - tmppriority);
000020  f1c10504          RSB      r5,r1,#4
;;;138        tmpsub = tmpsub >> tmppriority;
000024  40cc              LSRS     r4,r4,r1
;;;139        
;;;140        tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
000026  7846              LDRB     r6,[r0,#1]
000028  fa06f105          LSL      r1,r6,r5
;;;141        tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
00002c  7886              LDRB     r6,[r0,#2]
00002e  4026              ANDS     r6,r6,r4
000030  4331              ORRS     r1,r1,r6
;;;142    
;;;143        tmppriority = tmppriority << 0x04;
000032  0109              LSLS     r1,r1,#4
;;;144        tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
000034  7806              LDRB     r6,[r0,#0]
000036  07b6              LSLS     r6,r6,#30
000038  0ef6              LSRS     r6,r6,#27
00003a  40b1              LSLS     r1,r1,r6
;;;145        
;;;146        tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
00003c  4e17              LDR      r6,|L17.156|
00003e  7807              LDRB     r7,[r0,#0]
000040  10bf              ASRS     r7,r7,#2
000042  f8562027          LDR      r2,[r6,r7,LSL #2]
;;;147        tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
000046  7806              LDRB     r6,[r0,#0]
000048  07b6              LSLS     r6,r6,#30
00004a  0ef7              LSRS     r7,r6,#27
00004c  26ff              MOVS     r6,#0xff
00004e  fa06f307          LSL      r3,r6,r7
;;;148        tmpreg &= ~tmpmask;
000052  439a              BICS     r2,r2,r3
;;;149        tmppriority &= tmpmask;  
000054  4019              ANDS     r1,r1,r3
;;;150        tmpreg |= tmppriority;
000056  430a              ORRS     r2,r2,r1
;;;151    
;;;152        NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
000058  4e10              LDR      r6,|L17.156|
00005a  7807              LDRB     r7,[r0,#0]
00005c  10bf              ASRS     r7,r7,#2
00005e  f8462027          STR      r2,[r6,r7,LSL #2]
;;;153        
;;;154        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;155        NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
000062  7806              LDRB     r6,[r0,#0]
000064  f006071f          AND      r7,r6,#0x1f
000068  2601              MOVS     r6,#1
00006a  40be              LSLS     r6,r6,r7
00006c  7807              LDRB     r7,[r0,#0]
00006e  117f              ASRS     r7,r7,#5
000070  00bf              LSLS     r7,r7,#2
000072  f10727e0          ADD      r7,r7,#0xe000e000
000076  f8c76100          STR      r6,[r7,#0x100]
00007a  e00b              B        |L17.148|
                  |L17.124|
;;;156          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;157      }
;;;158      else
;;;159      {
;;;160        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;161        NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
00007c  7806              LDRB     r6,[r0,#0]
00007e  f006071f          AND      r7,r6,#0x1f
000082  2601              MOVS     r6,#1
000084  40be              LSLS     r6,r6,r7
000086  4f06              LDR      r7,|L17.160|
000088  f890c000          LDRB     r12,[r0,#0]
00008c  ea4f1c6c          ASR      r12,r12,#5
000090  f847602c          STR      r6,[r7,r12,LSL #2]
                  |L17.148|
;;;162          (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
;;;163      }
;;;164    }
000094  bdf0              POP      {r4-r7,pc}
;;;165    
                          ENDP

000096  0000              DCW      0x0000
                  |L17.152|
                          DCD      0xe000ed0c
                  |L17.156|
                          DCD      0xe000e400
                  |L17.160|
                          DCD      0xe000e180

                          AREA ||i.NVIC_PriorityGroupConfig||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;101    *******************************************************************************/
;;;102    void NVIC_PriorityGroupConfig(u32 NVIC_PriorityGroup)
000000  4902              LDR      r1,|L18.12|
;;;103    {
;;;104      /* Check the parameters */
;;;105      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;106      
;;;107      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;108      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4301              ORRS     r1,r1,r0
000004  4a02              LDR      r2,|L18.16|
000006  6011              STR      r1,[r2,#0]
;;;109    }
000008  4770              BX       lr
;;;110    
                          ENDP

00000a  0000              DCW      0x0000
                  |L18.12|
                          DCD      0x05fa0000
                  |L18.16|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_RESETFAULTMASK||, CODE, READONLY, ALIGN=1

                  NVIC_RESETFAULTMASK PROC
;;;230    *******************************************************************************/
;;;231    void NVIC_RESETFAULTMASK(void)
000000  b510              PUSH     {r4,lr}
;;;232    {
;;;233      __RESETFAULTMASK();
000002  f7fffffe          BL       __RESETFAULTMASK
;;;234    }
000006  bd10              POP      {r4,pc}
;;;235    
                          ENDP


                          AREA ||i.NVIC_RESETPRIMASK||, CODE, READONLY, ALIGN=1

                  NVIC_RESETPRIMASK PROC
;;;204    *******************************************************************************/
;;;205    void NVIC_RESETPRIMASK(void)
000000  b510              PUSH     {r4,lr}
;;;206    {
;;;207      __RESETPRIMASK();
000002  f7fffffe          BL       __RESETPRIMASK
;;;208    }
000006  bd10              POP      {r4,pc}
;;;209    
                          ENDP


                          AREA ||i.NVIC_SCBDeInit||, CODE, READONLY, ALIGN=2

                  NVIC_SCBDeInit PROC
;;;62     *******************************************************************************/
;;;63     void NVIC_SCBDeInit(void)
000000  2000              MOVS     r0,#0
;;;64     {
;;;65       u32 index = 0x00;
;;;66       
;;;67       SCB->ICSR = 0x0A000000;
000002  f04f6120          MOV      r1,#0xa000000
000006  4a11              LDR      r2,|L21.76|
000008  6011              STR      r1,[r2,#0]
;;;68       SCB->VTOR = 0x00000000;
00000a  2100              MOVS     r1,#0
00000c  1d12              ADDS     r2,r2,#4
00000e  6011              STR      r1,[r2,#0]
;;;69       SCB->AIRCR = AIRCR_VECTKEY_MASK;
000010  490f              LDR      r1,|L21.80|
000012  1d12              ADDS     r2,r2,#4
000014  6011              STR      r1,[r2,#0]
;;;70       SCB->SCR = 0x00000000;
000016  2100              MOVS     r1,#0
000018  1d12              ADDS     r2,r2,#4
00001a  6011              STR      r1,[r2,#0]
;;;71       SCB->CCR = 0x00000000;
00001c  1d12              ADDS     r2,r2,#4
00001e  6011              STR      r1,[r2,#0]
;;;72       for(index = 0; index < 0x03; index++)
000020  bf00              NOP      
000022  e005              B        |L21.48|
                  |L21.36|
;;;73       {
;;;74          SCB->SHPR[index] = 0;
000024  2200              MOVS     r2,#0
000026  4909              LDR      r1,|L21.76|
000028  3114              ADDS     r1,r1,#0x14
00002a  f8412020          STR      r2,[r1,r0,LSL #2]
00002e  1c40              ADDS     r0,r0,#1              ;72
                  |L21.48|
000030  2803              CMP      r0,#3                 ;72
000032  d3f7              BCC      |L21.36|
;;;75       }
;;;76       SCB->SHCSR = 0x00000000;
000034  2100              MOVS     r1,#0
000036  4a05              LDR      r2,|L21.76|
000038  3220              ADDS     r2,r2,#0x20
00003a  6011              STR      r1,[r2,#0]
;;;77       SCB->CFSR = 0xFFFFFFFF;
00003c  1e49              SUBS     r1,r1,#1
00003e  1d12              ADDS     r2,r2,#4
000040  6011              STR      r1,[r2,#0]
;;;78       SCB->HFSR = 0xFFFFFFFF;
000042  1d12              ADDS     r2,r2,#4
000044  6011              STR      r1,[r2,#0]
;;;79       SCB->DFSR = 0xFFFFFFFF;
000046  1d12              ADDS     r2,r2,#4
000048  6011              STR      r1,[r2,#0]
;;;80     }
00004a  4770              BX       lr
;;;81     
                          ENDP

                  |L21.76|
                          DCD      0xe000ed04
                  |L21.80|
                          DCD      0x05fa0000

                          AREA ||i.NVIC_SETFAULTMASK||, CODE, READONLY, ALIGN=1

                  NVIC_SETFAULTMASK PROC
;;;217    *******************************************************************************/
;;;218    void NVIC_SETFAULTMASK(void)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220      __SETFAULTMASK();
000002  f7fffffe          BL       __SETFAULTMASK
;;;221    }
000006  bd10              POP      {r4,pc}
;;;222    
                          ENDP


                          AREA ||i.NVIC_SETPRIMASK||, CODE, READONLY, ALIGN=1

                  NVIC_SETPRIMASK PROC
;;;191    *******************************************************************************/
;;;192    void NVIC_SETPRIMASK(void)
000000  b510              PUSH     {r4,lr}
;;;193    {
;;;194      __SETPRIMASK();
000002  f7fffffe          BL       __SETPRIMASK
;;;195    }
000006  bd10              POP      {r4,pc}
;;;196    
                          ENDP


                          AREA ||i.NVIC_SetIRQChannelPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_SetIRQChannelPendingBit PROC
;;;317    *******************************************************************************/
;;;318    void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
000000  4901              LDR      r1,|L24.8|
;;;319    {
;;;320      /* Check the parameters */
;;;321      assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
;;;322      
;;;323      *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
000002  6008              STR      r0,[r1,#0]
;;;324    }
000004  4770              BX       lr
;;;325    
                          ENDP

000006  0000              DCW      0x0000
                  |L24.8|
                          DCD      0xe000ef00

                          AREA ||i.NVIC_SetSystemHandlerPendingBit||, CODE, READONLY, ALIGN=2

                  NVIC_SetSystemHandlerPendingBit PROC
;;;617    *******************************************************************************/
;;;618    void NVIC_SetSystemHandlerPendingBit(u32 SystemHandler)
000000  2100              MOVS     r1,#0
;;;619    {
;;;620      u32 tmp = 0x00;
;;;621    
;;;622      /* Check the parameters */
;;;623      assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
;;;624      
;;;625      /* Get the System Handler pending bit position */
;;;626      tmp = SystemHandler & (u32)0x1F;
000002  f000011f          AND      r1,r0,#0x1f
;;;627      /* Set the corresponding System Handler pending bit */
;;;628      SCB->ICSR |= ((u32)0x01 << tmp);
000006  4a04              LDR      r2,|L25.24|
000008  6812              LDR      r2,[r2,#0]
00000a  2301              MOVS     r3,#1
00000c  408b              LSLS     r3,r3,r1
00000e  431a              ORRS     r2,r2,r3
000010  4b01              LDR      r3,|L25.24|
000012  601a              STR      r2,[r3,#0]
;;;629    }
000014  4770              BX       lr
;;;630    
                          ENDP

000016  0000              DCW      0x0000
                  |L25.24|
                          DCD      0xe000ed04

                          AREA ||i.NVIC_SetVectorTable||, CODE, READONLY, ALIGN=2

                  NVIC_SetVectorTable PROC
;;;413    *******************************************************************************/
;;;414    void NVIC_SetVectorTable(u32 NVIC_VectTab, u32 Offset)
000000  4a02              LDR      r2,|L26.12|
;;;415    { 
;;;416      /* Check the parameters */
;;;417      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;418      assert_param(IS_NVIC_OFFSET(Offset));  
;;;419       
;;;420      SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
000002  400a              ANDS     r2,r2,r1
000004  4302              ORRS     r2,r2,r0
000006  4b02              LDR      r3,|L26.16|
000008  601a              STR      r2,[r3,#0]
;;;421    }
00000a  4770              BX       lr
;;;422    
                          ENDP

                  |L26.12|
                          DCD      0x1fffff80
                  |L26.16|
                          DCD      0xe000ed08

                          AREA ||i.NVIC_StructInit||, CODE, READONLY, ALIGN=1

                  NVIC_StructInit PROC
;;;174    *******************************************************************************/
;;;175    void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
000000  2100              MOVS     r1,#0
;;;176    {
;;;177      /* NVIC_InitStruct members default value */
;;;178      NVIC_InitStruct->NVIC_IRQChannel = 0x00;
000002  7001              STRB     r1,[r0,#0]
;;;179      NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
000004  7041              STRB     r1,[r0,#1]
;;;180      NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
000006  7081              STRB     r1,[r0,#2]
;;;181      NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
000008  70c1              STRB     r1,[r0,#3]
;;;182    }
00000a  4770              BX       lr
;;;183    
                          ENDP


                          AREA ||i.NVIC_SystemHandlerConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemHandlerConfig PROC
;;;494    *******************************************************************************/
;;;495    void NVIC_SystemHandlerConfig(u32 SystemHandler, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;496    {
;;;497      u32 tmpreg = 0x00;
000002  2200              MOVS     r2,#0
;;;498    
;;;499      /* Check the parameters */
;;;500      assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
;;;501      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;502      
;;;503      tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
000004  f000041f          AND      r4,r0,#0x1f
000008  2301              MOVS     r3,#1
00000a  fa03f204          LSL      r2,r3,r4
;;;504    
;;;505      if (NewState != DISABLE)
00000e  b129              CBZ      r1,|L28.28|
;;;506      {
;;;507        SCB->SHCSR |= tmpreg;
000010  4b05              LDR      r3,|L28.40|
000012  681b              LDR      r3,[r3,#0]
000014  4313              ORRS     r3,r3,r2
000016  4c04              LDR      r4,|L28.40|
000018  6023              STR      r3,[r4,#0]
00001a  e004              B        |L28.38|
                  |L28.28|
;;;508      }
;;;509      else
;;;510      {
;;;511        SCB->SHCSR &= ~tmpreg;
00001c  4b02              LDR      r3,|L28.40|
00001e  681b              LDR      r3,[r3,#0]
000020  4393              BICS     r3,r3,r2
000022  4c01              LDR      r4,|L28.40|
000024  6023              STR      r3,[r4,#0]
                  |L28.38|
;;;512      }
;;;513    }
000026  bd10              POP      {r4,pc}
;;;514    
                          ENDP

                  |L28.40|
                          DCD      0xe000ed24

                          AREA ||i.NVIC_SystemHandlerPriorityConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemHandlerPriorityConfig PROC
;;;535    *******************************************************************************/
;;;536    void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
000000  b5f0              PUSH     {r4-r7,lr}
;;;537                                          u8 SystemHandlerSubPriority)
;;;538    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;539      u32 tmp1 = 0x00, tmp2 = 0xFF, handlermask = 0x00;
000008  2000              MOVS     r0,#0
00000a  22ff              MOVS     r2,#0xff
00000c  2600              MOVS     r6,#0
;;;540      u32 tmppriority = 0x00;
00000e  2100              MOVS     r1,#0
;;;541    
;;;542      /* Check the parameters */
;;;543      assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
;;;544      assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
;;;545      assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
;;;546        
;;;547      tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
000010  4f16              LDR      r7,|L29.108|
000012  683f              LDR      r7,[r7,#0]
000014  f40767e0          AND      r7,r7,#0x700
000018  f5c767e0          RSB      r7,r7,#0x700
00001c  0a39              LSRS     r1,r7,#8
;;;548      tmp1 = (0x4 - tmppriority);
00001e  f1c10004          RSB      r0,r1,#4
;;;549      tmp2 = tmp2 >> tmppriority;
000022  40ca              LSRS     r2,r2,r1
;;;550        
;;;551      tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
000024  fa04f100          LSL      r1,r4,r0
;;;552      tmppriority |=  SystemHandlerSubPriority & tmp2;
000028  ea050702          AND      r7,r5,r2
00002c  4339              ORRS     r1,r1,r7
;;;553    
;;;554      tmppriority = tmppriority << 0x04;
00002e  0109              LSLS     r1,r1,#4
;;;555      tmp1 = SystemHandler & (u32)0xC0;
000030  f00300c0          AND      r0,r3,#0xc0
;;;556      tmp1 = tmp1 >> 0x06; 
000034  0980              LSRS     r0,r0,#6
;;;557      tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
000036  f3c32201          UBFX     r2,r3,#8,#2
;;;558      tmppriority = tmppriority << (tmp2 * 0x08);
00003a  00d7              LSLS     r7,r2,#3
00003c  40b9              LSLS     r1,r1,r7
;;;559      handlermask = (u32)0xFF << (tmp2 * 0x08);
00003e  ea4f0cc2          LSL      r12,r2,#3
000042  27ff              MOVS     r7,#0xff
000044  fa07f60c          LSL      r6,r7,r12
;;;560      
;;;561      SCB->SHPR[tmp1] &= ~handlermask;
000048  4f08              LDR      r7,|L29.108|
00004a  370c              ADDS     r7,r7,#0xc
00004c  f8577020          LDR      r7,[r7,r0,LSL #2]
000050  43b7              BICS     r7,r7,r6
000052  f8dfc018          LDR      r12,|L29.108|
000056  f10c0c0c          ADD      r12,r12,#0xc
00005a  f84c7020          STR      r7,[r12,r0,LSL #2]
;;;562      SCB->SHPR[tmp1] |= tmppriority;
00005e  4667              MOV      r7,r12
000060  f8577020          LDR      r7,[r7,r0,LSL #2]
000064  430f              ORRS     r7,r7,r1
000066  f84c7020          STR      r7,[r12,r0,LSL #2]
;;;563    }
00006a  bdf0              POP      {r4-r7,pc}
;;;564    
                          ENDP

                  |L29.108|
                          DCD      0xe000ed0c

                          AREA ||i.NVIC_SystemLPConfig||, CODE, READONLY, ALIGN=2

                  NVIC_SystemLPConfig PROC
;;;463    *******************************************************************************/
;;;464    void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
000000  b129              CBZ      r1,|L30.14|
;;;465    {
;;;466      /* Check the parameters */
;;;467      assert_param(IS_NVIC_LP(LowPowerMode));
;;;468      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;469      
;;;470      if (NewState != DISABLE)
;;;471      {
;;;472        SCB->SCR |= LowPowerMode;
000002  4a06              LDR      r2,|L30.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L30.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L30.24|
                  |L30.14|
;;;473      }
;;;474      else
;;;475      {
;;;476        SCB->SCR &= (u32)(~(u32)LowPowerMode);
00000e  4a03              LDR      r2,|L30.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L30.28|
000016  601a              STR      r2,[r3,#0]
                  |L30.24|
;;;477      }
;;;478    }
000018  4770              BX       lr
;;;479    
                          ENDP

00001a  0000              DCW      0x0000
                  |L30.28|
                          DCD      0xe000ed10
