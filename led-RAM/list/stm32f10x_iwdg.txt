; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_iwdg.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_iwdg.crf lib\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||i.IWDG_Enable||, CODE, READONLY, ALIGN=2

                  IWDG_Enable PROC
;;;119    *******************************************************************************/
;;;120    void IWDG_Enable(void)
000000  f64c40cc          MOV      r0,#0xcccc
;;;121    {
;;;122      IWDG->KR = KR_KEY_Enable;
000004  4901              LDR      r1,|L1.12|
000006  6008              STR      r0,[r1,#0]
;;;123    }
000008  4770              BX       lr
;;;124    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  IWDG_GetFlagStatus PROC
;;;135    *******************************************************************************/
;;;136    FlagStatus IWDG_GetFlagStatus(u16 IWDG_FLAG)
000000  4601              MOV      r1,r0
;;;137    {
;;;138      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;139    
;;;140      /* Check the parameters */
;;;141      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;142    
;;;143      if ((IWDG->SR & IWDG_FLAG) != (u32)RESET)
000004  4a03              LDR      r2,|L2.20|
000006  68d2              LDR      r2,[r2,#0xc]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L2.16|
;;;144      {
;;;145        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L2.18|
                  |L2.16|
;;;146      }
;;;147      else
;;;148      {
;;;149        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L2.18|
;;;150      }
;;;151    
;;;152      /* Return the flag status */
;;;153      return bitstatus;
;;;154    }
000012  4770              BX       lr
;;;155    
                          ENDP

                  |L2.20|
                          DCD      0x40003000

                          AREA ||i.IWDG_ReloadCounter||, CODE, READONLY, ALIGN=2

                  IWDG_ReloadCounter PROC
;;;105    *******************************************************************************/
;;;106    void IWDG_ReloadCounter(void)
000000  f64a20aa          MOV      r0,#0xaaaa
;;;107    {
;;;108      IWDG->KR = KR_KEY_Reload;
000004  4901              LDR      r1,|L3.12|
000006  6008              STR      r0,[r1,#0]
;;;109    }
000008  4770              BX       lr
;;;110    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  IWDG_SetPrescaler PROC
;;;71     *******************************************************************************/
;;;72     void IWDG_SetPrescaler(u8 IWDG_Prescaler)
000000  4901              LDR      r1,|L4.8|
;;;73     {
;;;74       /* Check the parameters */
;;;75       assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;76     
;;;77       IWDG->PR = IWDG_Prescaler;
000002  6048              STR      r0,[r1,#4]
;;;78     }
000004  4770              BX       lr
;;;79     
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_SetReload||, CODE, READONLY, ALIGN=2

                  IWDG_SetReload PROC
;;;88     *******************************************************************************/
;;;89     void IWDG_SetReload(u16 Reload)
000000  4901              LDR      r1,|L5.8|
;;;90     {
;;;91       /* Check the parameters */
;;;92       assert_param(IS_IWDG_RELOAD(Reload));
;;;93     
;;;94       IWDG->RLR = Reload;
000002  6088              STR      r0,[r1,#8]
;;;95     }
000004  4770              BX       lr
;;;96     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x40003000

                          AREA ||i.IWDG_WriteAccessCmd||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;47     *******************************************************************************/
;;;48     void IWDG_WriteAccessCmd(u16 IWDG_WriteAccess)
000000  4901              LDR      r1,|L6.8|
;;;49     {
;;;50       /* Check the parameters */
;;;51       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;52     
;;;53       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;54     }
000004  4770              BX       lr
;;;55     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x40003000
