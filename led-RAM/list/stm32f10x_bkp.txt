; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\stm32f10x_bkp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\output\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\lib\inc -I.\User -IE:\Keil_v5\ARM\RV31\INC -IE:\Keil_v5\ARM\CMSIS\Include -IE:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=520 -DVECT_TAB_RAM --omf_browse=.\output\stm32f10x_bkp.crf lib\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||i.BKP_ClearFlag||, CODE, READONLY, ALIGN=2

                  BKP_ClearFlag PROC
;;;252    *******************************************************************************/
;;;253    void BKP_ClearFlag(void)
000000  4803              LDR      r0,|L1.16|
;;;254    {
;;;255      /* Set CTE bit to clear Tamper Pin Event flag */
;;;256      BKP->CSR |= CSR_CTE_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L1.16|
00000a  8008              STRH     r0,[r1,#0]
;;;257    }
00000c  4770              BX       lr
;;;258    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  BKP_ClearITPendingBit PROC
;;;279    *******************************************************************************/
;;;280    void BKP_ClearITPendingBit(void)
000000  4803              LDR      r0,|L2.16|
;;;281    {
;;;282      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;283      BKP->CSR |= CSR_CTI_Set;
000002  8800              LDRH     r0,[r0,#0]
000004  f0400002          ORR      r0,r0,#2
000008  4901              LDR      r1,|L2.16|
00000a  8008              STRH     r0,[r1,#0]
;;;284    }
00000c  4770              BX       lr
;;;285    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40006c34

                          AREA ||i.BKP_DeInit||, CODE, READONLY, ALIGN=1

                  BKP_DeInit PROC
;;;74     *******************************************************************************/
;;;75     void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77       RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;78       RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;79     }
00000e  bd10              POP      {r4,pc}
;;;80     
                          ENDP


                          AREA ||i.BKP_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetFlagStatus PROC
;;;239    *******************************************************************************/
;;;240    FlagStatus BKP_GetFlagStatus(void)
000000  4801              LDR      r0,|L4.8|
;;;241    {
;;;242      return (FlagStatus)(*(vu32 *) CSR_TEF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;243    }
000006  4770              BX       lr
;;;244    
                          ENDP

                  |L4.8|
                          DCD      0x420d86a0

                          AREA ||i.BKP_GetITStatus||, CODE, READONLY, ALIGN=2

                  BKP_GetITStatus PROC
;;;266    *******************************************************************************/
;;;267    ITStatus BKP_GetITStatus(void)
000000  4801              LDR      r0,|L5.8|
;;;268    {
;;;269      return (ITStatus)(*(vu32 *) CSR_TIF_BB);
000002  6800              LDR      r0,[r0,#0]
000004  b2c0              UXTB     r0,r0
;;;270    }
000006  4770              BX       lr
;;;271    
                          ENDP

                  |L5.8|
                          DCD      0x420d86a4

                          AREA ||i.BKP_ITConfig||, CODE, READONLY, ALIGN=2

                  BKP_ITConfig PROC
;;;125    *******************************************************************************/
;;;126    void BKP_ITConfig(FunctionalState NewState)
000000  4901              LDR      r1,|L6.8|
;;;127    {
;;;128      /* Check the parameters */
;;;129      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;130    
;;;131      *(vu32 *) CSR_TPIE_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;132    }
000004  4770              BX       lr
;;;133    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      0x420d8688

                          AREA ||i.BKP_RTCOutputConfig||, CODE, READONLY, ALIGN=2

                  BKP_RTCOutputConfig PROC
;;;149    *******************************************************************************/
;;;150    void BKP_RTCOutputConfig(u16 BKP_RTCOutputSource)
000000  4601              MOV      r1,r0
;;;151    {
;;;152      u16 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;153    
;;;154      /* Check the parameters */
;;;155      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;156    
;;;157      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L7.24|
000006  8810              LDRH     r0,[r2,#0]
;;;158    
;;;159      /* Clear CCO, ASOE and ASOS bits */
;;;160      tmpreg &= RTCCR_Mask;
000008  f64f427f          MOV      r2,#0xfc7f
00000c  4010              ANDS     r0,r0,r2
;;;161      
;;;162      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;163      tmpreg |= BKP_RTCOutputSource;
00000e  4308              ORRS     r0,r0,r1
;;;164    
;;;165      /* Store the new value */
;;;166      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L7.24|
000012  8010              STRH     r0,[r2,#0]
;;;167    }
000014  4770              BX       lr
;;;168    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_ReadBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_ReadBackupRegister PROC
;;;223    *******************************************************************************/
;;;224    u16 BKP_ReadBackupRegister(u16 BKP_DR)
000000  4601              MOV      r1,r0
;;;225    {
;;;226      /* Check the parameters */
;;;227      assert_param(IS_BKP_DR(BKP_DR));
;;;228    
;;;229      return (*(vu16 *) (BKP_BASE + BKP_DR));
000002  4802              LDR      r0,|L8.12|
000004  4408              ADD      r0,r0,r1
000006  f8b00c00          LDRH     r0,[r0,#0xc00]
;;;230    }
00000a  4770              BX       lr
;;;231    
                          ENDP

                  |L8.12|
                          DCD      0x40006000

                          AREA ||i.BKP_SetRTCCalibrationValue||, CODE, READONLY, ALIGN=2

                  BKP_SetRTCCalibrationValue PROC
;;;177    *******************************************************************************/
;;;178    void BKP_SetRTCCalibrationValue(u8 CalibrationValue)
000000  4601              MOV      r1,r0
;;;179    {
;;;180      u16 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;181    
;;;182      /* Check the parameters */
;;;183      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;184    
;;;185      tmpreg = BKP->RTCCR;
000004  4a04              LDR      r2,|L9.24|
000006  8810              LDRH     r0,[r2,#0]
;;;186    
;;;187      /* Clear CAL[6:0] bits */
;;;188      tmpreg &= RTCCR_CAL_Mask;
000008  f64f7280          MOV      r2,#0xff80
00000c  4010              ANDS     r0,r0,r2
;;;189    
;;;190      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;191      tmpreg |= CalibrationValue;
00000e  4308              ORRS     r0,r0,r1
;;;192    
;;;193      /* Store the new value */
;;;194      BKP->RTCCR = tmpreg;
000010  4a01              LDR      r2,|L9.24|
000012  8010              STRH     r0,[r2,#0]
;;;195    }
000014  4770              BX       lr
;;;196    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40006c2c

                          AREA ||i.BKP_TamperPinCmd||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinCmd PROC
;;;108    *******************************************************************************/
;;;109    void BKP_TamperPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L10.8|
;;;110    {
;;;111      /* Check the parameters */
;;;112      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;113    
;;;114      *(vu32 *) CR_TPE_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;115    }
000004  4770              BX       lr
;;;116    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x420d8600

                          AREA ||i.BKP_TamperPinLevelConfig||, CODE, READONLY, ALIGN=2

                  BKP_TamperPinLevelConfig PROC
;;;91     *******************************************************************************/
;;;92     void BKP_TamperPinLevelConfig(u16 BKP_TamperPinLevel)
000000  4901              LDR      r1,|L11.8|
;;;93     {
;;;94       /* Check the parameters */
;;;95       assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;96     
;;;97       *(vu32 *) CR_TPAL_BB = BKP_TamperPinLevel;
000002  6008              STR      r0,[r1,#0]
;;;98     }
000004  4770              BX       lr
;;;99     
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420d8604

                          AREA ||i.BKP_WriteBackupRegister||, CODE, READONLY, ALIGN=2

                  BKP_WriteBackupRegister PROC
;;;206    *******************************************************************************/
;;;207    void BKP_WriteBackupRegister(u16 BKP_DR, u16 Data)
000000  4a02              LDR      r2,|L12.12|
;;;208    {
;;;209      /* Check the parameters */
;;;210      assert_param(IS_BKP_DR(BKP_DR));
;;;211    
;;;212      *(vu16 *) (BKP_BASE + BKP_DR) = Data;
000002  4402              ADD      r2,r2,r0
000004  f8a21c00          STRH     r1,[r2,#0xc00]
;;;213    }
000008  4770              BX       lr
;;;214    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      0x40006000
